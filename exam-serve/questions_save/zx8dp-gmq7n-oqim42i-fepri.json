{"questions_stem":"这个问题是 LeetCode 平台新增的交互式问题 。\n\n我们给出了一个由一些独特的单词组成的单词列表，每个单词都是 6 个字母长，并且这个列表中的一个单词将被选作秘密。\n\n你可以调用 master.guess(word) 来猜单词。你所猜的单词应当是存在于原列表并且由 6 个小写字母组成的类型字符串。\n\n此函数将会返回一个整型数字，表示你的猜测与秘密单词的准确匹配（值和位置同时匹配）的数目。此外，如果你的猜测不在给定的单词列表中，它将返回 -1。\n\n对于每个测试用例，你有 10 次机会来猜出这个单词。当所有调用都结束时，如果您对 master.guess 的调用不超过 10 次，并且至少有一次猜到秘密，那么您将通过该测试用例。\n\n除了下面示例给出的测试用例外，还会有 5 个额外的测试用例，每个单词列表中将会有 100 个单词。这些测试用例中的每个单词的字母都是从 'a' 到 'z' 中随机选取的，并且保证给定单词列表中的每个单词都是唯一的。\n\n```md\n  示例 1:\n输入: secret = \"acckzz\", wordlist = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"]\n\n解释:\n\nmaster.guess(\"aaaaaa\") 返回 -1, 因为 \"aaaaaa\" 不在 wordlist 中.\nmaster.guess(\"acckzz\") 返回 6, 因为 \"acckzz\" 就是秘密，6个字母完全匹配。\nmaster.guess(\"ccbazz\") 返回 3, 因为 \"ccbazz\" 有 3 个匹配项。\nmaster.guess(\"eiowzz\") 返回 2, 因为 \"eiowzz\" 有 2 个匹配项。\nmaster.guess(\"abcczz\") 返回 4, 因为 \"abcczz\" 有 4 个匹配项。\n\n我们调用了 5 次master.guess，其中一次猜到了秘密，所以我们通过了这个测试用例。\n```\n提示：任何试图绕过评判的解决方案都将导致比赛资格被取消","questions_answer":"```js\n  var compare = function (s1, s2) {\n    var i = 0, cnt = 0;\n    while (i < s1.length && i < s2.length) {\n        if (s1[i] == s2[i]) cnt++;\n        i++\n    }\n    // console.log(\"cp\"+s1+\" \"+s2+\" res:\"+cnt)\n    return cnt;\n}\nvar findSecretWord = function (wordlist, master) {\n    var f0 = wordlist[0];\n    var test0 = master.guess(f0);\n    console.log(\"size:\" + wordlist.length + \"test:\" + f0 + \" result:\" + test0);\n    if (test0 < f0.length) {\n        wordlist = wordlist.filter(item => item != f0 && compare(f0, item) == test0);\n        findSecretWord(wordlist.reverse(), master);//reverse一下是因为不re的话某个用例刚好需要11次才能过QAQ\n    }\n\n};\n```","questions_id":"zx8dp-gmq7n-oqim42i-fepri"}