{"questions_stem":"检索并计算属于同一教室中每个学生的平均分数，例子中教室 ID 为 75。每个学生可以在一年内参加一门或多门课程。以下 API 可用于检索所需数据。\n```\n// GET LIST OF ALL STUDENTS\nGET /api/students\nResponse:\n[{\n    \"id\": 1,\n    \"name\": \"John\",\n    \"classroomId\": 75\n}]\n// GET COURSES FOR GIVEN A STUDENT\nGET /api/courses?filter=studentId eq 1\nResponse:\n[{\n    \"id\": \"history\",\n    \"studentId\": 1\n}, {\n    \"id\": \"algebra\",\n    \"studentId\": 1\n}]\n// GET EVALUATION FOR EACH COURSE\nGET /api/evaluation/history?filter=studentId eq 1\nResponse:\n{\n    \"id\": 200,\n    \"score\": 50,\n    \"totalScore\": 100\n}\n```\n编写一个接受教室 ID 的函数，并根据该函数计算该教室中每个学生的平均值。 该函数的最终输出应该是带有平均分数的学生列表：\n```\n[\n  { \"id\": 1, \"name\": \"John\", \"average\": 70.5 },\n  { \"id\": 3, \"name\": \"Lois\", \"average\": 67 },\n}\n```\n使用普通回调，promises，observables，generator 或 async-wait 编写所需的函数。 尝试使用至少 2 种不同的技术解决这个问题。\n代码素材用于代替接口\n```\nconst APIS = {\n  STUDENTS: '/api/students',\n  COURSES: '/api/courses',\n  EVALUATION: '/api/evaluation/'\n}; \nfunction fetchData(api) {\n  return new Promise(resolve => {\n    let data = null;\n    switch (api) {\n      case APIS.STUDENTS:\n        data = [{\n          id: 1,\n          name: 'John',\n          classroomId: 75\n        }, {\n          id: 1,\n          name: 'Tom',\n          classroomId: 75\n        }];\n        break;\n      case APIS.COURSES:\n        data = [{\n          id: 'history',\n          studentId: 1\n        }, {\n          id: 'algebra',\n          studentId: 1\n        }];\n        break;\n      case APIS.EVALUATION:\n        data = {\n          id: '200',\n          score: 50,\n          totalScore: 100\n        };\n        break;\n    } \n    resolve(data);\n  });\n} \n```","questions_answer":"```\nfunction fetchStudents(classroomId) {\n  return fetchData(APIS.STUDENTS, {\n    classroomId\n  });\n} \nfunction fetchCourses(studentId) {\n  return fetchData(APIS.COURSES, {\n    studentId\n  });\n} \nfunction fetchEvaluation(course, studentId) {\n  // 地址本来应该拼接为`${APIS.EVALUATION}${course}`，为了方便mock数据就直接写死了\n  return fetchData(APIS.EVALUATION, {\n    studentId\n  });\n} \nasync function main(classRoomId) {\n  const students = await fetchStudents(classRoomId);\n  const studentsPromise = students.map(async (student) => {\n    const courses = await fetchCourses(student.id);\n    const coursesPromise = courses.map(async (course) => {\n      const evaluation = await fetchEvaluation(course.id, student.id);\n      course.evaluation = evaluation;\n    });\n    await Promise.all(coursesPromise);\n    student.courses = courses;\n  });\n  await Promise.all(studentsPromise);\n  // 此时得到每个学生 每门课程下的分数的数据 可以进行求平均分了\n  const average = students.map(({ id, name, courses }) => ({\n    id,\n    name,\n    average: courses.reduce((prev, current) => prev + current.evaluation.score, 0) / courses.length\n  })); \n  console.log(average);\n  // [ { id: 1, name: 'John', average: 50 }, { id: 1, name: 'Tom', average: 50 } ]\n} \nmain(72);\n```","questions_id":"pwrym-ypsrgi-3smad-bm9d1m"}