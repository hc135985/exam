{"questions_stem":"在给定的网格中，每个单元格可以有以下三个值之一：\n\n值 0 代表空单元格；\n值 1 代表新鲜橘子；\n值 2 代表腐烂的橘子。\n每分钟，任何与腐烂的橘子（在 4 个正方向上）相邻的新鲜橘子都会腐烂。\n\n返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1。\n\n示例一：\n![alt](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/oranges.png)\n```md\n  输入：[[2,1,1],[1,1,0],[0,1,1]]\n  输出：4\n```\n示例一：\n```md\n  输入：[[2,1,1],[1,1,0],[0,1,1]]\n  输出：4\n```\n示例一：\n```md\n  输入：[[2,1,1],[1,1,0],[0,1,1]]\n  输出：4\n```\n提示：\n```md\n  -1 <= grid.length <= 10\n - 1 <= grid[0].length <= 10\n - grid[i][j] 仅为 0、1 或 2\n```","questions_answer":"/**\n * 思路：\n * 1. 遍历出所有坏橘子\n * 2. 隔一分钟感染周边新鲜橘子，对比一下和上次的图是否一样\n * 3. 如果一样，说明无法再感染，算出新鲜橘子的数量，如果没有，说明全部感染，返回分钟数。如果有，说明不可能做到，返回-1。\n * 4. 如果不一样，继续感染\n */\nconst orangesRotting = function(grid) {\n  let lastGridString = grid.toString()\n\n  if (lastGridString.indexOf(1) === -1) {\n    return 0\n  }\n\n  let count = 0\n  const xLen = grid.length\n  const yLen = grid[0].length\n  let laterRottedOranges = []\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 2) {\n        laterRottedOranges.push([i, j])\n      }\n    }\n  }\n\n  while (true) {\n    const tempRottedOranges = laterRottedOranges.slice(0)\n    laterRottedOranges = []\n    for (let i = 0; i < tempRottedOranges.length; i++) {\n      let x = tempRottedOranges[i][0]\n      let y = tempRottedOranges[i][1]\n      if (x > 0 && grid[x - 1][y] === 1) {\n        laterRottedOranges.push([x - 1, y])\n        grid[x - 1][y] = 2\n      }\n      if (x < xLen - 1 && grid[x + 1][y] === 1) {\n        laterRottedOranges.push([x + 1, y])\n        grid[x + 1][y] = 2\n      }\n      if (y > 0 && grid[x][y - 1] === 1) {\n        laterRottedOranges.push([x, y - 1])\n        grid[x][y - 1] = 2\n      }\n      if (y < yLen - 1 && grid[x][y + 1] === 1) {\n        laterRottedOranges.push([x, y + 1])\n        grid[x][y + 1] = 2\n      }\n    }\n    // 比较是否相等\n    const gridString = grid.toString()\n    if (gridString !== lastGridString) {\n      count++\n      lastGridString = gridString\n    } else {\n      break\n    }\n  }\n  // 看还有没有=1的\n  if (lastGridString.indexOf(1) > -1) {\n    return -1\n  }\n\n  return count\n}","questions_id":"7hxosn-8h0py-8ixo5-e1elvt"}