{"questions_stem":"\n```\n\n/**\n * @param list {object[]}, \n * @param parentKey {string}\n * @param currentKey {string}\n * @param rootValue {any}\n * @return object\n */\nfunction convert(list, parentKey, currentKey, rootValue) {\n  let tree = {}\n    \n  return tree\n}\n\n接收\nconst list = [\n  {\n    \"id\": 19,\n    \"parentId\": 0,\n  },\n  {\n    \"id\": 18,\n    \"parentId\": 16,\n  },\n  {\n    \"id\": 17,\n    \"parentId\": 16,\n  },\n  {\n    \"id\": 16,\n    \"parentId\": 0,\n  }\n];\n\n返回\nconst result = convert(list, 'parentId', 'id', 0);\nconst tree = {\n  \"id\": 0,\n  \"children\": [\n    {\n      \"id\": 19,\n      \"parentId\": 0\n    },\n    {\n      \"id\": 16,\n      \"parentId\": 0,\n      \"children\": [\n        {\n          \"id\": 18,\n          \"parentId\": 16\n        },\n        {\n          \"id\": 17,\n          \"parentId\": 16\n        }\n      ]\n    }\n  ]\n}\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n","questions_answer":"```\n/**\n * @param list {object[]},\n * @param parentKey {string}\n * @param currentKey {string}\n * @param rootValue {any}\n * @return object\n */\nfunction convert(list, parentKey, currentKey, rootValue) {\n  let tree = {\n    [currentKey]: rootValue\n  }\n  \n  tree.children = findChildren(rootValue, list)\n    \n  return tree\n}\n\nfunction findChildren(id, list) {\n    let children = []\n    list.forEach((item, index) => {\n       if (item.parentId === id) {\n           item.children = findChildren(item.id, list)\n           children.push(item)\n        }\n    })\n    return children;\n}\n\nconst list = [\n  {\n    \"id\": 19,\n    \"parentId\": 0,\n  },\n  {\n    \"id\": 18,\n    \"parentId\": 16,\n  },\n  {\n    \"id\": 17,\n    \"parentId\": 16,\n  },\n  {\n    \"id\": 16,\n    \"parentId\": 0,\n  }\n];\n\nconst result = convert(list, 'parentId', 'id', 0);\n```","questions_id":"lahic9-5l9ax7-2c5a09-ukz1o"}