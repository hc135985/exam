[{"title":"实现发布订阅模式","questions_id":"aihpv-1ru212-wun87-0hli3","json_path":"aihpv-1ru212-wun87-0hli3.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"现在有一个类 \n\n```\nclass Watch{\n  on(){\n   // 实现该方法逻辑\n  }\n  emit(){\n   // 实现该方法逻辑 \n  }\n}\n\n//调用示例如下：\nconst w1 = new Watch();\nw1.on('www',(options) => {\n  console.log(options)\n});\nw1.emit('www','success');\n\n// 最后的打印结果是  success\n\n```\n\n请实现要求的逻,可以对该类进行任意修改","student_answer":"class Watch {\n    constructor() {\n        this.handle = [];\n    }\n    on(topic, fn) {\n        this.handle.push({\n            topic: topic,\n            fn: fn\n        })\n        console.log(this.handle)\n    }\n    emit(topic, fn) {\n        let index;\n        this.handle.forEach(function(data, i) {\n            if(data.topic == topic && data.fn == fn) {\n                index = i;\n            }\n        })\n        delete this.handle[index];\n        console.log(this.handle)\n    }\n    publish(topic, message){\n        this.handle.forEach(function(data) {\n            if(data.topic == topic) {\n                data.fn(message)\n            }\n        })\n    }\n}"},{"title":"async配合transition实现自定义动画","questions_id":"bqq54a-jly2z9-m9fg7pj-oio193","json_path":"bqq54a-jly2z9-m9fg7pj-oio193.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"html结构\n```html\n<div id=\"box\"></div>\n```\ncss样式\n```css\n#box{\n  width:100px; height:100px; background-color:red; border-radius:50%; transition:transform 0.5s;\n}\n```\njavaScript代码\n```js\n        const oBox = document.getElementById('box');\n        oBox.addEventListener('transitionend',()=>{\n            let {x,y} = oBox;\n            moveTo.reslove({x,y});\n        },false);\n        function moveTo(x,y){\n            return new Promise((reslove,reject)=>{\n                moveTo.reslove = reslove;\n                oBox.x = x;\n                oBox.y = y;\n                oBox.style.transform = `translate(${x}px,${y}px)`;\n            })\n        }\n```\n\n补全以上代码，使点击oBox后，使oBox走出一个  W 的轨迹（使用async函数实现），并简单写出整体的代码思路。","student_answer":" const oBox = document.getElementById('box');\n const wP = [{x: 0,y: 0}, {x: 120,y: 240}, {x: 200,y: 0}, {x: 280,y: 240}, {x: 360,y: 0}]\n    oBox.addEventListener('transitionend',()=>{\n          let {x,y} = oBox;\n          moveTo.reslove({x,y});\n     },false);\n     function moveTo(x,y){\n          return new Promise((reslove,reject)=>{\n                moveTo.reslove = reslove;\n                oBox.x = x;\n                oBox.y = y;\n                oBox.style.transform = `translate(${x}px,${y}px)`;\n            })\n      }\n     oBox.onclick = async() => {\n            for (let item of wP) {\n                await moveTo(item.x, item.y)\n            }\n      }\n"},{"title":"输入的reduce方法","questions_id":"zyocwi-drka9-kx8vv-blrmw9p","json_path":"zyocwi-drka9-kx8vv-blrmw9p.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"现在有一个数组如下：\n```js\n    const car = [\n            {\n                groupName:'水果',\n                type:[\n                    {\n                        name:'苹果',\n                        price:10\n                    },\n                    {\n                        name:'橘子',\n                        price:40\n                    },\n                    {\n                        name:'香蕉',\n                        price:90\n                    }\n                ]\n            },\n            {\n                groupName:'蔬菜',\n                type:[\n                    {\n                        name:'芹菜',\n                        price:10\n                    },\n                    {\n                        name:'菠菜',\n                        price:15\n                    },\n                    {\n                        name:'土豆',\n                        price:8\n                    }\n                ]\n            }\n        ]\n```\n\n根据上述数据，编写一个函数，该函数(computedPrice)接收上述的数据作为参数，返回一个对象，请输入用数组的reduce方法实现。对象的格式如下\n\n```js\n       {\n            allPrice:所有商品的总价格,\n            group:[\n                {\n                    typeName:'水果',\n                    price:所有水果的总价格\n                },\n                {\n                    typeName:'蔬菜',\n                    price:所有蔬菜的总价格\n                }\n            ]\n        } \n```  ","student_answer":"const computedPrice = (arr) =>{\n     let allPrice = 0;\n     let group = [];\n     arr.forEach((item,i)=>{\n           let price = item.type.reduce((prev,cur)=>{\n                  return prev+ cur.price\n            },0);\n           allPrice +=price;\n           group.push({\n                typename:item.groupName,\n                price\n            })\n            });\n            return {\n                allPrice,\n                group\n      }\n  }\n computedPrice( car)\n"},{"title":"完成 convert(list) 函数，实现将 list 转为 tree","questions_id":"lahic9-5l9ax7-2c5a09-ukz1o","json_path":"lahic9-5l9ax7-2c5a09-ukz1o.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"\n```\n\n/**\n * @param list {object[]}, \n * @param parentKey {string}\n * @param currentKey {string}\n * @param rootValue {any}\n * @return object\n */\nfunction convert(list, parentKey, currentKey, rootValue) {\n  let tree = {}\n    \n  return tree\n}\n\n接收\nconst list = [\n  {\n    \"id\": 19,\n    \"parentId\": 0,\n  },\n  {\n    \"id\": 18,\n    \"parentId\": 16,\n  },\n  {\n    \"id\": 17,\n    \"parentId\": 16,\n  },\n  {\n    \"id\": 16,\n    \"parentId\": 0,\n  }\n];\n\n返回\nconst result = convert(list, 'parentId', 'id', 0);\nconst tree = {\n  \"id\": 0,\n  \"children\": [\n    {\n      \"id\": 19,\n      \"parentId\": 0\n    },\n    {\n      \"id\": 16,\n      \"parentId\": 0,\n      \"children\": [\n        {\n          \"id\": 18,\n          \"parentId\": 16\n        },\n        {\n          \"id\": 17,\n          \"parentId\": 16\n        }\n      ]\n    }\n  ]\n}\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n","student_answer":"function convert(rows){\n  2         function exists(rows, parentId){\n    3             for(var i=0; i<rows.length; i++){\n      4                 if (rows[i].id == parentId) return true;\n      5             }\n    6             return false;\n    7         }\n  8         \n  9         var nodes = [];\n  10         // get the top level nodes\n  11         for(var i=0; i<rows.length; i++){\n    12             var row = rows[i];\n    13             if (!exists(rows, row.parentId)){\n      14                 nodes.push({\n        15                     id:row.id,\n        16                     text:row.name\n        17                 });\n      18             }\n    19         }\n  20         \n  21         var toDo = [];\n  22         for(var i=0; i<nodes.length; i++){\n    23             toDo.push(nodes[i]);\n    24         }\n  25         while(toDo.length){\n    26             var node = toDo.shift();    // the parent node\n    27             // get the children nodes\n    28             for(var i=0; i<rows.length; i++){\n      29                 var row = rows[i];\n      30                 if (row.parentId == node.id){\n        31                     var child = {id:row.id,text:row.name};\n        32                     if (node.children){\n          33                         node.children.push(child);\n          34                     } else {\n            35                         node.children = [child];\n            36                     }\n        37                     toDo.push(child);\n        38                 }\n      39             }\n    40         }\n  41         return nodes;\n  42     }\n"}]