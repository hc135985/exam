[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"<span id=\"info_jb51_net\">请改变浏览器窗口大小</span>\n<script>\nwindow.onresize = function(){\ndocument.getElementById(\"info_jb51_net\").innerHTML=\"600px\"+document.documentElement.clientWidth+\"，600px+document.documentElement.clientHeight;\n}</script>"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"1. 函数定义式的无状态组件\n\n     创建纯展示组件，只负责根据传入的props来展示，不涉及state的操作。\n\n     无状态函数式组件形式上表现为一个直带有一个render方法的组件类。 \nfunction HelloComponent(props){\n   return <div>Hello {props.name}</div>\n}\nReacrDom.render(<HelloComponent name=\"Sebstian\"/>,mountNode)\n  特点是精简，避免冗余，以及：1.组件不会实例化，整体渲染性能提升\n 2.组件不能访问this对象  3.组件无法访问生命周期的方法 4.无状态组件只能访问输入的props\n\n2.es5原生方式React.createClass定义的组件\n\n   有状态的组件，会被实例化，可以访问组件生命周期。\n\n   React,createClass会自绑定函数方法导致不必要的性能开销，增加代码过时的可能性\n\n   React.createClass的mixins不够自然，直观。适合高阶组件。\n\n3. es6，React.Component\n\n    与上面的区别：\n\n      React.createClass创建的组件，每个成员函数的this都有React自动绑定，任何时候使用，直接使用this.method即可\n         React.Component需要开发者手动绑定this（在构造函数完成绑定；调用时使用bind；使用箭头函数）\n     React.createClass在创建组件时，有关组件props的属性类型及组建默认的属性会作为组件实例的属性来配置\n          React.Component则是作为组建类的属性，也就是所谓的类的静态属性配置的\n     React.createClass创建的组件，其状态state是通过getInitialState方法来配置组件相关的状态\n          React.Component创建组建是，state是在constructor中像初始化组件属性一样声明的\n"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"\t\tlet image=new Image();\n\t\timage.onload=function(){\n\t\t\tresolve(image);\n\t\t};\n\t\timage.onerror=function(){\n\t\t\treject(new Error('Could not image at'+url));\n\t\t}\n\t\timage.src=url;\n"}]