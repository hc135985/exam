[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"let str =  '';\nwindow.onresize = function(){\n  if(document.body.clientWidth >= 600){\n    if(str === ''){\n      str='hello';\n      console.log(str);\n    }else{\n      return;\n    }\n  }\n}"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"1.函数组件（无状态组件）\n\t特点：组件不会被实例化\n    \t不能访问 this 对象\n    \t不能使用生命周期的方法\n        \n 2.ES5 中 React.createClass （有状态的）\n \t特点：需要实例化\n       可以使用生命周期函数\n       会自动绑定 this \n\t\tprops的属性类型及组件默认的属性会作为组件实例的属性来配置\n\t\t\t\n       \n2.ES6 中 React.Component{  }\n\t特点：需要手动绑定 this （构造函数，bind，）\n\t\t\tstate 状态是在 constructor 中声明\n        props属性类型和组件默认属性作为组件类的属性，不是组件实例的属性，所以使用类的静态属性配置。"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg = (src) => {\n  return new Promise((resolve, reject) => {\n    // write your code here\n    let img = document.createElement('img');\n    img.src = src;\n    document.body.append(img);\n    setTimeout(() => {\n      resolve(true);\n    }, 1000)\n  })\n}\n const imgs = ['./img/1.jpg', './img/2.jpg', './img/3.jpg', './img/4.jpg'];\n// 依次加载图片\nasync function fSync(imgs) {\n  // write your code here\n  for(let i of imgs){\n    await loadImg(i);\n  }\n}\nfSync(imgs);"},{"title":"防抖场景实现","questions_id":"pee5rm-didl4v-b5ty-eay7yo","json_path":"pee5rm-didl4v-b5ty-eay7yo.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"题目 有一个 input 查询框，每一次 change 都会触发一个“ a 函数”\n要求\n1.此 input 框的 change 请求 在间隔 0.3s 内的过滤掉\n2.提供一个包装函数，可以对上述的“ a 函数”请求过滤做统一的封装\n```\n<input id=\"input\" />\n```","student_answer":"function input(value) {\n  console.log(`输入的内容${value}`)\n}\nconst ipt = document.getElementById('input')\n\nfunction debounce(fun,delay){\n  let timer ;\n  return function(args){\n    const that = this;\n    clearTimeout(timer)\n    timer = setTimeout(function(){\n      fun.call(that,args)\n    },delay)\n  }\n}\nconst debounceInput = debounce(input,500)\nipt.addEventListener(\"keyup\",function(e){\n  debounceInput(e.target.value)\n})"}]