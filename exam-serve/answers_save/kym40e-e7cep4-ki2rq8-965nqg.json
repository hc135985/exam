[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":" let width = document.documentElement.clientWidth\n let timer = setTimeout(()=>{\n     window.onresize=function(){\n       if(width>=600){\n         console.log('hellow')\n         clearTimeout(timer)\n       }\n\n     }\n  },1000)\n"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"React:\n 1,函数定义  无状态组件\n 2，es5原生方式 React.createClass定义的组件（要废弃）\n 3，es6形式的extends React.Component定义的组件\n区别：\nReact.createClass创建的组件，其每一个成员函数的this都有React自动绑定，任何时候使用，直接使用this.method即可，函数中的this会被正确设置。\nReact.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。\n函数组件不会被实例化，整体渲染性能得到提升，也不能访问this指向，没有state状态，无法访问生命周期，只能访问输入的props\n\nvue\n1，全局注册组件：\n2，局部注册组件\n \n区别\n全局注册一次各地方适用，局部注册的话只能在注册页面可用"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":" let loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n      const img = new Image()\n      img.onload=()=>{\n        resolve(img)\n      }\n      img.onerror=()=>{\n      \t\treject('找不到该图片路径')\n      }\n      img.src=src\n    })\n   }\n\n   loadImg('http://www.baidu.com/img/0_046c2cad38212182c25271c90c48dbf3.png').then((img) => {\n            document.body.appendChild(img)\n         }, (mes) => {\n            console.log(mes)\n     })\n       \n"}]