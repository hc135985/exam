[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"    let flag = true;\n        window.onresize = function(){\n           \n           if(document.body.offsetWidth>=600){\n               if(flag){\n                   console.log(\"hello\")\n                   flag=false\n               }\n           }else{\n               flag = true;\n           }\n        }"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"react 有三种\n一：函数式定义的无状态组件\n\t\t区别：组件不会被实例化，整体渲染性能得到提升，组件不能访问this对象，组件无法访问生命周期的方法无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用，并且不能创建自己的state，没有生命周期函数，尽量使用无状态组件\n        方式： function myComponent(props) { \n                  return \n                     <div>Hello {props.name}</div> \n             }\n二：es5原生方式React.createClass定义的组件\n\t区别：创建的组件，其每一个成员函数的this都有React自动绑定，任何时候使用，可以访问生命周期函数\n   方式：var myCreate = React.createClass({\n    defaultProps: { \n        //code\n    },\n    getInitialState: function() {\n        return {\n        };\n    },\n    render: function() {\n        return (\n            <div>\n            </div>\n        );\n    }\n});\n\t\n三：es6形式的extends React.Component定义的组件\n  区别：创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。可以访问生命周期函数，状态state是在constructor中像初始化。 props属性类型和组件默认属性作为组件类的属性，不是组件实例的属性，所以使用类的静态属性配置。\n  方式：class InputControlES6 extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            state_exam: 'hello'\n        };\n\n        // ES6 类中函数必须手动绑定\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange() {\n        this.setState({\n            state_exam: 'hello world'\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                //code\n            </div>\n        );\n    }\n};\n  "},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"const image = new Image()\nimage.onload = resolve\nimage.onerror = reject\nimage.src=src\n\n\n\nloadImg(\"11.png\").then(()=>console.log(\"success\")).catch(()=>console.log(\"error\"))"}]