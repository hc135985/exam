[{"title":"Vue基础知识","questions_id":"05snch-6eq8dn-szfd6q-t34nld","json_path":"05snch-6eq8dn-szfd6q-t34nld.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 控制元素显示隐藏的指令v-if与v-show之间的区别及适用场景？","student_answer":"\n控制元素显示隐藏的指令v-if与v-show之间的区别及适用场景？\n\n首先从机制来说,v-show 是利用display属性做的显示和隐藏的, 而 v-if 是通过动态创建dom节点的; \nv-show 利用display属性, 隐藏了还是会在dom 树中存在, v-if 则没创建的时候dom树中是没有这个节点的\n应用场景:\n\t当需要多次操作dom的显示隐藏的时候, 就使用 v-show   而满足条件创建标签的时候, 不满足的时候什么执行不同的事我们就需要使用 v-if \n   优化性能"},{"title":"使用async函数实现多张图片的依次加载（哪张加载完哪张添加到页面）","questions_id":"5oxqyl-8dnbaa-3dt3o9-qrecrk","json_path":"5oxqyl-8dnbaa-3dt3o9-qrecrk.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用async函数实现多张图片的依次加载（哪张加载完哪张添加到页面）\n\n```js\n// 封装加载图片的promise  \nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}   \nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fAsync(imgs){\n   // write your code here\n}\n\nfAsync(imgs);\n```","student_answer":"// 封装加载图片的promise  \nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n      let img = new Image();\n      img.onload = ()=>{\n        resolve(img);\n       }\n      img.src = url;\n   \t });   \n}   \nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fAsync(imgs){\n   // write your code here\n  \tfor(var i =0;i<imgs.length;i++){\n      await loadImg(imgs[i])\n    }\n}\n\nfAsync(imgs);"},{"title":"vue自定义指令","questions_id":"6ivrh-g7kp8a-2gixkg-p117t","json_path":"6ivrh-g7kp8a-2gixkg-p117t.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"## 阅读如下代码，写出代码的功能，输入和输出\n```js\nVue.filter('formatDate', function(value){\n  let date = new Date();\n  date.setTime(value);\n  let year = date.getFullYear(),\n      month = (date.getMonth() + 1).toString().padStart(2, '0'),\n      day = date.getDate().toString().padStart(2, '0'),\n      hour = date.getHours().toString().padStart(2, '0'),\n      min = date.getMinutes().toString().padStart(2, '0'),\n      sec = date.getSeconds().toString().padStart(2, '0');\n  return `${year}-${month}-${day} ${hour}:${min}:${sec}`\n});\n```","student_answer":"Vue.filter('formatDate', function(value){\n  let date = new Date();\n  date.setTime(value); //=> 当用户传入一个数字,会把数字按照毫秒值,返回输入的毫秒值 距离1970 00:00:00 之间的毫秒差\n  let year = date.getFullYear(), //=> 获取到年\n      month = (date.getMonth() + 1).toString().padStart(2, '0'),\n      day = date.getDate().toString().padStart(2, '0')\n      hour = date.getHours().toString().padStart(2, '0'),\n      min = date.getMinutes().toString().padStart(2, '0'),\n      sec = date.getSeconds().toString().padStart(2, '0');\n  return `${year}-${month}-${day} ${hour}:${min}:${sec}`\n});\n\n//=> 功能: 实现用户输入数字返回给用户从初始时间加上毫秒差的值转换 为 年-月-日 时:分:秒 \n//=> param: 第一个是定义的过滤器名字, 第二是过滤器处理函数 ,处理函数中接收的参数是用户输入的内容\n//=> 输出: 拼接为字符串类型的时间格式"},{"title":"vue自定义指令","questions_id":"9wck8-qt73nd-0v6s8-f6jyid","json_path":"9wck8-qt73nd-0v6s8-f6jyid.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"## 阅读如下代码，写出代码的功能，输入和输出\n```js\nVue.filter('toThousandFilter', function(num){\n  return (+num || 0).toString().replace(/^-?\\d+/g, m => m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ','))\n});\n```","student_answer":"\nVue.filter('toThousandFilter', function(num){\n  return (+num || 0).toString().replace(/^-?\\d+/g, m => m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ','))\n});\n\n//=> 功能: 实现将一串数字进行每隔三位进行用逗号分隔\n//=> 输入: 用户输入一串数字\n//=> 输出: 把用户输入的 数字转换为每隔三位一个逗号分隔的字符串\n\n//=> 例: \"213,123,123,213,123,123\"\n\n\n"}]