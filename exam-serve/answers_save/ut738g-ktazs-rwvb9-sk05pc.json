[{"title":"类的抽象","questions_id":"c7y73-e0nft-6rplem-daxvxe","json_path":"c7y73-e0nft-6rplem-daxvxe.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"## 使用ES6的Class完成如下功能\n阿里云产品线十分丰富，拥有ECS、RDS等数百款产品，每个产品都具有一些通用属性，例如：  \nID（id），地域（region），名称（name），同时每个产品又包含自己特有的属性。 ECS拥  \n有实例（instance）属性，可选值有ecs.t1.small、ecs.t3.small、ecs.t1.large RDS  \n拥有数据库类型（dbType）属性，可选值有mysql、mssql、PPAS 请使用你的面向对象知识，  \n基于ES6语法编写ECS、RDS两个类，并实现如下方法：   \n- 1. config() 返回一个字面量对象，可以拿到所有的成员变量。  \n- 2. buy() 返回一个URL，格式https://www.aliyun.com/buy?id=xxx&region=xxx&name=xxx&每个产品自己特有的成员变量","student_answer":"// instance 属性值\nlet instaceEnum = {\n    t1s: \"ecs.t1.small\",\n    t3s: \"ecs.t3.small\",\n    t1l: \"ecs.t1.large\"\n}\n// dbType 属性值\nlet dbTypeEnum = {\n    mysql: \"mysql\",\n    mssql: \"mssql\",\n    PPAS: \"PPAS\"\n}\n\n// 定义父类，名字是自己取的\nclass Product {\n    // 通过构造器接收属性值_id、_region、_name\n    constructor(_id, _region, _name) {\n        // 增加ID属性\n        this.id = _id;\n        // 增加地域（region）属性\n        this.region = _region;\n        // 增加名称（name）属性\n        this.name = _name;\n    }\n\n    // 返回所有成员变量\n    config() {\n        return this;\n    }\n\n    // 获得URL\n    buy() {\n        // 设置返回URL的默认值\n        var url = \"https://www.aliyun.com/buy?\";\n        // 设置一个空数组，用于存放参数\n        var urlArr = [];\n        for (let key in this) {\n            // 判断是否存在某属性，这里也可以用this.hasOwnProperty(key)\n            if (this[key])\n                urlArr.push(key + \"=\" + this[key]);// 拼接后放到数组中\n        }\n        // 将urlArr以\"&\"分割转为字符串\n        url += urlArr.join(\"&\");\n        return url;\n    }\n}\n\n// 定义子类ECS继承了父类Product\nclass ECS extends Product {\n    // 接收通用属性_id,_region,_name与独有的实例（instance）属性\n    constructor(_id, _region, _name, _instance) {\n        // 将通用属性传递给父类\n        super(_id, _region, _name);\n        // 增加实例（instance）属性\n        this.instance = _instance;\n    }\n}\n\n// 定义子类RDS继承了父类Product\nclass RDS extends Product {\n    // 接收通用属性_id,_region,_name与独有的数据库类型（dbType）属性\n    constructor(_id, _region, _name, _dbType) {\n        // 将通用属性传递给父类\n        super(_id, _region, _name);\n        // 增加数据库类型（dbType）属性\n        this.instance = _dbType;\n    }\n}\n\n\n\n"},{"title":"使用类实现任务调度","questions_id":"sue8v-wa50ws-jss7qm-592yt8","json_path":"sue8v-wa50ws-jss7qm-592yt8.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用js实现以下效果 \nvar priorityQueue = new PriorityQueue();  \npriorityQueue.enqueue('优先级1-1', 1);  \npriorityQueue.enqueue('优先级3-1', 3);  \npriorityQueue.enqueue('优先级1-2', 1);  \npriorityQueue.enqueue('优先级2-1', 2);  \npriorityQueue.print();  \n// 优先级1-1 优先级1-2 优先级2-1 优先级3-1 priorityQueue.dequeue();   \n```js\nclass PriorityQueue{\n    constuctor(obj){\n        this.arr=[];\n    }\n    enqueue(str,num){\n        // write your code here\n    }\n    print(){\n       // write your code here \n    }\n}\n```","student_answer":"//npm i bobolink\nconst Bobolink = require('bobolink');\n// 每个Bobolink实例都有一个大的队列用于存放任务，所以可以很放心地将任务扔给它，适当的时机下Bobolink会很可靠地调度这些任务。\nlet q = new Bobolink();\n// 下面的打印序是 1 2 3\nnew Promise(resolve => {\n    console.log(1);\n    resolve(3)\n}).then(res => {\n    console.log(res);\n})\nconsole.log(2)\nfunction p() {\n    // 返回promise任务\n    return new Promise(resolve => {\n        console.log(1);\n        resolve(3)\n    }).then(res => {\n        console.log(res);\n    })\n}\nconsole.log(2);\nfunction p() {\n    return new Promise(resolve => {\n        console.log(1);\n        resolve(2)\n    }).then(res => {\n        console.log(res);\n        return 3;\n    })\n}\n// 由于队列很空闲, 可以立即调度本任务,\n// 所以很快就成功打印出了1, 之后的then则需要等待合适的时机回调,\n// 如果Promise及其上面的所有then都执行完了, 最终会传递到put.then\nq.put(p).then(task => {\n    // 打印最终值3\n    console.log(task.res)\n});\nfunction getP(flag) {\n    return function p() {\n        return new Promise(resolve => {\n            resolve(flag)\n        });\n    }\n}\nq.put([getP(1), getP(2), getP(3)]).then(tasks => {\n    // 打印每个任务的返回值, 按放入顺序一一对应\n    for (let i = 0; i < tasks.length; i++) {\n        console.log(tasks[i].res);\n    }\n})\n\nlet q = new Bobolink({\n   // 最大并行数，最小为1\n   concurrency: 5,\n   // 任务超时时间ms，0不超时\n   timeout: 15000,\n   // 任务失败重试次数，0不重试\n   retry: 0,\n   // 是否优先处理失败重试的任务，为true则失败的任务会被放置到队列头\n   retryPrior: false,\n   // 是否优先处理新任务，为true则新任务会被放置到队列头\n   newPrior: false,\n   // 最大可排队的任务数, -1为无限制, 超过最大限制时添加任务将返回错误'bobolink_exceeded_maximum_task_number'\n   max: -1,\n   // 指定任务的调度模式，仅在初始化时设置有效\n   scheduling: {\n     // 默认为'immediately'，任务将在队列空闲时立即得到调度。\n     // 你也可以将它设置为'frequency', 并且指定countPerSecond, Bobolink将严格地按照设定的频率去调度任务。\n     enable: 'frequency',\n     frequency: {\n       // 每秒需要调度的任务数，仅在任务队列有空闲时才会真正调度。\n       countPerSecond: 10000\n     }\n   },\n   // 任务失败的handler函数，如果设置了重试，同个任务失败多次会执行catch多次\n   catch: (err) => {\n\n   }\n});\nq.setOptions({\n   concurrency: 5,\n   timeout: 15000,\n   retry: 0,\n   retryPrior: false,\n   newPrior: false,\n   catch: null\n});\n\ntaskRes = {\n    // 执行是否遇到错误, 判断任务是否执行成功的判断依据是err === undefined, err为任何其它值都代表了运行失败。\n    // 任务出错时, 如果不重试, 那么catch到的错误会直接放入err, 超时时err为'bobolink_timeout'\n    // 如果重试, 且在最大重试次数之后依然错误的话, 会将最后一次的错误放入err\n    // 如果重试, 且在重试期间成功的话, 被认为是成功的, 所以err为空\n    err: undefined,\n    // 执行Promise返回的结果\n    res: Object,\n    // 从任务放入队列到该任务最后一次被调度, 所经过的时间(ms)\n    waittingTime: 20,\n    // 该任务最后一次运行的时间(ms)\n    runTime: 1,\n    // 该任务出错重试的次数\n    retry: 2\n}\n\nBobolink.ptototype.put(tasks, prior)"},{"title":"访问器属性的应用","questions_id":"txtcbb-7qmgwa-kwpbgu-08tn5qe","json_path":"txtcbb-7qmgwa-kwpbgu-08tn5qe.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请实现以下需求：\n1. 声明一个变量a = 10；\n2. 声明一个变量b，b的值永远自动的保持为a的2倍；\n\n效果如下，\nvar a = 10;\nvar b;\n// 自行实现绑定\n\n最后打印的结果如下：\nconsole.log(a); // 10\nconsole.log(b); // 20\n\na = 30;\nconsole.log(a); // 30\nconsoel.log(b); // 60","student_answer":"var a=10;\nvar b;\nb =a*2;\nconsole.log(a*2,b)"},{"title":"使用async函数实现多张图片的依次加载（第一张加载完之后才能加载第二张）","questions_id":"fl7dll-xh6eo-hpri8a-edulg","json_path":"fl7dll-xh6eo-hpri8a-edulg.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用async函数实现多张图片的依次加载（第一张加载完之后才能加载第二张）\n\n```js\n// 封装加载图片的promise  \nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}   \nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fSync(imgs){\n   // write your code here\n}\n\nfSync(imgs);\n```","student_answer":"let loadImg = (src) => {\n        return new Promise((resolve, reject) => {\n            let img = document.createElement('img')\n            img.src = src\n            document.body.append(img)\n            setTimeout(() => {\n                resolve(true)\n            }, 1000)\n        })\n    }\n    const imgs = ['../src/img/1.PNG', '../src/img/1.PNG', '../src/img/1.PNG'];\n    // 依次加载图片\n    async function fSync(imgs) {\n        for (let i of imgs) {\n            await loadImg(i)\n        }\n    }\n    fSync(imgs);\n"}]