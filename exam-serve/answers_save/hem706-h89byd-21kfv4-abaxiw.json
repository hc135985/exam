[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"      let open=true\n        window.onresize=function(){     \n            if(document.documentElement.clientWidth>=600){\n               if(open){\n                   console.log(\"hellow\")\n                   open=false\n               }\n            }else{\n                open=true\n            }       \n        }"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"React创建组件方式以及区别如下：\n-----------------------------------------------------------------------------------------------------------------\n函数式定义的无状态组件 它是为了创建纯展示组件，这种组件只负责根据传入的props来展示，不涉及到要state状态的操作。组件不会被实例化，整体渲染性能得到提升，组件不能访问this对象 组件无法访问生命周期的方法，无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用   例子如下：\nfunction HelloComponent(props, /* context */) {\n  return <div>Hello {props.name}</div>\n}\nReactDOM.render(<HelloComponent name=\"Sebastian\" />, mountNode) \n--------------------------------------------------------------------------------------------------------------------\nes5原生方式React.createClass定义的组件有状态的组件，会被实例化，可以访问组件生命周期。\n React,createClass会自绑定函数方法导致不必要的性能开销，增加代码过时的可能性\n React.createClass的mixins不够自然，直观。适合高阶组件。\n<div id=\"example\"></div>\n<script type=\"text/babel\">\nvar HelloMessage = React.createClass({\n\t\trender: function() {\n\t\t\t\treturn <h1>Hello {this.props.name}</h1>;\n\t\t}\n\t});\n\tReactDOM.render(<HelloMessage name=\"John\" />,document.getElementById('example')\n------------------------------------------------------------------------------------------------------------\nes6形式的extends React.Component定义的组件。React.Component需要开发者手动绑定this（在构造函数完成绑定；调用时使用bind；使用箭头函数）。React.Component则是作为组建类的属性，也就是所谓的类的静态属性配置的。React.Component创建组建是，state是在constructor中像初始化组件属性一样声明的\n import React,{Component} from 'react'\n            import ReactDOM from 'react-dom'\n            class Box extends Component{\n                constructor(props) {\n                    super(props)\n                    this.state={\n                        data:\"\"\n                    }\n                }\n                render(){\n                    return <div></div>\n                }\n            componentDidmount(){\n                //通过该生命周期函数获取后台数据ajax 以及new swiper一些实例\n            }\n            }\n  ReactDOM.render(<Box/>,document.querySelector(\"#root\"))"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    const image = new Image();\n    image.onload = function() {\n      resolve(image);\n    };\n    image.onerror = function() {\n    reject(new Error('Could not load image at ' + src));\n    };\n    image.src = src;\n    })\n}"}]