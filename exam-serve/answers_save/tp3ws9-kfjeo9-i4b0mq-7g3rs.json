[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":" <span id=\"btn\">请改变浏览器窗口大小</span>\n    <script>\n        var flag=true;\n        window.onresize = function(){\n            var wis=window.innerWidth;\n             if(flag){\n                if(wis>=600){\n                    console.log('hello')\n                    flag=false\n                }else{\n                    flag=true\n                }\n             }\n           document.getElementById(\"btn\").innerHTML=\"宽度：\"+window.innerWidth+\"，高度：\"+window.innerHeight;\n        }\n    </script>"},{"title":"肥猫列表","questions_id":"a2u5p-vzci28-ctdv2a-zux3v","json_path":"a2u5p-vzci28-ctdv2a-zux3v.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"dingshaoshan","user_id":"ypay2t-7uxsd","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"现在有很多只猫，都很肥：\n\nconst cats = [\n  { name: 'Tom', weight: 300 },\n  { name: 'Lucy', weight: 400 },\n  { name: 'Lily', weight: 700 },\n  { name: 'Jerry', weight: 600 },\n  ...\n]\n\n现在你需要把它们按照由胖到瘦的顺序排个序","student_answer":"        const cats = [{\n          name: \"Tom\",\n          weight: 300\n        }, {\n          name: \"Lucy\",\n          weight: 400\n        }, {\n          name: \"Lily\",\n          weight: 700\n        }, {\n          name: \"Jerry\",\n          weight: 600\n        }]\n        //排序函数\n        function sortNumber(){\n          //定义空数组\n          let arr=[];\n          //遍历添加\n          cats.map(item=>{\n            arr.push(item.weight)\n          })\n          //按需排序\n          arr.sort((a,b)=>{\n            return b-a;\n          })\n          return arr;\n        }\n       console.log(sortNumber())"},{"title":"实现双向数据绑定","questions_id":"nodsz-nme56x-51nrc-tklsfn","json_path":"nodsz-nme56x-51nrc-tklsfn.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"使用js实现一个数据双向绑定效果, input中输入的内容同步到p标签中\n```\n<div id=\"app\">\n    <input type=\"text\" id=\"txt\">\n    <p id=\"show-txt\"></p>\n</div>\n```","student_answer":"    let show=document.querySelector('#show-txt');\n    let txt=document.querySelector('#txt');//获取节点\n    txt.oninput=(e)=>{//文本框input改变事件\n      show.innerHTML=e.target.value;//赋值\n    }"},{"title":"最高产的猪","questions_id":"oynzjn-gvvv5s-uowecl-m4yg2h","json_path":"oynzjn-gvvv5s-uowecl-m4yg2h.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"dingshaoshan","user_id":"ypay2t-7uxsd","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"我们用一个 HTML 结构来表示一头猪的子子孙孙：\n<div class=\"pig\">\n  <div class=\"pig\">\n    <div class=\"pig\">\n      <div class=\"pig\"></div>\n    </div>\n    <div class=\"pig\">\n      <div class=\"pig\"></div>\n    </div>\n  </div>\n  <div class=\"pig\">\n    <div class=\"pig\"></div>\n    <div class=\"pig\"></div>\n  </div>\n  <div class=\"pig\">\n    <div class=\"pig\">\n      <div class=\"pig\"></div>\n      <div class=\"pig\"></div>\n      <div class=\"pig\"></div>\n      <div class=\"pig\"></div>\n      <div class=\"pig\"></div>\n    </div>\n  </div>\n</div>\n\n每个 DOM 节点都是一头猪，子节点就是这头猪的孩子。\n请你完成一个函数 mostProductivePigCount 它接受一个 DOM 节点作为参数，返回一个数组。存放同代猪的孩子的数量。\n\n比如第一代猪的孩子有3个，第二代猪的孩子分别有[2, 2, 1]，第三代猪的孩子分别有[1,1,0,0,5]","student_answer":"   <div class=\"pig\">\n        <div class=\"pig\">\n            <div class=\"pig\">\n                <div class=\"pig\"></div>\n            </div>\n            <div class=\"pig\">\n                <div class=\"pig\"></div>\n            </div>\n            <div class=\"pig\">\n                <div class=\"pig\"></div>\n            </div>\n        </div>\n        <div class=\"pig\">\n            <div class=\"pig\"></div>\n            <div class=\"pig\"></div>\n            <div class=\"pig\"></div>\n            <div class=\"pig\"></div>\n            <div class=\"pig\"></div>\n        </div>\n        <div class=\"pig\">\n            <div class=\"pig\">\n              <div class=\"pig\"></div>\n              <div class=\"pig\"></div>\n              <div class=\"pig\"></div>\n              <div class=\"pig\"></div>\n              <div class=\"pig\"></div>\n              <div class=\"pig\"></div>\n              <div class=\"pig\"></div>\n            </div>\n        </div>\n    </div>\n    <script>\n        const pig = document.querySelector('.pig')\n         //定义查找子孙函数\n          const findMostProductivePigChildrenCount = (dom) => {\n            //定义空数组，用于存储\n            let result = [];\n            //查找遍历\n            const findFun = (targets, result) => {\n                let childrenTargets = [];\n                let max = 0;//最大值\n                for (let target of targets) {\n                    // 如果有子节点\n                    if (target.childElementCount) {\n                        // 将子节点放入数组中\n                        childrenTargets.push(...target.children);\n                        max = Math.max(max, target.childElementCount)\n                    }\n                }\n                result.push(max);\n                // 进行下一轮遍历\n                if (childrenTargets.length) {\n                    findFun(childrenTargets, result)\n                }\n            };\n            // 初始化遍历\n            findFun([dom], result);\n            return result;\n        }\n        console.log(findMostProductivePigChildrenCount(pig))\n    </script>"}]