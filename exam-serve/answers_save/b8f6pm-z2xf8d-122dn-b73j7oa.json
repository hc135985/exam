[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"var str=\"\"\nwindow.onresize = function(){\n \tif(document.body.clientWidth>=600){\n    if(str==\"\"){\n      str=\"hello\";\n      console.log(str\n   \t}else{\n    return\n    }\n  }\n};\n"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"1.无状态函数组件\n\t<1>创建纯展示组件，组件不会被实例化，整体渲染性能得到提升,只负责根据传入的props来展示，不涉及到要state状态的操作，\t是一个只带有一个render方法的组件类\n\t<2>组件不能访问this对象\n\t<3>组件无法访问生命周期的方法\n2.React.createClass\n \t<1>React.createClass`是react刚开始推荐的创建组件的方式，这是ES5的原生的JavaScript来实现的React组件\n \t<2>React.createClass创建的组件，其每一个成员函数的this都有React自动绑定，任何时候使用，直接使用this.method即可，函数\t    中的this会被正确设置\n3.React.Component\n\t<1>React.Component是以ES6的形式来创建react的组件的，是React目前极为推荐的创建有状态组件的方式，最终会取代\t\t\tReact.createClass形式；相对于 React.createClass可以更好实现代码复用\n\t<2>React.Component创建的组件，其成员函数不会自动绑定this，需要手动绑定，否则this不能获取当前组件实例对象"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loading = (src) => {\n\treturn new Promise((resolve, reject) => {\n \t\tlet img = document.createElement('img')\n   \t\t\timg.src = src\n   \t\t\tdocument.body.append(img)\n   \t\t\tsetTimeout(() => {\n      \t\t\tresolve(true)\n    \t\t}, 1000)\n})\nconst imgs=[img1.png,img2.png,img3.png,img4.png];\n async function fn(imgs){\n   for(let i of imgs){\n     await loading(img[i])\n   }\n }\n  \n"},{"title":"防抖场景实现","questions_id":"pee5rm-didl4v-b5ty-eay7yo","json_path":"pee5rm-didl4v-b5ty-eay7yo.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"题目 有一个 input 查询框，每一次 change 都会触发一个“ a 函数”\n要求\n1.此 input 框的 change 请求 在间隔 0.3s 内的过滤掉\n2.提供一个包装函数，可以对上述的“ a 函数”请求过滤做统一的封装\n```\n<input id=\"input\" />\n```","student_answer":" const ipt=document.querySelector('#ipt');\nfunction input(value) {\n   console.log(`输入的内容${value}`)\n}\nfunction a(fun, delay) {\n    let timer;\n     return function (args) {\n       const that = this\n       clearTimeout(timer)\n       timer = setTimeout(function () {\n       fun.call(that, args)\n    }, delay)\n}\n}\nconst b = a(input, 300)\n  ipt.addEventListener(\"input\", function (e) {\n    b(e.target.value)\n})"}]