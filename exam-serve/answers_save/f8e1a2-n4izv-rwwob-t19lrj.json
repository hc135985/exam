[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"   var winWidth=0\n   var flag = true\n   window.onload=function(){  \n     changeDivWidth();  \n    }  \n\n  //当浏览器窗口大小改变时，获取宽度  \n  \twindow.onresize=function(){  \n    changeDivWidth();  \n  \t}  \n\n  //获取宽度并判断\n   function changeDivWidth(){               \n     var winWidth = window.innerWidth\n     if(winWidth >= 600 && flag){\n       console.log('hello')\n       flag = false\n      }\n    }"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"1> 函数式定义的无状态组件   \n\t  组件不会被实例化，整体渲染性能得到提升\n     组件不能访问this对象\n     组件无法访问生命周期的方法\n     无状态组件只能访问输入的props\n     \n2>\tes5原生方式  React.createClass定义的组件\n\t\t会自绑定函数方法,导致不必要的性能开销\n\t\n\n3> es6形式的   extends React.Component定义的组件\n\t  是React目前极为推荐的创建有状态组件的方式\n     可以更好实现代码复用"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":" let loadImg = (src)=>{\n     return new Promise((resolve, reject)=>{\n       // write your code here\n       var image = new Image();\n       image.onload = function () {\n         resolve(image);\n       }\n       image.onerror = function () {\n         reject(new Error('无法加载出此图片 '+src))\n       }\n       image.src = src\n     })\n  }"}]