[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"var flag= false;      \nwindow.onresize = function(){\nif(window.innerWidth>=600){\n    if(flag==false){\n      console.log('hello')\n    }\n    flag=true\n  }else{\n    flag=false\n  }\n}"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"一、函数创建  -无状态组件\nimport React from 'react'\nlet Func =（）=>（\n\t<div>我是函数组件</div>\n）\nexport default Func\n二、class类创建  -es6\nimport React,{Component} from 'react'\nclass List extends Component{\n  constructor(){\n    super()\n  }\n  render(){\n    return(\n      <div>我是class类创建的组件</div>\n    )\n  }\n}\n三、React.createClass()  -es5  已经废弃了\n区别：1、函数组件为纯展示组件，只负责根据传入的props来展示，不涉及到要操作state状态\n    2、函数组件称为无状态组件，内部无生命周期，组件不会实例化，不能访问this\n    3、class类创建的和React.createClass（）创建的组件都是有状态的，可以访问生命周期，要被实例化\n    4、class类创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例\n    5、React.createClass（）创建的组件，其每一个成员函数的this都有React自动绑定对象"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":" let promise = new Promise((resolve, reject) => {\n   let img = new Image();\n   img.onload = () => {\n     resolve(img);\n   }\n   img.onerror = () => {\n     reject('找不到图片');\n   }\n   img.src = 'D:/2常用软件/壁纸/1ccc.jpg';\n\n })\n promise.then((img) => {\n   document.body.appendChild(img);\n }).catch((mes) => {\n   console.log(mes)\n })\nlet data = [{\n  src: 'D:/2常用软件/壁纸/1.jpg',\n  title: '图片1'\n}, {\n  src: 'D:/2常用软件/壁纸/2.jpg',\n  title: '图片2'\n}, {\n  src: 'D:/2常用软件/壁纸/3.jpg',\n  title: '图片3'\n}]\n\nfunction getImg(data) {\n  return data.map((item) => {\n    let promise = new Promise((resolve, reject) => {\n      const img = new Image();\n      img.onload = () => {\n        resolve(img)\n      }\n      img.onerror = () => {\n        reject('路径错误，加载不到图片')\n      }\n      img.src = item.src\n    })\n    return promise;\n  })\n}\nPromise.all(getImg(data)).then((img) => {\n  img.map(item => {\n    document.body.appendChild(item)\n  })\n}, (err) => {\n  console.log(err)\n})\n"}]