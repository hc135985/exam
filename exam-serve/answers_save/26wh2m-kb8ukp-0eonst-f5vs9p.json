[{"title":"computed 和 watch 区别","questions_id":"joo9h2-q79phw-pskuido-ua4t7k","json_path":"joo9h2-q79phw-pskuido-ua4t7k.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"computed 和 watch 区别?\n\n\n\n\n\n\n\n\n\n\n\n","student_answer":"computed 属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；\ncomputed属性的作用与watch类似，也可以监听属性的变化\nVue的watch属性可以用来监听data属性中数据的变化\nwatch 一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是 computed 和 methods 的结合体；"},{"title":"实现双向数据绑定","questions_id":"nodsz-nme56x-51nrc-tklsfn","json_path":"nodsz-nme56x-51nrc-tklsfn.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"使用js实现一个数据双向绑定效果, input中输入的内容同步到p标签中\n```\n<div id=\"app\">\n    <input type=\"text\" id=\"txt\">\n    <p id=\"show-txt\"></p>\n</div>\n```","student_answer":"<div id=\"mvvm-app\">\n    <input type=\"text\" v-model=\"word\">\n    <p>{{word}}</p>\n    <button v-on:click=\"sayHi\">change model</button>\n</div>\n\n<script src=\"./js/observer.js\"></script>\n<script src=\"./js/watcher.js\"></script>\n<script src=\"./js/compile.js\"></script>\n<script src=\"./js/mvvm.js\"></script>\n<script>\n    var vm = new MVVM({\n        el: '#mvvm-app',\n        data: {\n            word: 'Hello World!'\n        },\n        methods: {\n            sayHi: function() {\n                this.word = 'Hi, everybody!';\n            }\n        }\n    });\n</script>"},{"title":"Vue导航守卫做鉴权处理","questions_id":"42cuvb-7216fb-zlkab2-wwns3d","json_path":"42cuvb-7216fb-zlkab2-wwns3d.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"wbxm4-jf8q6k-lvt2ca-ze96mg","exam_name":"月考","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 在Vue中我们可以使用导航守卫做鉴权，现有要求如下：  \n可以根据getToken()是否返回token判断  \n- 1.如果用户已经登陆  \n  - a. 如果用户要去/login页面，则重定向到/路径  \n  - b. 如果用户要去其他页面，则不做处理直接跳转    \n- 2.如果用户未登陆  \n  - a. 如果用户要去的页面在白名单内，则不做处理直接跳转  \n  - b. 如果用户要去的页面不在白名单内，则重定向到/login页面，并把要去的页面路径作为查询字符串的query的值\n\n```js\nimport router from './router'\nimport { getToken } from '@/utils/auth' // getToken from cookie\n\nconst whiteList = ['/login', '/register', '/auth-redirect']// no redirect whitelist\n\nrouter.beforeEach((to, from, next) => {\n  if (getToken()) { // determine if there has token\n    // write your code here\n  } else {\n    // write your code here\n  }\n})\n```","student_answer":"//全局守卫，记录登录状态\nrouter.beforeEach((to,from,next)=>{\n    //需求登录判断\n    if(to.meta.auth){\n        //未登录\n        var isLogin = sessionStorage.getItem('isLogin');\n        if(isLogin){\n            next();\n        }else{\n          next('login');\n        }\n    }else{\n      next();\n    }\n})\n\nimport router from './router'\nimport { getToken } from '@/utils/auth' // getToken from cookie\n\nconst whiteList = ['/login', '/register', '/auth-redirect']// no redirect whitelist\n\nrouter.beforeEach((to, from, next) => {\n  if (getToken()) { // 判断是否有token\n    if (to.meta.roles && to.meta.roles.indexOf(user.role) === -1) {\n    \talert('403')\n    \tif(from.path == '/login'){\n    \t\tnext('/')\n    \t}else{\n    \t\tnext({path: from.path})\n    \t}\n    } else {//页面没有权限要求就直接访问\n    \tnext()\n    }\n  } else if(to.path != '/login'){//没有token的话让跳转到登录页，并传递当前准备访问的路由\n      next({path:'/login', query: {redirect: to.fullPath}})\n  } else{\n  \tnext()\n  }\n\n  \n  \n})"},{"title":"Vue基础知识","questions_id":"uecyx-3qim4-rwk9o-v43sj8","json_path":"uecyx-3qim4-rwk9o-v43sj8.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"wbxm4-jf8q6k-lvt2ca-ze96mg","exam_name":"月考","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 谈谈对Vue响应原理的理解?","student_answer":"vue将data初始化为一个Observer并对对象中的每个值，重写了其中的get、set，data中的每个key，都有一个独立的依赖收集器。\n在get中，向依赖收集器添加了监听\n在mount时，实例了一个Watcher，将收集器的目标指向了当前Watcher\n在data值发生变更时，触发set，触发了依赖收集器中的所有监听的更新，来触发Watcher.update"}]