[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"let str =  '';\n        window.onresize = function(){\n            if(document.body.clientWidth>= 600){\n                if(str === ''){\n                    str='hello';\n                    console.log(str);\n                }else{\n                    return;\n                }\n            }\n        }"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"react中创建组件的三种方式分别有\n1、函数式定义的无状态组件\n2、es5原生方式React.createClass定义的组件\n3、es6形式的extends React.Component定义的组件\n它们的区别是：\n一、无状态组件\n\t1.组件不会被实例化，整体渲染性能得到提升\n   2.组件不能访问this对象\n   3.组件无法访问生命周期的方法\n   4.无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\n   无状态组件被鼓励在大型项目中尽可能以简单的写法来分割原本庞大的组件，未来React也会这种面向无状态组件在譬如无意义的检\t\t查和内存分配领域进行一系列优化，所以只要有可能，尽量使用无状态组件。\n二、React.creatClass\n\t1.React.createClass会自绑定函数方法（不像React.Component只绑定需要关心的函数）导致不必要的性能开销，增加代码过时的可能性。\n\t2.React.createClass的mixins不够自然、直观；React.Component形式非常适合高阶组件\t（Higher Order Components--HOC）,它以更直观的形式展示了比mixins更强大的功能，并且HOC是纯净的JavaScript，不用担心他们会被废弃。\n三、React.creatClass和React.Component 都是创建有状态的组件，并且都是要被实列化的，并且都可以访问生命周期，他们之间的区\t别就是 ：\n\t1.函数this自绑定\n      React.creatClass 创建的组件，其每一个成员函数的this都有React自动绑定，任何时候使用，直接使用this.method即\t\t可，函数中的this会被正确设置。React.Component 创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this\t\t不能获取当前组件实例对象。\n   2.组件属性类型propTypes及其默认props属性defaultProps配置不同\n   \t\tReact.createClass在创建组件时，有关组件props的属性类型及组件默认的属性会作为组件实例的属性来配置，其中\t\t\t\tdefaultProps是使用getDefaultProps的方法来获取默认组件属性的；React.Component在创建组件时配置这两个对应信息时，\t\t他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类的静态属性来配置的\n   3.组件初始状态state的配置不同\n   \t\tReact.createClass创建的组件，其状态state是通过getInitialState方法来配置组件相关的状态；\n\t\t React.Component创建的组件，其状态state是在constructor中像初始化组件属性一样声明的。\n   4.Mixins的支持不同\n   \t\tMixins(混入)是面向对象编程OOP的一种实现，其作用是为了复用共有的代码，将共有的代码通过抽取为一个对象，然后通过\t\t Mixins进该对象来达到代码复用。\n      React.createClass在创建组件时可以使用mixins属性，以数组的形式来混合类的集合。"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg = (src) => {\n            return new Promise((resolve, reject) => {\n                // write your code here\n                let img = document.createElement('img')\n                img.src = src\n                document.body.append(img)\n                setTimeout(() => {\n                    resolve(true)\n                }, 1000)\n            })\n        }\n const imgs = ['1.jpg', '2.jpg', '3.jpg'];\n        // 依次加载图片\n        async function fSync(imgs) {\n            // write your code here\n            for (let i of imgs) {\n                await loadImg(i)\n            }\n        }"},{"title":"防抖场景实现","questions_id":"pee5rm-didl4v-b5ty-eay7yo","json_path":"pee5rm-didl4v-b5ty-eay7yo.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"题目 有一个 input 查询框，每一次 change 都会触发一个“ a 函数”\n要求\n1.此 input 框的 change 请求 在间隔 0.3s 内的过滤掉\n2.提供一个包装函数，可以对上述的“ a 函数”请求过滤做统一的封装\n```\n<input id=\"input\" />\n```","student_answer":" function input(value) {\n            console.log(`输入的内容${value}`)\n        }\n        const ipt = document.getElementById('input')\n\n        function debounce(fun, delay) {\n            let timer;\n            return function (args) {\n                const that = this\n                clearTimeout(timer)\n                timer = setTimeout(function () {\n                    fun.call(that, args)\n                }, delay)\n            }\n        }\n        const debounceInput = debounce(input, 500)\n        ipt.addEventListener(\"keyup\", function (e) {\n            debounceInput(e.target.value)\n        })"}]