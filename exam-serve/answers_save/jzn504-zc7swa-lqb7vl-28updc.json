[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"window.onresize = function () {\n     if(document.documentElement.clientWidth>=600){\n         console.log('hello')\n    } \n }\n"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"函数式定义的无状态组件 ：创建纯展示组件，只负责根据传入的props来展示，不涉及到要state状态的操作，是一个只带有一个render方法的组件类\n                ：组件不会被实例化，整体渲染性能得到提升\n                 ：组件不能访问this对象\n                  ：组件无法访问生命周期的方法\n                   ：无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\nReact.createClass  ：会自绑定函数方法导致不必要的性能开销\n               此方法的mixins不够自然、直观\n\nextends React.Component  ：可以更好实现代码复用"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":" let loadImg = (src) => {\n    return new Promise((resolve, reject) => {\n        let img = document.createElement('img')\n        img.src = src\n        document.body.append(img)\n        setTimeout(() => {\n              resolve(true)\n          }, 1000)\n     })\n   }\n     const imgs = ['img1.jpg', 'img2.jpg', 'img3.jpg'];\n       \n     async function zxy(imgs) {\n         for (let i of imgs) {\n            await loadImg(i)\n         }\n   }\n    zxy(imgs);\n"},{"title":"防抖场景实现","questions_id":"pee5rm-didl4v-b5ty-eay7yo","json_path":"pee5rm-didl4v-b5ty-eay7yo.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"题目 有一个 input 查询框，每一次 change 都会触发一个“ a 函数”\n要求\n1.此 input 框的 change 请求 在间隔 0.3s 内的过滤掉\n2.提供一个包装函数，可以对上述的“ a 函数”请求过滤做统一的封装\n```\n<input id=\"input\" />\n```","student_answer":"<input type=\"text\" onchange=\"a(this);\" />\nfunction a(obj){\n  setTimeout(() => {\n       console.log(obj.value);\n  }, 300)\n\t\n}\n\nfunction input(value) {\n 2         console.log(\"输入的内容\")\n 3     }\n 4 const ipt = document.getElementById('input')\n 5 \n 6 function debounce(fun,delay){\n 7     let timer ;\n 8     return function(args){\n 9         const that = this\n10         clearTimeout(timer)\n11         timer = setTimeout(function(){\n12             fun.call(that,args)\n13         },delay)\n14     }\n15    }\n16 const debounceInput = debounce(input,300)\n17 ipt.addEventListener(\"change\",function(e){\n18     debounceInput(e.target.value)\n19 })"}]