[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"window.onresize = function(){\n if(document.documentElement.clientWidth==600){\n \tconsole.log('hello')\n }\n}"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"创建方式：\n1.函数式定义的无状态组件\n2.es5原生方式 React.createClass 定义的组件\n3.es6形式的extends React.Component 定义的组件\n区别：\n1.无状态组件：\n\t①只带有一个render方法的组件类，没有state状态\n   ②使代码的可读性更好，并且减少了大量冗余的代码，有便利性\n   ③组件不会被实例化，整体渲染性能得到提升\n   ④组件不能访问this对象\n   ⑤组件无法访问生命周期的方法\n   ⑥无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\n2.React.createClass 定义的组件\n\t①React.createClass会自绑定函数方法（不像React.Component只绑定需要关心的函数）导致不必要的性能开销，增加代码过时的可能性。\n   ②React.createClass的mixins不够自然、直观；React.Component形式非常适合高阶组件（Higher Order Components--HOC）,它以更直观的形式展示了比mixins更强大的功能，并且HOC是纯净的JavaScript，不用担心他们会被废弃。\n3.extends React.Component 定义的组件\n\t①函数this自绑定\n   ②组件属性类型propTypes及其默认props属性defaultProps配置不同\n   ③组件初始状态state的配置不同\n   ④Mixins的支持不同"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg = (src)=>{\n    return new Promise(function(resolve, reject) {\n    const image = new Image();\n    image.onload = function() {\n      resolve(image);\n    };\n    image.onerror = function() {\n      reject(new Error('Could not load image at ' + src));\n    };\n    image.src = src;\n}"},{"title":"防抖场景实现","questions_id":"pee5rm-didl4v-b5ty-eay7yo","json_path":"pee5rm-didl4v-b5ty-eay7yo.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"题目 有一个 input 查询框，每一次 change 都会触发一个“ a 函数”\n要求\n1.此 input 框的 change 请求 在间隔 0.3s 内的过滤掉\n2.提供一个包装函数，可以对上述的“ a 函数”请求过滤做统一的封装\n```\n<input id=\"input\" />\n```","student_answer":"var myShow = document.querySelector(\"div\");\nvar myBtn = document.querySelector(\"input\");\nmyBtn.onclick = function (ev) {\n  myShow.innerText = parseInt(myShow.innerText)+1;\n}\nvar myShow = document.querySelector(\"div\");\n    var myBtn = document.querySelector(\"input\");\n    /*\n    定义的节流函数\n    func指定的时间结束后所执行的函数，\n    wait指定的时间\n    返回值为函数\n    */\n    function throttle(func, wait) {\n        let previous = 0;\n        return function() {\n            let now = Date.now();\n            let context = this;\n            if (now - previous >= wait) {\n                func.apply(context, arguments);\n                // 函数执行后更新 previous 值\n                previous = now; \n            }\n        }\n    }\n    function addOne() {\n        myShow.innerText = parseInt(myShow.innerText)+1;\n    }\n    myBtn.onclick = throttle(addOne,1000);"}]