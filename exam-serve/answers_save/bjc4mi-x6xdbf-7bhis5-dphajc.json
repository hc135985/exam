[{"title":"匿名自执行函数的应用","questions_id":"vh80e-3d3g3o-6hy47e-ib2x4c","json_path":"vh80e-3d3g3o-6hy47e-ib2x4c.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"heinan","user_id":"fdjfr-msxp8a","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"代码如下：\n```js\nfor (var i = 0; i < 5; i++) {\n    setTimeout(function () {\n        console.log(i)\n    })\n}\n输出\n5\n5\n5\n5\n5\n```\n修改上面代码，打印结果要求为：0,1，2，3，4","student_answer":"for (var i=0; i<5; i++) {\n\t  (function(i){\n\t     setTimeout(() => console.log(i),1000*i)\n\t  })(i)\n}"},{"title":"react生命周期","questions_id":"xt05yo-prna5g-f7zqo-ltl5rh","json_path":"xt05yo-prna5g-f7zqo-ltl5rh.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"dingshaoshan","user_id":"ypay2t-7uxsd","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"# react常用生命周期图\n\n## 请在 “其他“ 中查看图片。 \n \n\n\n如图是react常用生命周期图，请阅读图，并在1，2，3，4处填写对应的生命周期","student_answer":"ShouldComponentUpdate\ncomponentDidMount\ncomponentDidUpdate"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"函数式定义的无状态组件:  function HelloComponent(props, /* context */) {return <div>Hello {props.name}\t\t\t\t                    </div>}ReactDOM.render(<HelloComponent name=\"Sebastian\" />, mountNode) \n\n\n函数组件的特点: 组件不会被实例化，整体渲染性能得到提升 组件不能访问this对象  组件无法访问生命周期的方法  无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\n\n\nes5原生方式React.createClass定义的组件: const Contacts = React.createClass({  \n                              handleClick() {console.log(this)},\n                              render() {return (<div onClick={this.handleClick}></div>);}\n                            });\n\n\nes5的特点: React.createClass会自绑定函数方法（不像React.Component只绑定需要关心的函数）导致不必要的性能开销，增加代码过时的可能性  React.createClass的mixins不够自然\n\n\nes6形式的extends React.Component定义的组件: class TodoItem extends React.Component{\n                                  constructor(props){\n                                      super(props);\n                                      this.state = { \n                                          isEditing: false\n                                      }}render(){return <div></div>}}\n                                                 \n React.createClass与React.Component区别：函数this自绑定   组件属性类型propTypes及其默认props属性defaultProps配置不同                            组件初始状态state的配置不同 Mixins的支持不同"},{"title":"分别使用DOM0级DOM2级给一个DIV绑定事件","questions_id":"1gsxn-k09c2j-gq8peo-sohe9","json_path":"1gsxn-k09c2j-gq8peo-sohe9.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"分别使用DOM0级DOM2级给一个button绑定事件，并且描述这两种方式的区别","student_answer":"<button id=\"btn\"></button>\n\nDOM0级:  btn.onclick = function(){ console.log('我是0级') }\nDOM2级:  btn.addEventListener('click',function(){ console.log('我是2级') })\n\n区别: 0级事件绑定多次时会覆盖只执行最后执行的代码   2级事件则会依次执行代码"},{"title":"最少两种方式实现点击每个li都弹出下标","questions_id":"puaqas-1modca-2y04jh-brcz59g","json_path":"puaqas-1modca-2y04jh-brcz59g.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"<ul id=”test”>\n    <li>这是第一条</li>\n    <li>这是第二条</li>\n    <li>这是第三条</li>\n</ul>","student_answer":"//事件委托\nvar ulObj = document.getElementById(\"myUl\"); \nulObj.onclick = function (event) { \n  var tg = event.target; \n  var liArray = ulObj.getElementsByTagName(\"li\"); \n   for (var i = 0; i < liArray.length; i++) { \n    if (liArray[i] === tg) { \n    \talert(i + 1); \n    } \n  } \n}\n// 闭包\nfor (var i = 0; i < liArray.length; i++) { \n    (function () { \n    \tvar n = i; \n    \tliArray[i].onclick = function () { \n    \talert(n + 1); \n    } \n  })(i) \n}"}]