[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"let flag = false;\nwindow.onresize = function () {\n  if((this.innerWidth > 600) && !flag){\n    flag = true;\n    console.log('hello world')\n    return\n  } \n}"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"> REACT 创建组件的方式有 三种\n\t1) 函数声明式创建\n    \n   2) 基于React.Componetn 创建\n  \n   3) 基于 ES5 的 React.createClass 创建\n   \t\tReact.createClass 会自绑定函数方法导致不必要的性能开销\n        \n   只要有可能，尽量使用无状态组件创建形式\n\t否则（如需要state、生命周期方法等），使用React.Component这种es6形式创建组件\n\n\n区别: \n  关于this\n    React.createClass创建的组件，其每一个成员函数的this都有React自动绑定，任何时候使用，直接使用this.method即可，函数中的this会被正确设置\n    React.Component创建的组件，其成员函数不会自动绑定this，需要手动绑定，否则this不能获取当前组件实例对象\n"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg = (url)=>{\n        return new Promise((resolve,reject)=>{\n            let img = new Image();\n                img.onload = ()=>{\n                    resolve(img);\n                }\n                img.src = url;\n        });\n    }\n    const imgs =['https://pic.qiantucdn.com/58pic/15/68/59/71X58PICNjx_1024.jpg!/fw/1024/watermark/url/L2ltYWdlcy93YXRlcm1hcmsveGlhb3R1LnBuZw==/align/center/crop/0x1024a0a0','http://pic15.nipic.com/20110628/1369025_192645024000_2.jpg'];\n\n    async function asyncfn(imgs) {\n        for(var i =0;i<imgs.length;i++){\n            await loadImg(imgs[i])\n        }\n        // await loadImg(img[1])\n    }\n    asyncfn(imgs);"},{"title":"防抖场景实现","questions_id":"pee5rm-didl4v-b5ty-eay7yo","json_path":"pee5rm-didl4v-b5ty-eay7yo.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"题目 有一个 input 查询框，每一次 change 都会触发一个“ a 函数”\n要求\n1.此 input 框的 change 请求 在间隔 0.3s 内的过滤掉\n2.提供一个包装函数，可以对上述的“ a 函数”请求过滤做统一的封装\n```\n<input id=\"input\" />\n```","student_answer":"function input(value) {\n        console.log(`输入的内容${value}`)     \n} const ipt = document.getElementById('input')\n function debounce(fun,delay){\n    let timer ;\n    return function(args){\n        const that = this        clearTimeout(timer)\n        timer = setTimeout(function(){\n            fun.call(that,args)\n        },delay)\n    }\n   }const debounceInput = debounce(input,500)\nipt.addEventListener(\"keyup\",function(e){\n    debounceInput(e.target.value)\n})"}]