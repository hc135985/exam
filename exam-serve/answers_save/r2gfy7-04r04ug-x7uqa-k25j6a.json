[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"boot:function(){\n                //加载页面时执行一次\n                changeMargin();\n                //监听浏览器宽度的改变\n                window.onresize = function(){\n                    changeMargin();\n                };\n                function changeMargin(){\n                    //获取元素距离屏幕左边的距离\n                    var divLeft = $('.news').offset().left;\n                    //获取网页可见区域宽度\n                    var docWidth = document.body.clientWidth;\n                    if(docWidth <= 600){\n                        //动态设置教师风采样式\n                        $('.photoInside').css({\n                            'margin-left':divLeft,\n                            'width':'150px'\n                        });\n                    }\n                }\n            }"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"函数式定义的无状态组件\n   它是为了创建纯展示组件，这种组件只负责根据传入的props来展示，不涉及到要state状态的操作。\n   无状态函数式组件形式上表现为一个只带有一个render方法的组件类，通过函数形式或者ES6 arrow function的形式在创\t建，并且该组件是无state状态的。\n   无状态组件的创建形式使代码的可读性更好，并且减少了大量冗余的代码，精简至只有一个render方法，大大的增强了编写\t一个组件的便利，除此之外无状态组件还有以下几个显著的特点：\n  1.组件不会被实例化，整体渲染性能得到提升\n  2.组件不能访问this对象\n  3.组件无法访问生命周期的方法\n  4.无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\nes5原生方式React.createClass定义的组件\n  `React.createClass`是react刚开始推荐的创建组件的方式，这是ES5的原生的JavaScript来实现的React组件\n  与无状态组件相比，React.createClass和后面要描述的React.Component都是创建有状态的组件，这些组件是要被实例化\t   的，并且可以访问组件的生命周期方法。但是随着React的发展，React.createClass形式自身的问题暴露出来：\n  React.createClass会自绑定函数方法\n  React.createClass的mixins不够自然、直观；\nes6形式的extends React.Component定义的组件\n  React.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。\n  React.Component在创建组件时配置这两个对应信息时，他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类的静态属性来配置的。"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"function loadImageAsync(url) {\n  return new Promise(function(resolve, reject) {\n    const image = new Image();\n    image.onload = function() {\n      resolve(image);\n    };\n    image.onerror = function() {\n      reject(new Error('Could not load image at ' + url));\n    };\n    image.src = url;\n  });\n}\n.0"},{"title":"防抖场景实现","questions_id":"pee5rm-didl4v-b5ty-eay7yo","json_path":"pee5rm-didl4v-b5ty-eay7yo.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"题目 有一个 input 查询框，每一次 change 都会触发一个“ a 函数”\n要求\n1.此 input 框的 change 请求 在间隔 0.3s 内的过滤掉\n2.提供一个包装函数，可以对上述的“ a 函数”请求过滤做统一的封装\n```\n<input id=\"input\" />\n```","student_answer":"<template>\n  <div class=\"search-box\">\n    <input class=\"box\"\n           :placeholder=\"placeholder\"\n           v-model=\"query\"\n    >\n  </div>\n</template>\n<script type=\"text/ecmascript-6\">\n  import { debounce } from 'common/js/util'\n \n  export default {\n    props: {\n      placeholder: {\n        type: String,\n        default: '搜索歌曲、歌手'\n      }\n    },\n    data() {\n      return {\n        query: ''\n      }\n    },\n    created() {\n      this.$watch('query', debounce((newQuery) => {\n        this.$emit('query', newQuery)\n      }, 200))\n    }\n  }\n</script>"}]