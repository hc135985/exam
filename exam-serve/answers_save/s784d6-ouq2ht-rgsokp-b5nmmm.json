[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"data(){\n    return {\n        clientHeight: '600px',\n    },\n  },\n  mounted() {\n      this.clientHeight.height = `${document.documentElement.clientHeight}px`;  \n      const that = this;\n      window.onresize = function temp() {\n          that.clientHeight = `${document.documentElement.clientHeight}px`;\n        \n      };\n  }"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"函数式定义的无状态组件\n    无状态组件的创建形式使代码的可读性更好，并且减少了大量冗余的代码，\n    精简至只有一个render方法，大大的增强了编写一个组件的便利\n    1.组件不会被实例化，整体渲染性能得到提升\n    2.组件不能访问this指向\n    3.组件无法访问生命周期的方法\n    4.无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\n\nes5原生方式React.createClass定义的组件\n    与无状态组件相比，React.createClass和React.Component都是创建有状态的组件，\n    这些组件是要被实例化的，并且可以访问组件的生命周期方法。\n    React.createClass会自绑定函数方法,不像React.Component只绑定需要关心的函数,\n    导致不必要的性能开销，增加代码过时的可能性\n    React.createClass的mixins不够自然、直观;\n    React.Component形式非常适合高阶组件,它以更直观的形式展示了比mixins更强大的功能，并且HOC是纯净的JavaScript，不用担心他们会被废弃.\n\n\nes6形式的extends React.Component定义的组件\n    React.Component是React目前极为推荐的创建有状态组件的方式，最终会取代React.createClass形式；\n    相对于 React.createClass可以更好实现代码复用。\n"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"  function loadImageAsync(url) {\n        return new Promise(function(resolve, reject) {\n          const image = new Image();\n          image.onload = function() {\n            resolve(image);\n          };\n          image.onerror = function() {\n            reject(new Error('Could not load image at ' + url));\n          };\n          image.src = url;\n        });\n      }"}]