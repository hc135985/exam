[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":" window.onresize = function(){ \n \tif（document.body.clientWidth >=600）{\n    \tconsole.log(\"hello\")\n    }\n }"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"React推出后，出于不同的原因先后出现三种定义react组件的方式，殊途同归；具体的三种方式：\n（1）函数式定义的无状态组件\n（2）es5原生方式React.createClass 定义的组件\n（3）es6形式的extends React.Component 定义的组件\n\n组件的区别：\n一、无状态组件的创建形式使代码的可读性更好，并且减少了大量冗余的代码，精简至只有一个render方法，大大的增强了编写一个组件的便利，除此之外无状态组件还有以下几个显著的特点：\n<1>组件不会被实例化，整体渲染性能得到提升\n因为组件被精简成一个render方法的函数来实现的，由于是无状态组件，所以无状态组件就不会在有组件实例化的过程，无实例化过程也就不需要分配多余的内存，从而性能得到一定的提升。\n<2>组件不能访问this对象\n无状态组件由于没有实例化过程，所以无法访问组件this中的对象，例如：this.ref、this.state等均不能访问。若想访问就不能使用这种形式来创建组件\n<3>组件无法访问生命周期的方法\n因为无状态组件是不需要组件生命周期管理和状态管理，所以底层实现这种形式的组件时是不会实现组件的生命周期方法。所以无状态组件是不能参与组件的各个生命周期管理的。\n<4>无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\n\n二、与无状态组件相比，React.createClass 和React.Component 都是创建有状态的组件，这些组件是要被实例化的，并且可以访问组件的生命周期方法。但是随着React的发展，React.createClass 形式自身的问题暴露出来：\n<1>React.createClass 会自绑定函数方法（不像React.Component 只绑定需要关心的函数）导致不必要的性能开销，增加代码过时的可能性。\n<2>React.createClass 的mixins不够自然、直观；React.Component 形式非常适合高阶组件（Higher Order Components--HOC）,它以更直观的形式展示了比mixins更强大的功能，并且HOC是纯净的JavaScript，不用担心他们会被废弃。\n\n三、React.Component 是以ES6的形式来创建react的组件的，是React目前极为推荐的创建有状态组件的方式，最终会取代React.createClass 形式；相对于 React.createClass 可以更好实现代码复用"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n      let image=new Image();\n\t\timage.onload=function(){\n\t\t\tresolve(image);\n\t\t};\n\t\timage.onerror=function(){\n\t\t\treject(new Error('Could not image at'+url));\n\t\t}\n\t\timage.src=url;\n    })\n}"},{"title":"防抖场景实现","questions_id":"pee5rm-didl4v-b5ty-eay7yo","json_path":"pee5rm-didl4v-b5ty-eay7yo.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"题目 有一个 input 查询框，每一次 change 都会触发一个“ a 函数”\n要求\n1.此 input 框的 change 请求 在间隔 0.3s 内的过滤掉\n2.提供一个包装函数，可以对上述的“ a 函数”请求过滤做统一的封装\n```\n<input id=\"input\" />\n```","student_answer":"\nfunction input(value) {\n            console.log(`输入的内容${value}`)\n        }\n        const ipt = document.getElementById('input')\n\n        function debounce(fun, delay) {\n            let timer;\n            return function (args) {\n                const that = this\n                clearTimeout(timer)\n                timer = setTimeout(function () {\n                    fun.call(that, args)\n                }, delay)\n            }\n        }\n        const debounceInput = debounce(input, 300)\n        ipt.addEventListener(\"change\", function (e) {\n            debounceInput(e.target.value)\n        })"}]