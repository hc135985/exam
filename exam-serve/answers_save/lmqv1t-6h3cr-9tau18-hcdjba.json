[{"title":"实现发布订阅模式","questions_id":"aihpv-1ru212-wun87-0hli3","json_path":"aihpv-1ru212-wun87-0hli3.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"现在有一个类 \n\n```\nclass Watch{\n  on(){\n   // 实现该方法逻辑\n  }\n  emit(){\n   // 实现该方法逻辑 \n  }\n}\n\n//调用示例如下：\nconst w1 = new Watch();\nw1.on('www',(options) => {\n  console.log(options)\n});\nw1.emit('www','success');\n\n// 最后的打印结果是  success\n\n```\n\n请实现要求的逻,可以对该类进行任意修改","student_answer":"const Event = {\n            clientList: {},\n            listen(key, fn) {\n                if (!this.clientList[key]) {\n                    this.clientList[key] = [];\n                }\n                this.clientList[key].push(fn);\n                return true;\n            },\n            trigger() {\n                const key = Array.prototype.shift.apply(arguments),\n                    fns = this.clientList[key];\n\n                if (!fns || fns.length === 0) {\n                    return false;\n                }\n                for (let fn of fns) {\n                    fn.apply(null, arguments);\n                }\n                return true;\n            },\n\n            remove(key, fn) {\n                let fns = this.clientList[key];\n                if (!fns || !fn) {\n                    return false;\n                }\n                for (let l = fns.length - 1; l >= 0; l--) {\n                    let _fn = fns[l];\n                    if (_fn === fn) {\n                        fns.splice(l, 1);\n                    }\n                }\n                return true;\n            }\n        };\n        // 为对象动态安装 发布-订阅 功能\n        const installEvent = obj => {\n            for (let key in Event) {\n                obj[key] = Event[key];\n            }\n        };\n        let salesOffices = {};\n        installEvent(salesOffices);\n        salesOffices.listen(\n            \"event01\",\n            (fn1 = price => {\n                console.log(\"Price is\", price, \"at event01\");\n            })\n        );\n        salesOffices.listen(\n            \"event02\",\n            (fn2 = price => {\n                console.log(\"Price is\", price, \"at event02\");\n            })\n        );\n        salesOffices.trigger(\"event01\", 1000);\n        salesOffices.trigger(\"event02\", 2000);\n\n        salesOffices.remove(\"event01\", fn1);\n        console.log(salesOffices.trigger(\"event01\", 1000));"},{"title":"实现多维数组转换为一维数组","questions_id":"60gn1-9nj3mi-hv4xz-t6ecp","json_path":"60gn1-9nj3mi-hv4xz-t6ecp.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"封装一个函数可以使得n维数组转换为1维数组，输出","student_answer":"var a = [1, 3, 4, 5, [6, 7, [8], 9],\n            [2],\n            [5]\n        ];\n\nconsole.log(a.join(\",\").split(\",\"));"},{"title":"完成 convert(list) 函数，实现将 list 转为 tree","questions_id":"lahic9-5l9ax7-2c5a09-ukz1o","json_path":"lahic9-5l9ax7-2c5a09-ukz1o.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"\n```\n\n/**\n * @param list {object[]}, \n * @param parentKey {string}\n * @param currentKey {string}\n * @param rootValue {any}\n * @return object\n */\nfunction convert(list, parentKey, currentKey, rootValue) {\n  let tree = {}\n    \n  return tree\n}\n\n接收\nconst list = [\n  {\n    \"id\": 19,\n    \"parentId\": 0,\n  },\n  {\n    \"id\": 18,\n    \"parentId\": 16,\n  },\n  {\n    \"id\": 17,\n    \"parentId\": 16,\n  },\n  {\n    \"id\": 16,\n    \"parentId\": 0,\n  }\n];\n\n返回\nconst result = convert(list, 'parentId', 'id', 0);\nconst tree = {\n  \"id\": 0,\n  \"children\": [\n    {\n      \"id\": 19,\n      \"parentId\": 0\n    },\n    {\n      \"id\": 16,\n      \"parentId\": 0,\n      \"children\": [\n        {\n          \"id\": 18,\n          \"parentId\": 16\n        },\n        {\n          \"id\": 17,\n          \"parentId\": 16\n        }\n      ]\n    }\n  ]\n}\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n","student_answer":"const list = [{\n            \"id\": 19,\n            \"parentId\": 0,\n        }, {\n            \"id\": 18,\n            \"parentId\": 16,\n        }, {\n            \"id\": 17,\n            \"parentId\": 16,\n        }, {\n            \"id\": 16,\n            \"parentId\": 0,\n        }];\n\n        function convert(list, parentKey, currentKey, rootValue) {\n            let temp = {};\n            let tree = {};\n            for (let i in list) {\n                temp[list[i].id] = list[i];\n            }\n            for (let i in temp) {\n                if (temp[i].parent_id) {\n                    if (!temp[temp[i].parent_id].children) {\n                        temp[temp[i].parent_id].children = new Object();\n                    }\n                    temp[temp[i].parent_id].children[temp[i].id] = temp[i];\n                } else {\n                    tree[temp[i].id] = temp[i];\n                }\n            }\n            return tree;\n        }"},{"title":"实现一个评星方法","questions_id":"tak6bp-2bpj3-xh6jpg-elkb8u","json_path":"tak6bp-2bpj3-xh6jpg-elkb8u.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"实现一个评星方法\n说明\n* 可根据传入的评分和总数，返回评星结果（用 ★ 和 ☆ 描述）\n* 评分必选项，四舍五入，总数可选，大于0的整数，默认为5\n* 对于评分为空或小于0、评分大于总数、总数小于0或总数非整数的情况，返回'errror'\n示例\n```\ngetRate(4); // ★★★★☆\ngetRate(4, 8); // ★★★★☆☆☆☆\ngetRate(3.4); //  ★★★☆☆\ngetRate(5, 2); // 'error'\ngetRate(-2); // 'error'\ngetRate(3, 5.5); // 'error'\n```\n\n\n\n\n\n\n\n\n\n\n\n","student_answer":"<table id=\"czy\">\n        <tr>\n            <td>★</td>\n            <td>★</td>\n            <td>★</td>\n            <td>★</td>\n            <td>★</td>\n        </tr>\n    </table>\n\n    <script>\n        tds = document.getElementsByTagName(\"td\");\n        for (var i = 0; i < tds.length; i++) {\n            tds[i].onmouseover = test;\n        }\n        var index;\n\n        function test() {\n\n            for (var i = 0; i < tds.length; i++) {\n                if (tds[i] == this) {\n                    index = i;\n                }\n            }\n            for (var i = 0; i <= index; i++) {\n                tds[i].style.color = \"red\";\n            }\n            for (var i = index + 1; i < tds.length; i++) {\n                tds[i].style.color = \"black\";\n            }\n        }\n    </script>"}]