[{"title":"commonjs规范","questions_id":"ayf32j-5kv76-qvfqh-cigaoo","json_path":"ayf32j-5kv76-qvfqh-cigaoo.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"请简述node环境下的commonjs规范（说出如何导出模块，如何引入模块，如何创建模块）？","student_answer":"导出模块 module.exports 后面可以是对象、函数、直接导出模块\n引入模块 require('js脚本文件')\n创建模块 创建js文件,导出该模块"},{"title":"let和var的区别","questions_id":"h7f6hq-cezl0g-fyu3o-6onwjf","json_path":"h7f6hq-cezl0g-fyu3o-6onwjf.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"在声明变量的时候，使用`let`和`var`有什么区别呢？","student_answer":"let 用来声明局部变量,但只在let命令所在的代码块内有效，而且有暂时性死区的约束。\nlet 可以声明块级作用域的变量,没有变量提升\n而 var 既可以是局部变量也可以是全局变量,并且有变量提升\nlet 声明的变量只在自己的块级作用域下有效,而 var 在全局下都有效"},{"title":"解构赋值和数组的map方法","questions_id":"izvfy-572mw-thxrmm-7aba5s","json_path":"izvfy-572mw-thxrmm-7aba5s.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"如下：是一段html结构\n```   \n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n```\n加载一段对应的javaScript代码\n\n```\n        let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })\n```\n\n请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义","student_answer":" let oUl = document.getElementsByTagName('ul')[0];\n        // 获取body下第一个 ul元素\n        let li = document.getElementsByTagName('li');\n        //获取所有的 li 元素\n        const  {\n            map,\n            forEach\n        } = [];\n    // 定义一个常量对象 赋值为空数组 我们可以从空数组的__proto__里找到对象下的这两种\t\t\t方法,相当于es6的解构赋值\n        li = map.call(li, item => {\n            //通过map遍历 call改变 遍历的对象\n            let key = 2 * item.getAttribute('key') - 1;\n            //声明一个新的属性 key  通过 2 * 遍历的每一项 - 1 得到和原来key值相等的值\n            item.setAttribute('key', key);\n            //重新给每一个key设置自定义属性 key 的值\n            return item;\n            //将item返回出去\n        });\n\n        oUl.innerHTML = '';\n        //先将ul元素下的所有子节点（内容）清空\n        forEach.call(li, item => {\n                //通过call 指向 li 使用forEach遍历\n                oUl.appendChild(item);\n                //将遍历的每一项通过 appendChild 原声js方法追加到ul里面\n            })"},{"title":"解决以下异步代码问题","questions_id":"pwrym-ypsrgi-3smad-bm9d1m","json_path":"pwrym-ypsrgi-3smad-bm9d1m.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"检索并计算属于同一教室中每个学生的平均分数，例子中教室 ID 为 75。每个学生可以在一年内参加一门或多门课程。以下 API 可用于检索所需数据。\n```\n// GET LIST OF ALL STUDENTS\nGET /api/students\nResponse:\n[{\n    \"id\": 1,\n    \"name\": \"John\",\n    \"classroomId\": 75\n}]\n// GET COURSES FOR GIVEN A STUDENT\nGET /api/courses?filter=studentId eq 1\nResponse:\n[{\n    \"id\": \"history\",\n    \"studentId\": 1\n}, {\n    \"id\": \"algebra\",\n    \"studentId\": 1\n}]\n// GET EVALUATION FOR EACH COURSE\nGET /api/evaluation/history?filter=studentId eq 1\nResponse:\n{\n    \"id\": 200,\n    \"score\": 50,\n    \"totalScore\": 100\n}\n```\n编写一个接受教室 ID 的函数，并根据该函数计算该教室中每个学生的平均值。 该函数的最终输出应该是带有平均分数的学生列表：\n```\n[\n  { \"id\": 1, \"name\": \"John\", \"average\": 70.5 },\n  { \"id\": 3, \"name\": \"Lois\", \"average\": 67 },\n}\n```\n使用普通回调，promises，observables，generator 或 async-wait 编写所需的函数。 尝试使用至少 2 种不同的技术解决这个问题。\n代码素材用于代替接口\n```\nconst APIS = {\n  STUDENTS: '/api/students',\n  COURSES: '/api/courses',\n  EVALUATION: '/api/evaluation/'\n}; \nfunction fetchData(api) {\n  return new Promise(resolve => {\n    let data = null;\n    switch (api) {\n      case APIS.STUDENTS:\n        data = [{\n          id: 1,\n          name: 'John',\n          classroomId: 75\n        }, {\n          id: 1,\n          name: 'Tom',\n          classroomId: 75\n        }];\n        break;\n      case APIS.COURSES:\n        data = [{\n          id: 'history',\n          studentId: 1\n        }, {\n          id: 'algebra',\n          studentId: 1\n        }];\n        break;\n      case APIS.EVALUATION:\n        data = {\n          id: '200',\n          score: 50,\n          totalScore: 100\n        };\n        break;\n    } \n    resolve(data);\n  });\n} \n```","student_answer":"   //generator\n        const APIS = [{\n            STUDENTS: '/api/students'\n        }, {\n            COURSES: '/api/courses'\n        }, {\n            EVALUATION: '/api/evaluation/'\n        }];\n        console.log(APIS)\n        let it = makeIterator(APIS);\n        it.next();\n        it.next();\n        it.next();\n        it.next();\n\n        function makeIterator(array) {\n            let nextIndex = 0;\n            return {\n                next: () => {\n                    return nextIndex < array.length ? {\n                        value: array[nextIndex++],\n                        done: false\n                    } : {\n                        value: undefined,\n                        done: true\n                    };\n                }\n            }\n        }\n//2\nconst APIS = {\n            STUDENTS: '/api/students',\n            COURSES: '/api/courses',\n            EVALUATION: '/api/evaluation/'\n        };\n        let iterable = {\n            0: APIS.STUDENTS,\n            1: APIS.COURSES,\n            2: APIS.EVALUATION,\n            length: 3,\n            [Symbol.iterator]: Array.prototype[Symbol.iterator]\n        };\n        for (let item of iterable) {\n            console.log(item); \n        }\n        let generator = function*() {\n            yield 1;\n            yield*[2];\n            yield 3;\n        };\n        var iterator = generator();\n        iterator.next() \n        iterator.next() \n        iterator.next() \n        iterator.next() \n        console.log(iterator)\n//3\nconst APIS = {\n            STUDENTS: '/api/students',\n            COURSES: '/api/courses',\n            EVALUATION: '/api/evaluation/'\n        };\n\n\n        function fetchData(api) {\n            console.log(api)\n            return new Promise(resolve => {\n                let data = null;\n                switch (api) {\n                    case APIS.STUDENTS:\n                        data = [{\n                            id: 1,\n                            name: 'John',\n                            classroomId: 75\n                        }, {\n                            id: 1,\n                            name: 'Tom',\n                            classroomId: 75\n                        }];\n                        break;\n                    case APIS.COURSES:\n                        data = [{\n                            id: 'history',\n                            studentId: 1\n                        }, {\n                            id: 'algebra',\n                            studentId: 1\n                        }];\n                        break;\n                    case APIS.EVALUATION:\n                        data = {\n                            id: '200',\n                            score: 50,\n                            totalScore: 100\n                        };\n                        break;\n                }\n                console.log(resolve(data));\n            });\n        }\n        fetchData(APIS)\n"}]