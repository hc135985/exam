[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"window.onresize=()=>{\n  if(document.documentElement.clientWidth;>=600){\n  \tconsole.log('hello')\n  }else{\n  \treturn\n  }\n}"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"1.函数式组件\n  function HelloComponent(props){\n     return <div>Hello {props.name}</div>\n  }\n  ReacrDom.render(<HelloComponent name=\"Sebstian\"/>,mountNode)\n特点：创建纯展示组件，只负责根据传入的props来展示，不涉及state的操作。无状态函数式组件形式上表现为一个直带有一个render方法的组件类。 \n2.ES5方式创建组件class 组件\n  \tvar InputControlES5 = React.createClass({\n    propTypes: {//定义传入props中的属性各种类型\n        initialValue: React.PropTypes.string\n    },\n    defaultProps: { //组件默认的props对象\n        initialValue: ''\n    },\n    render: function() {\n        return (\n            <div>\n              \n            </div>\n        );\n    }\n});\n特点：与无状态组件相比，React.createClass和React.Component都是创建有状态的组件，这些组件是要被实例化的，并且可以访问组件的生命周期方法\n3.类组件\nclass InputControlES6 extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: props.initialValue || 'placeholder'\n        };\n    render() {\n        return (\n            <div></div>\n        );\n    }\n}\n特点：react.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象，有生命周期和内置的状态"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"function loadImage(url){\n\treturn new Promise((resolve,reject)=>{\n\t\tlet image=new Image();\n\t\timage.onload=function(){\n\t\t\tresolve(image);\n\t\t};\n\t\timage.onerror=function(){\n\t\t\treject(new Error('Could not image at'+url));\n\t\t}\n\t\timage.src=url;\n\t})\n}"},{"title":"防抖场景实现","questions_id":"pee5rm-didl4v-b5ty-eay7yo","json_path":"pee5rm-didl4v-b5ty-eay7yo.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"题目 有一个 input 查询框，每一次 change 都会触发一个“ a 函数”\n要求\n1.此 input 框的 change 请求 在间隔 0.3s 内的过滤掉\n2.提供一个包装函数，可以对上述的“ a 函数”请求过滤做统一的封装\n```\n<input id=\"input\" />\n```","student_answer":"<input type=\"text\" id=\"input\" />\n<script>\n\n    var input = document.getElementById('input');\n\n    function debounce(handler, delay) {\n        var timer = null;\n        return function () {\n            var _salf = this,\n                _arg = arguments;\n            clearTimeout(timer);\n            timer = setInterval(function () {\n                handler.apply(_salf, _arg);\n            }, delay);\n        }\n    }\n\n    function ajax() {\n        console.log(this.value);\n    }\n    input.oninput = debounce(ajax, 1000);\n</script>\n"}]