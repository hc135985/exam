[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"var flag=true;\n            window.onload=function(){\n                 changeDivHeight(); \n            }\n            window.onresize=function(){\n                var height=document.documentElement.clientWidth;\n                if(flag && height>=600){ \n                    changeDivHeight();  \n                    flag=false;\n                } \n\t\t\t}\n            function changeDivHeight(){ \n                    console.log(\"hello\");\n            }"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"React 创建组建的3个方法\n1.函数式定义的无状态组件\n\t创建纯展示组件，这种组件只负责根据传入的props来展示，不涉及到要state状态的操作\n\t例如：import React from 'react';\n\t\t\tconst MyFunc=props=>(  \n              直接通过props得到传过来的数据进行操作\n         )\n2.es5原生方式React.createClass定义的组件\n\tReact.createClass 是react刚开始推荐的创建组件的方式，这是ES5的原生的JavaScript来实现的React组件\n\t例如：var InputControlES5 = React.createClass({\n    propTypes: {//定义传入props中的属性各种类型\n        initialValue: React.PropTypes.string\n    },\n    defaultProps: { //组件默认的props对象\n        initialValue: ''\n    },\n    // 设置 initial state\n    getInitialState: function() {//组件相关的状态对象\n        return {\n            text: this.props.initialValue || 'placeholder'\n        };\n    },\n    handleChange: function(event) {\n        this.setState({ //this represents react component instance\n            text: event.target.value\n        });\n    },\n    render: function() {\n        return (\n            <div>\n                Type something:\n                <input onChange={this.handleChange} value={this.state.text} />\n            </div>\n        );\n    }\n});\nInputControlES6.propTypes = {\n    initialValue: React.PropTypes.string\n};\nInputControlES6.defaultProps = {\n    initialValue: ''\n};\n3.es6形式的extends React.Component定义的组件\n  \t\tReact.Component是以ES6的形式来创建react的组件的，是React目前极为推荐的创建有状态组件的方式，最终会取代React.createClass形式；相对于 React.createClass可以更好实现代码复用\n\t例如：\n    import React, { Component } from 'react'; \n\t\tclass 组件名（首字大写） extends Component {\n    render() {\n        return (\n            <> \n            {通过this.props得到数据进行操作}\n            </>\n        );\n    }\n}\nexport default 组件名（首字大写）;\n\nReact.createClass与React.Component区别\n\n1.函数this自绑定\n\tReact.createClass创建的组件，其每一个成员函数的this都有React自动绑定，任何时候使用，直接使用this.method即可，函数中的this会被正确设置。\n\tReact.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。React.Component有三种手动绑定方法：可以在构造函数中完成绑定，也可以在调用时使用method.bind(this)来完成绑定，还可以使用arrow function来绑定。\n2.组件属性类型propTypes及其默认props属性defaultProps配置不同\n\tReact.createClass在创建组件时，有关组件props的属性类型及组件默认的属性会作为组件实例的属性来配置，其中defaultProps是使用getDefaultProps的方法来获取默认组件属性的\n\tReact.Component在创建组件时配置这两个对应信息时，他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类的静态属性来配置的\n3.组件初始状态state的配置不同\n\tReact.createClass创建的组件，其状态state是通过getInitialState方法来配置组件相关的状态；\n\tReact.Component创建的组件，其状态state是在constructor中像初始化组件属性一样声明的。\n4.Mixins的支持不同\n\tMixins(混入)是面向对象编程OOP的一种实现，其作用是为了复用共有的代码，将共有的代码通过抽取为一个对象，然后通过Mixins进该对象来达到代码复用 \n\tReact.createClass在创建组件时可以使用mixins属性，以数组的形式来混合类的集合。\n\tReact.Component这种形式并不支持Mixins，至今React团队还没有给出一个该形式下的官方解决方案；但是React开发者社区提供一个全新的方式来取代Mixins,那就是Higher-Order Components\nvue常用创建组件2种方式\n\t1. 全局注册组件：全局都可以调用\n   2.局部注册组件：只能在当前组件内使用\n   3.使用x-template引入模板\n\t4. render函数注册组件（ 类似于虚拟DOM的实现 ）\n   5. jsx注册组件"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg=(src)=>{\n        return new Promise((resolve,reject)=>{\n            let image=new Image();\n            image.onload=function(){\n                resolve(image);\n            };\n            image.onerror=function(){\n                reject(new Error('Could not image at'+src));\n            }\n            image.src=src;\n        })\n    }        loadImg(\"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2151493683,1267395633&fm=27&gp=0.jpg\").then((img)=>{\n        document.body.append(img) \n    })"}]