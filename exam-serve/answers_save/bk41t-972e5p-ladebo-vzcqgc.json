[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"\nwindow.onresize = function(){\n\tif(document.documentElement.clientWidth>600){\n    \tconsole.log(\"hello\")\n    }\n}"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"无状态函数式组件\n\n组件不会被实例化，整体渲染性能得到提升\n组件不能访问this对象\n组件无法访问生命周期的方法\n无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\n\nReact.createClass\nReact.createClass会自绑定函数方法导致不必要的性能开销，增加代码过时的可能性。\nReact.createClass的mixins不够自然、直观；React.Component形式非常适合高阶组件（,它以更直观的形式展示了比mixins更强大的功能，并且HOC是纯净的JavaScript，不用担心他们会被废弃。HOC可以参考无状态组件与高阶组件。\n\nReact.Component\neact.Component是以ES6的形式来创建react的组件的，是React目前极为推荐的创建有状态组件的方式，最终会取代React.createClass形式；相对于 React.createClass可以更好实现代码复用。\n成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。\n状态state是在constructor中像初始化。\nprops属性类型和组件默认属性作为组件类的属性，不是组件实例的属性，所以使用类的静态属性配置"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"function loadImageAsync(url) {\n  return new Promise(function(resolve, reject) {\n    const image = new Image();\n    image.onload = function() {\n      resolve(image);\n    };\n    image.onerror = function() {\n      reject(new Error('Could not load image at ' + url));\n    };\n    image.src = url;\n  });\n}"}]