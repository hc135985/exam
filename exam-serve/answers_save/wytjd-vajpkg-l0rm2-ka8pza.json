[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"function widthChange(){\nvar flag=true;\n\twindow.onresize=()=>{\n\t\tif( innerWidth >= 600 ){\n\t\t\tflag&&console.log('hello');\n        flag=false;\n\t\t}else{\n\t\t\tflag=true;\n      }\n\t}\n}"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"函数组件和类组件\n函数组件是纯展示组件，\n没有自己的状态和生命周期，\n同样的props输入会有同样的输出，\n代码精简，只有一个render方法，\n组件不会被实例化，渲染速度有所提升，\n组件内无法访问this。\n类组件，\n有自己的状态和生命周期，\n组件内可以访问自己的this。\n一般开发来说，尽量使用函数组件，只有当用到状态或生命周期时才使用类组件\n"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n    \tvar img= new Image();\n    \timg.src=src;\n      img.onload=()=>{\n\t\t\tresolve(img);\n      }\n      img.onerror=()=>{\n      \t\treject('src is error!')\n      }\n    })\n}"},{"title":"防抖场景实现","questions_id":"pee5rm-didl4v-b5ty-eay7yo","json_path":"pee5rm-didl4v-b5ty-eay7yo.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"题目 有一个 input 查询框，每一次 change 都会触发一个“ a 函数”\n要求\n1.此 input 框的 change 请求 在间隔 0.3s 内的过滤掉\n2.提供一个包装函数，可以对上述的“ a 函数”请求过滤做统一的封装\n```\n<input id=\"input\" />\n```","student_answer":"function antiShakeCallFn (\n\tdom,\n \tFn = ()=>console.log('inputChangeCallFn'), \n     timeInterval=300,\n     {type='change'}={}\n  \t){\n    var oldTime=0;\n    dom.addEventListener(type,()=>{\n       var newTime=+ new Date();\n      if(newTime-oldTime >timeInterval){\n         Fn();\n        oldTime=newTime;\n     \t}\n    })\n}\nantiShakeCallFn(input,()=>{console.log(`I'm func a.`)},300,{type:'change'})\n"}]