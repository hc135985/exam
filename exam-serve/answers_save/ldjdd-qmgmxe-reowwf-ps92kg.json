[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"\nboot:function(){\n                //加载页面时执行一次\n                changeMargin();\n                //监听浏览器宽度的改变\n                window.onresize = function(){\n                    changeMargin();\n                };\n                function changeMargin(){\n                    //获取网页可见区域宽度\n                    var docWidth = document.body.clientWidth;\n                    if(docWidth >=600){\n                       console.log(\"hello\");\n                    }\n                }\n            }\n"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"----- React组件三种方式：\n1.函数式定义无组件状态\n2.es5原方式React.createClass定义的组件\n3.es6形式的extends React.Component定义的组件\n-------\t区别：\n 1.函数this自绑\n \t*  React.createClass创建的组件，其每一个成员函数的this都有React自动绑定，任何时候使用，直接使用this.method即可，函数中的this会被正确设置。\n\t* React.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件的实例对象\n2.组件属性类型propsTYpes及默认属性defaultProps配置不同\n   * React.createClass在创建组件没有关系props的数字那个类型及组件默认属性React.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件的实例对象\n  \t*React.Component在创建组件时配置这两个对应信息时，他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类的静态属性来配置的\n3. 组件初始状态state的配置不同\n\t* React.createClass创建的组件，其状态state是通过getInitiState解决的\n\t* React.Conponent创建的组件，其状态state是通过constructor中初始化\n"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":" let loadImg = (src) => {\n            return new Promise((resolve, reject) => {\n                let img = document.createElement('img')\n                img.src = src\n                document.body.append(img)\n                setTimeout(() => {\n                    resolve(true)\n                }, 1000)\n            })\n        }\n        const imgs = ['banner1.jpg', 'banner2.jpg', 'banner3.jpg', 'banner4.jpg'];\n        // 依次加载图片\n        async function fAync(imgs) {\n            for (let i of imgs) {\n                await loadImg(i)\n            }\n        }\n        fAync(imgs);\n"},{"title":"防抖场景实现","questions_id":"pee5rm-didl4v-b5ty-eay7yo","json_path":"pee5rm-didl4v-b5ty-eay7yo.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"题目 有一个 input 查询框，每一次 change 都会触发一个“ a 函数”\n要求\n1.此 input 框的 change 请求 在间隔 0.3s 内的过滤掉\n2.提供一个包装函数，可以对上述的“ a 函数”请求过滤做统一的封装\n```\n<input id=\"input\" />\n```","student_answer":"function input(value) {\n 2         console.log(`输入的内容${value}`)\n 3     }\n 4 const ipt = document.getElementById('input')\n 5 \n 6 function debounce(fun,delay){\n 7     let timer ;\n 8     return function(args){\n 9         const that = this\n10         clearTimeout(timer)\n11         timer = setTimeout(function(){\n12             fun.call(that,args)\n13         },delay)\n14     }\n15    }\n16 const debounceInput = debounce(input,500)\n17 ipt.addEventListener(\"keyup\",function(e){\n18     debounceInput(e.target.value)\n19 })\n"}]