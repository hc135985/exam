[{"title":"实现发布订阅模式","questions_id":"aihpv-1ru212-wun87-0hli3","json_path":"aihpv-1ru212-wun87-0hli3.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"现在有一个类 \n\n```\nclass Watch{\n  on(){\n   // 实现该方法逻辑\n  }\n  emit(){\n   // 实现该方法逻辑 \n  }\n}\n\n//调用示例如下：\nconst w1 = new Watch();\nw1.on('www',(options) => {\n  console.log(options)\n});\nw1.emit('www','success');\n\n// 最后的打印结果是  success\n\n```\n\n请实现要求的逻,可以对该类进行任意修改","student_answer":"class Watch {\n  constructor() {\n    this.content = {\n      \n      \n    };\n  }\n  //存\n  on(type, fun) {\n    \n    \n    if (isArray(this.content[type])) {\n      \n      \n      this.content[type].push(fun);\n      \n      \n    } else {\n      \n      \n      this.content[type] = [fun];\n      \n      \n    } \n  }\n  //执行\n  \n  \n  \n  emit(type, val) {\n    \n    \n    this.content[type].forEach(item => {\n      \n      console.log(item)\n      \n      \n      \n      item(val);\n      \n      \n      \n    });\n  }\n}\n"},{"title":"async配合transition实现自定义动画","questions_id":"bqq54a-jly2z9-m9fg7pj-oio193","json_path":"bqq54a-jly2z9-m9fg7pj-oio193.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"html结构\n```html\n<div id=\"box\"></div>\n```\ncss样式\n```css\n#box{\n  width:100px; height:100px; background-color:red; border-radius:50%; transition:transform 0.5s;\n}\n```\njavaScript代码\n```js\n        const oBox = document.getElementById('box');\n        oBox.addEventListener('transitionend',()=>{\n            let {x,y} = oBox;\n            moveTo.reslove({x,y});\n        },false);\n        function moveTo(x,y){\n            return new Promise((reslove,reject)=>{\n                moveTo.reslove = reslove;\n                oBox.x = x;\n                oBox.y = y;\n                oBox.style.transform = `translate(${x}px,${y}px)`;\n            })\n        }\n```\n\n补全以上代码，使点击oBox后，使oBox走出一个  W 的轨迹（使用async函数实现），并简单写出整体的代码思路。","student_answer":"\n           <script>\n               \n             const oBox = document.getElementById('box');\n\n\n\n\n        const wP = [\n          {x: 0,y: 0}, \n          \n          {x: 120,y: 240}, \n          \n          {x: 200,y: 0}, \n          \n          {x: 280,y: 240},\n          \n          {x: 360,y: 0}\n        ]\n        \n       \n  \n        \n       \n        oBox.addEventListener('transitionend',()=>{\n          \n          let {x,y} = oBox;\n\n          \n          moveTo.reslove({x,y});\n          \n\n        },false);\n\n  function moveTo(x,y){\n    \n\n    return new Promise((reslove,reject)=>{\n\n      moveTo.reslove = reslove;\n      \n      oBox.x = x;\n      \n      oBox.y = y;\n      \n      oBox.style.transform = `translate(${x}px,${y}px)`;\n\n\n    })\n  }\n\n\n\noBox.onclick = async() => {\n\n  for (let item of wP) {\n\n    await moveTo(item.x, item.y)\n\n  }\n\n\n\n}\n           \n</script>\n"},{"title":"输入的reduce方法","questions_id":"zyocwi-drka9-kx8vv-blrmw9p","json_path":"zyocwi-drka9-kx8vv-blrmw9p.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"现在有一个数组如下：\n```js\n    const car = [\n            {\n                groupName:'水果',\n                type:[\n                    {\n                        name:'苹果',\n                        price:10\n                    },\n                    {\n                        name:'橘子',\n                        price:40\n                    },\n                    {\n                        name:'香蕉',\n                        price:90\n                    }\n                ]\n            },\n            {\n                groupName:'蔬菜',\n                type:[\n                    {\n                        name:'芹菜',\n                        price:10\n                    },\n                    {\n                        name:'菠菜',\n                        price:15\n                    },\n                    {\n                        name:'土豆',\n                        price:8\n                    }\n                ]\n            }\n        ]\n```\n\n根据上述数据，编写一个函数，该函数(computedPrice)接收上述的数据作为参数，返回一个对象，请输入用数组的reduce方法实现。对象的格式如下\n\n```js\n       {\n            allPrice:所有商品的总价格,\n            group:[\n                {\n                    typeName:'水果',\n                    price:所有水果的总价格\n                },\n                {\n                    typeName:'蔬菜',\n                    price:所有蔬菜的总价格\n                }\n            ]\n        } \n```  ","student_answer":"function computedPrice(cars = car) {\n  \n  \n  \n  let result = {\n    \n    \n    allPrice: 0,\n    \n    group: []\n    \n  };\n  \n\n  cars.forEach((item) => {\n\n    let allGroupPrice = \n\n        item.type.reduce((sum, typePrice) => {\n          \n          return sum + typePrice.price\n          \n\n        }, 0)\n\n    let allTypeName = {\n      \n      typeName: item.groupName,\n      \n      price: allGroupPrice\n      \n    }\n    \n    result.group.push(allTypeName)\n    \n    \n    result.allPrice+=allGroupPrice\n    \n    \n  })\n  \n  \n  console.log(result)\n  \n  \n}\n       \n\n\n\ncomputedPrice()"},{"title":"完成 convert(list) 函数，实现将 list 转为 tree","questions_id":"lahic9-5l9ax7-2c5a09-ukz1o","json_path":"lahic9-5l9ax7-2c5a09-ukz1o.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"\n```\n\n/**\n * @param list {object[]}, \n * @param parentKey {string}\n * @param currentKey {string}\n * @param rootValue {any}\n * @return object\n */\nfunction convert(list, parentKey, currentKey, rootValue) {\n  let tree = {}\n    \n  return tree\n}\n\n接收\nconst list = [\n  {\n    \"id\": 19,\n    \"parentId\": 0,\n  },\n  {\n    \"id\": 18,\n    \"parentId\": 16,\n  },\n  {\n    \"id\": 17,\n    \"parentId\": 16,\n  },\n  {\n    \"id\": 16,\n    \"parentId\": 0,\n  }\n];\n\n返回\nconst result = convert(list, 'parentId', 'id', 0);\nconst tree = {\n  \"id\": 0,\n  \"children\": [\n    {\n      \"id\": 19,\n      \"parentId\": 0\n    },\n    {\n      \"id\": 16,\n      \"parentId\": 0,\n      \"children\": [\n        {\n          \"id\": 18,\n          \"parentId\": 16\n        },\n        {\n          \"id\": 17,\n          \"parentId\": 16\n        }\n      ]\n    }\n  ]\n}\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n","student_answer":"function listToTree(id,pId,list){\n    \n    getTrees(list);\n    function exists(list, pId){\n        for(var i=0; i<list.length; i++){\n            if (list[i][id] == pId){\n                return true;\n            }\n        }\n        return false;\n    }\n    var nodes = [];\n    for(var i=0; i<list.length; i++){\n         var row = list[i];\n         if (!exists(list, row[pId])){//now.pid != new.id\n              nodes.push(row);//new ids\n         }\n    }\n    var pNodes = [];\n    for(var i=0; i<nodes.length; i++){\n        pNodes.push(nodes[i]);\n    }\n    while(pNodes.length){\n        var node = pNodes.shift();\n        for(var i=0; i<list.length; i++){\n            var row = list[i];\n            if (row[pId] == node[id]){\n               \n                if (node.items){\n                       node.items.push(row);\n                  } else {\n                       node.items = [row];\n                  }\n                  pNodes.push(row);\n             }\n        }\n   }\n   return nodes;\n}\n\n\n\n\n\nfunction getTrees(list, parentKey) {\n    let items= {};\n    \n    for (let i = 0; i < list.length; i++) {\n         let key = list[i].parentId;\n         if (items[key]) {\n             items[key].push(list[i]);\n         } else {\n             items[key] = [];\n             items[key].push(list[i]);\n         }\n     }\n\n   let result = [];\n  \n    if (!items[parentKey]) {\n        return result;\n      \n    }\n    for (let t of items[parentKey]) {\n      \n        result.id=parentKey;\n      \n        result.children=[]\n      \n        result.children.push(t);\n      \n    \n    }\n  \n  return result\n}"}]