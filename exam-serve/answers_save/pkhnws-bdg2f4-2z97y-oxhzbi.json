[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"<script>\n\twindow.onresize = function () {\n   \t\tif (document.documentElement.clientWidth >= 600) {\n          console.log(\"hello\");\n          window.onresize = \"\";\n       }\n   }\n</script>"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"函数式（无状态）组件\nconst Header = () => (\n  render(){\n  \t\treturn {\n  \t\t\t<>\n  \t\t\t\t我是函数式（无状态）组件\n  \t\t\t</>\n  \t\t}\n  }\n)\nexport default Header;\n\nES5 组件\nvar Footer = React.createClass({\n   propTypes: {\n        initialValue: React.PropTypes.string\n    },\n    defaultProps: {\n        initialValue: ''\n    },\n    getInitialState: function() {\n        return {\n            text: this.props.initialValue || 'placeholder'\n        };\n    },\n\trender:function(){\n    \treturn {\n        \t<div>\n          \t\t我是ES5组件\n          </div>\n      }\n   }\n})\n\nES6组件\nclass Footer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n    render() {\n        return (\n            <>\n                我是ES6组件\n            </>\n        );\n    }\n}\n\nexport default Footer;\n\n\n\n区别：\n1.无状态组件的创建形式使代码的可读性更好，并且减少了大量冗余的代码，精简至只有一个render方法，大大的增强了编写一个组件的便利，除此之外无状态组件还有以下几个显著的特点：\n      ①.组件不会被实例化，整体渲染性能得到提升\n      ②.组件不能访问this对象\n      ③.组件无法访问生命周期的方法\n      ④.无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\n\n2.与无状态组件相比，React.createClass和后面要描述的React.Component都是创建有状态的组件，这些组件是要被实例化的，并且可以访问组件的生命周期方法。但是随着React的发展，React.createClass形式自身的问题暴露出来：\n\t\t①.React.createClass会自绑定函数方法（不像React.Component只绑定需要关心的函数）导致不必要的性能开销，增加代码过时的可能性。\n\t\t②.React.createClass的mixins不够自然、直观；React.Component形式非常适合高阶组件（Higher Order Components--HOC）,它以更直观的形式展示了比mixins\t\t  更强大的功能，并且HOC是纯净的JavaScript，不用担心他们会被废弃。HOC可以参考无状态组件(Stateless Component) 与高阶组件。\n\t\t③.React.createClass创建的组件，其每一个成员函数的this都有React自动绑定，任何时候使用，直接使用this.method即可，函数中的this会被正确设置。\n \t\t④.React.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。\n\t\t⑤.React.createClass创建的组件，其状态state是通过getInitialState方法来配置组件相关的状态；\n\t\t  React.Component创建的组件，其状态state是在constructor中像初始化组件属性一样声明的。\n\n\n"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"function loadImageAsync(url) {\n    return new Promise(function(resolve, reject) {\n        const image = new Image();\n        image.onload = function() {\n          \tresolve(image);\n \t\t\t};\n        image.onerror = function() {\n          \treject(new Error('Could not load image at ' + url));\n  \t\t\t};\n        image.src = url;\n    });\n}"}]