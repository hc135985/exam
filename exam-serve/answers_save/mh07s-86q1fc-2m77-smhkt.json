[{"title":"commonjs规范","questions_id":"ayf32j-5kv76-qvfqh-cigaoo","json_path":"ayf32j-5kv76-qvfqh-cigaoo.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"请简述node环境下的commonjs规范（说出如何导出模块，如何引入模块，如何创建模块）？","student_answer":"根据这个规范，每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见\n导出模块  module.exports    \n引入模块  require（\"app\"）\n创建模块\texports.app{}"},{"title":"let和var的区别","questions_id":"h7f6hq-cezl0g-fyu3o-6onwjf","json_path":"h7f6hq-cezl0g-fyu3o-6onwjf.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"在声明变量的时候，使用`let`和`var`有什么区别呢？","student_answer":"let 有自己的作用域    大多数情况下不会进行变量提升\nvar 没有作用域\tvar 的「创建」和「初始化」都被提升了\n<body>\n<ul>\n\t<li>第一个li</li>\n\t<li>第二个li</li>\n\t<li>第三个li</li>\n\t<li>第四个li</li>\n\t<li>第五个li</li>\n</ul>\n \n<script>\n \nvar liList = document.querySelectorAll('li') // 共5个li\nfor(var i=0; i<liList.length; i++){\n  liList[i].onclick = function(){\n    console.log(i)\n  }\n}\t\n</script>\n</body>\n以上代码中循环变量的声明用var和let会有什么不同的效果？\n结果肯定相信很多人都知道：用var时，都打印5。用let时，打印0、1、2、3、4。\n\n为什么会这样，估计很多人就不知道了吧。于是我便讲讲我的理解：\n\n关键点是：1.理解作用域链。\n  2.var和let的作用域。\n  3.变量提升。\n详细讲解一下：\n铺垫知识：\n1.var声明变量是函数作用域，而let声明变量是语句块作用域；\n2.var提升到函数定义顶部，此处是全局作用域顶部；let提升到语句块顶部，此处是for循环第一行。\n3.for( let i = 0; i< 5; i++) 这句话的圆括号之间，有一个隐藏的作用域（用var时没有）。\n  for( let i = 0; i< 5; i++) { 循环体 } 在每次执行循环体之前，JS 引擎会把 i 在循环体的上下文中重新声明及初始化一次。\n\n正式讲解：\n1.i的声明被提升。\n2.当运行for循环时为i赋值，并为每个li绑定事件(注意：运行for循环时只是绑定了事件但是并没有执行事件）。\n3.当触发事件时（注意：此时for循环执行完了），现在需要控制台打印i的值，于是i便沿着作用域链寻找它的值。\n4.当用var声明时，i会在全局作用域中找到它的值，为5.\n5.当用let声明时，i会在for的第一行找到它的值，每次的值不一样，分别为0、1、2、3、4.\n\n\n注：当用let时代码可以这样理解：\nvar liList = document.querySelectorAll('li') // 共5个li\nfor( let i=0; i<liList.length; i++){\n  let i = 隐藏作用域中的i \n  liList[i].onclick = function(){\n    console.log(i)\n  }\n}\n在不补充点关于变量提升的知识：\n\n1.let 的「创建」过程被提升了，但是初始化没有提升。（此时变量进入暂时死区）\n2.var 的「创建」和「初始化」都被提升了。\n3.function 的「创建」「初始化」和「赋值」都被提升了。\n4.const 和 let 只有一个区别，那就是 const 只有「创建」和「初始化」，没有「赋值」过程。（也会进入暂时死区）。"},{"title":"解构赋值和数组的map方法","questions_id":"izvfy-572mw-thxrmm-7aba5s","json_path":"izvfy-572mw-thxrmm-7aba5s.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"如下：是一段html结构\n```   \n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n```\n加载一段对应的javaScript代码\n\n```\n        let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })\n```\n\n请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义","student_answer":"let oUl = document.getElementsByTagName('ul')[0];  // 获取ul\n        let li = document.getElementsByTagName('li');\t//获取所有li\n        const {map,forEach} = [];\t //解构赋值\n        li = map.call(li,item=>{\t//改变this指向   \n            let key = 2 * item.getAttribute('key') - 1;  //获取所有li的值 *2 -1    \n            item.setAttribute('key',key);\t//设置新的属性   值为1,3,5,7\n            return item;\t //返回item\n        });\n        oUl.innerHTML = '';  //清空ul所有内容\n        forEach.call(li,item=>{\t //改变this指向   \n            oUl.appendChild(item); //追加新的li\n        })"},{"title":"async配合transition实现自定义动画","questions_id":"bqq54a-jly2z9-m9fg7pj-oio193","json_path":"bqq54a-jly2z9-m9fg7pj-oio193.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"html结构\n```html\n<div id=\"box\"></div>\n```\ncss样式\n```css\n#box{\n  width:100px; height:100px; background-color:red; border-radius:50%; transition:transform 0.5s;\n}\n```\njavaScript代码\n```js\n        const oBox = document.getElementById('box');\n        oBox.addEventListener('transitionend',()=>{\n            let {x,y} = oBox;\n            moveTo.reslove({x,y});\n        },false);\n        function moveTo(x,y){\n            return new Promise((reslove,reject)=>{\n                moveTo.reslove = reslove;\n                oBox.x = x;\n                oBox.y = y;\n                oBox.style.transform = `translate(${x}px,${y}px)`;\n            })\n        }\n```\n\n补全以上代码，使点击oBox后，使oBox走出一个  W 的轨迹（使用async函数实现），并简单写出整体的代码思路。","student_answer":"\n  \n        var oBox = document.getElementById('box');\n       \n        var globalReslove = null;\n        oBox.addEventListener('transitionend',()=>{ // 监听动画完成的事件\n            if(globalReslove){\n                globalReslove()\n            }\n        });\n       \n        function move(x,y){  // 自行封装一个返回promise的方法，x，y分别代表要移动的横向和纵向的距离\n            return new Promise((reslove,reject)=>{\n                // 请补全相关的逻辑代码\n                globalReslove =reslove;\n                oBox.style.transform = `translate(${x}px,${y}px)`;\n            })\n        }\n\n\n        var arrPosition = [\n            {x:0,y:0},\n            {x:100,y:150},            \n            {x:200,y:0},\n            {x:300,y:150},\n            {x:400,y:0}\n        ]\n\n\n       //实现w走位\n        \n        oBox.onclick = async function(){\n          \n            for(let i of arrPosition){\n                await move(i.x,i.y)\n            }\n        }"},{"title":"输入的reduce方法","questions_id":"zyocwi-drka9-kx8vv-blrmw9p","json_path":"zyocwi-drka9-kx8vv-blrmw9p.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"现在有一个数组如下：\n```js\n    const car = [\n            {\n                groupName:'水果',\n                type:[\n                    {\n                        name:'苹果',\n                        price:10\n                    },\n                    {\n                        name:'橘子',\n                        price:40\n                    },\n                    {\n                        name:'香蕉',\n                        price:90\n                    }\n                ]\n            },\n            {\n                groupName:'蔬菜',\n                type:[\n                    {\n                        name:'芹菜',\n                        price:10\n                    },\n                    {\n                        name:'菠菜',\n                        price:15\n                    },\n                    {\n                        name:'土豆',\n                        price:8\n                    }\n                ]\n            }\n        ]\n```\n\n根据上述数据，编写一个函数，该函数(computedPrice)接收上述的数据作为参数，返回一个对象，请输入用数组的reduce方法实现。对象的格式如下\n\n```js\n       {\n            allPrice:所有商品的总价格,\n            group:[\n                {\n                    typeName:'水果',\n                    price:所有水果的总价格\n                },\n                {\n                    typeName:'蔬菜',\n                    price:所有蔬菜的总价格\n                }\n            ]\n        } \n```  ","student_answer":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n\n<body>\n\n    <script>\n        var arr = [1, 2, 2, 3, 4, 5]\n\n        arr.reduce(function (previousValue, currentValue, index, array) {\n            // console.log(previousValue,\"previousValue\")\n            console.log(currentValue, \"currentValue\")\n            return previousValue + currentValue;\n        });\n        console.log(arr)\n\n        function fn() {\n            let numShuiguo = [];\n            let numShucai = [];\n            let zongjia = []\n            \n            const car = [\n                {\n                    groupName: '水果',\n                    type: [\n                        {\n                            name: '苹果',\n                            price: 10\n                        },\n                        {\n                            name: '橘子',\n                            price: 40\n                        },\n                        {\n                            name: '香蕉',\n                            price: 90\n                        }\n                    ]\n                },\n                {\n                    groupName: '蔬菜',\n                    type: [\n                        {\n                            name: '芹菜',\n                            price: 10\n                        },\n                        {\n                            name: '菠菜',\n                            price: 15\n                        },\n                        {\n                            name: '土豆',\n                            price: 8\n                        }\n                    ]\n                }\n            ]\n\n            car.forEach((item) => {\n                console.log(item.type)\n                item.type.map((em) => {\n                    zongjia.push(em.price)\n                    \n                    return zongjia\n                })\n\n            })\n            // console.log(zongjia)\n            var zongjiaA = zongjia.reduce(function (a, b) {\n                return a + b;\n            })\n            console.log(zongjiaA)\n\n\n\n            let newArr = {\n                allPrice: zongjiaA,\n                group: [\n                    {\n                        typeName: '水果',\n                        price: 所有水果的总价格\n                    },\n                    {\n                        typeName: '蔬菜',\n                        price: 所有蔬菜的总价格\n                    }\n                ]\n            };\n            return newArr;        \n        }\n        fn()\n\n    </script>\n\n\n</body>\n\n</html>"}]