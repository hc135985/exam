[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"window.onresize=function(){\n  const width=this.innerWidth\n  if(width>=600){\n    alert(\"hello\")\n  }\n}"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"react组件创建方式有三种：\n1、React.createClass 创建有状态的组件，这些组件是要被实例化的，并且可以访问组件的生命周期方法，会自绑定函数方法（不像React.Component只绑定需要关心的函数）导致不必要的性能开销，增加代码过时的可能性。React.createClass的mixins不够自然、直观 \n2、函数创建方式\t无状态 没有生命周期  用于单纯的渲染不涉及到state的操作只负责根据传入的props来展示  不能访问this对象  没有副作用 组件不会被实例化\nReact.Component是以ES6的形式来创建react的组件的，是React目前极为推荐的创建有状态组件的方式，React.Component形式非常适合高阶组件（Higher Order Components--HOC）,它以更直观的形式展示了比mixins更强大的功能，并且HOC是纯净的JavaScript，不用担心他们会被废弃"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg = (src)=>{\n            return new Promise((resolve, reject)=>{\n                var img = new Image()\n                img.onload = () => {\n                    resolve(img)\n                }\n                img.onerror = () => {\n                    reject(new Error(\"加载失败\"))\n                }\n                img.src = src\n            })\n        }\n        const imgs = ['url1', 'url2', 'url3'];\n        // 依次加载图片\n        async function fAsync(imgs){           \n                for (let i of imgs) {\n                    await loadImg(i)\n                }\n        }\n\n        fAsync(imgs);"},{"title":"防抖场景实现","questions_id":"pee5rm-didl4v-b5ty-eay7yo","json_path":"pee5rm-didl4v-b5ty-eay7yo.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"题目 有一个 input 查询框，每一次 change 都会触发一个“ a 函数”\n要求\n1.此 input 框的 change 请求 在间隔 0.3s 内的过滤掉\n2.提供一个包装函数，可以对上述的“ a 函数”请求过滤做统一的封装\n```\n<input id=\"input\" />\n```","student_answer":"unction input(value) {\n 2         console.log(`输入的内容${value}`)\n 3     }\n 4 const ipt = document.getElementById('input')\n 5 \n 6 function debounce(fun,delay){\n 7     let timer ;\n 8     return function(args){\n 9         const that = this\n10         clearTimeout(timer)\n11         timer = setTimeout(function(){\n12             fun.call(that,args)\n13         },delay)\n14     }\n15    }\n16 const debounceInput = debounce(input,300)\n17 ipt.addEventListener(\"keyup\",function(e){\n18     debounceInput(e.target.value)\n19 })\n"}]