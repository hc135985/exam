[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <script>\n        function handleChange(){\n            let flag = false;\n            window.onresize = function(){\n                if(document.documentElement.clientWidth >= 600){\n                    if(flag === false){\n                        console.log(\"hello\");\n                    }\n                    flag = true;\n                }else{\n                    flag = false;\n                }\n            }\n        }\n        handleChange();\n    </script>\n</body>\n</html>"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"//0.react es5 \nvar ConES5 = React.createClass({options})//废弃性能不好\n//1.react函数组件 没有生命周期 可以传props 性能最好 适合不做内部操作纯渲染的组件\nlet User = props=> {\n    return <h1>{props}</h1>;\n  }\n//2.react ES6 class 组件 有生命周期 可以传props  适合有内部数据变更 需要生命周期配合的组件\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <h3>class组件</h3>\n      </div>\n    )\n  }\n}\n//3.vue 全局组件创建  全局可以获取使用 不用在子组件里去获取 但会造成无用变量和内存\nVue.component('mycomponent', {\n\n})\n//4.vue局部组件 只在本组件内部可以使用的组件 优点是不会添加到其他组件优化性能\ncomponents: {\n    Component1,\n    Component2,\n    Component3\n  }\n//5.VUE函数式组件 适合小型案例 代码会显得臃肿\nVue.component('my-component', {\n  functional: true,\n  props: {  \n  },\n  render: function (createElement, context) {\n  }\n})\n//6.vue用.vue文件写组件 简介高效 可以快速配置和检查错误 推荐使用\n<template>\n  <div>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'HelloWorld',\n  data () {\n    return {\n    }\n  }\n}\n</script>\n<style scoped>\n</style>\n\n\n\n\n"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let img = new Image();\nimg.onload = ()=>{\n  resolve();\n}\nimg.onerror = ()=>{\n  reject();\n}\nimg.src = src;"}]