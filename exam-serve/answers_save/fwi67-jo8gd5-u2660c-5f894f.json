[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":" let flag = 0;\n     window.onresize = function(){\n          if(flag == 0 && this.innerWidth>=600){\n               flag = 1\n              console.log('hello')\n           }\n }\n"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"1.类组件 .es6 方式\nimport React, { Component } from 'react'\nexport default class App extends Component {\n  constructor(){\n  \tsuper()\n  \t}\n  render() {\n    return (\n      <div></div>\n    )\n  }\n  \n}\n2. 函数式无状态组件\n\nfunction myComponent(props) { \n2      return \n3         <div>Hello {props.name}</div> \n4 }\n\n3. es5方式 React.createClass组件\n  var myCreate = React.createClass({\n   2     defaultProps: {  },\n   5     getInitialState: function() {\n   6         return {};\n   9     },\n  10     render: function() {\n  11         return (\n  12             <div></div>\n  15         );\n  16     }\n  17 });\n\n区别：\n1.函数式无状态组件是为了创建纯展示组件，这种组件只负责根据传入的props来展示;\n   不涉及到state状态的操作;\n   不能访问this对象\n   不能访问生命周期方法.\n2.类组件 成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。现在可以用实验性的es6函数写法(eg:play=()=>{});\n   state在constructor中初始化;\n   props属性类型和组件默认属性作为组件类的属性，不是组件实例的属性，所以使用类的静态属性配置。\n   可以访问生命周期\n3.  es5方式 React.createClass组件 这种方法比较陈旧，慢慢会被淘汰 \n\t 它需要有defaultProps初始的props  以及出事的state值   getInitialState"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg =(src)=>{\n        return new Promise((resolve,reject)=>{\n            let img = new Image();//创建一个Image对象\n            \n            img.onload = function(){\n                resolve(img)\n            }\n          \timg.src = src;//图片地址  相当于给浏览器缓存了一张图片\n          //src 属性一定要写到 onload 的后面，否则程序在 IE 中会出错。\n        })\n     }\n\n     let arr =['1.jpg','2.jpg','3.jpg']\n\n     arr.forEach((ele,ind)=>{\n         loadImg(ele).then((res)=>{\n             document.body.appendChild(res)\n         }).catch((res)=>{\n             console.log('出错啦')\n         })\n     })"}]