[{"title":"匿名自执行函数的应用","questions_id":"vh80e-3d3g3o-6hy47e-ib2x4c","json_path":"vh80e-3d3g3o-6hy47e-ib2x4c.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"heinan","user_id":"fdjfr-msxp8a","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"代码如下：\n```js\nfor (var i = 0; i < 5; i++) {\n    setTimeout(function () {\n        console.log(i)\n    })\n}\n输出\n5\n5\n5\n5\n5\n```\n修改上面代码，打印结果要求为：0,1，2，3，4","student_answer":"for (var i = 0; i < 5; i++) {\n        (function(i){\n            setTimeout(function () {\n              console.log(i)\n           })\n        })(i)\n    }\n"},{"title":"react生命周期","questions_id":"xt05yo-prna5g-f7zqo-ltl5rh","json_path":"xt05yo-prna5g-f7zqo-ltl5rh.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"dingshaoshan","user_id":"ypay2t-7uxsd","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"# react常用生命周期图\n\n## 请在 “其他“ 中查看图片。 \n \n\n\n如图是react常用生命周期图，请阅读图，并在1，2，3，4处填写对应的生命周期","student_answer":"shouldComponentUpdate\ncomponentDidMount\ncomponentDidUpdate"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"无状态函数式组件   组件不会被实例化，整体渲染性能得到提升 组件不能访问this对象 组件无法访问生命周期的方法无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\nes5原生方式React.createClass定义的组件 React.createClass会自绑定函数方法（不像React.Component只绑定需要关心的函数）导致不必要的性能开销，增加代码过时的可能性。React.createClass的mixins不够自然、直观；React.Component形式非常适合高阶组件（Higher Order Components--HOC）,它以更直观的形式展示了比mixins更强大的功能，并且HOC是纯净的JavaScript，不用担心他们会被废弃。\nes6形式的extends React.Component定义的组件 React.Component在创建组件时配置这两个对应信息时，他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类的静态属性来配置的。 React.Component创建的组件，其状态state是在constructor中像初始化组件属性一样声明的。\n"},{"title":"分别使用DOM0级DOM2级给一个DIV绑定事件","questions_id":"1gsxn-k09c2j-gq8peo-sohe9","json_path":"1gsxn-k09c2j-gq8peo-sohe9.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"分别使用DOM0级DOM2级给一个button绑定事件，并且描述这两种方式的区别","student_answer":" DOM0级事件绑定 会存在覆盖的问题；下边的代码会把上边的代码覆盖 一是在标签内写onclick事件 \t\t\t\t二是在JS写onlicke=function（）{}函数　  \nvar btn=$('#hash').get(0);\n    btn.onclick=function(){\n     alert('111');\n  };\n   btn.onclick=function(){\n       alert('222');\n };\n\n\n DOM2级事件绑定  支持绑定多个函数; 只有三个参数都相同时，才会处理称重复绑定，这时就不再往事件池添加 \t\t只有一个：监听方法，有两个方法用来添加和移除事件处理程序：addEventListener()和removeEventListener()。\n$('#hash').click(function(){\n        alert('jq的dom2级点击第一次')\n    });\n    $('#hash').click(function(){\n        alert('jq的dom2级点击第二次')\n    });\n    btn.addEventListener('click',function(){\n        alert('原生dom2级第一次click')\n    },false);\n    btn.addEventListener('click',function(){\n        alert('原生dom2级第二次click')\n    },false)\n\n\n\n\n"},{"title":"最少两种方式实现点击每个li都弹出下标","questions_id":"puaqas-1modca-2y04jh-brcz59g","json_path":"puaqas-1modca-2y04jh-brcz59g.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"<ul id=”test”>\n    <li>这是第一条</li>\n    <li>这是第二条</li>\n    <li>这是第三条</li>\n</ul>","student_answer":"这是第一条\nvar itemli = document.getElementsByTagName(\"li\");\nfor(var i = 0; i<itemli.length; i++){\n　　　　itemli[i].index = i; //给每个li定义一个属性索引值\n　　　　itemli[i].onclick = function(){\n　　　　　　alert(this.index+this.innerHTML); \n　　　　}\n}\n\n这是第二条\nvar itemli = document.getElementsByTagName(\"li\");\nfor(var i = 0; i<itemli.length; i++){\n　　　(function(n){\n　　itemli[i].onclick = function(){\n　　　　　　alert(n+itemli[n].innerHTML); \n　　　　　}\n　　})(i)\n}\n这是第三条\n$(\"ul li\").click(function(){\nvar item = $(this).index(); //获取索引下标 也从0开始\nvar textword = $(this).text(); //文本内容\nalert(item+textword);\n})"}]