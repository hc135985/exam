[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"\n\twindow.onresize = function(){\n\t\t\tif(document.body.clientWidth>= 600){\n\t\t\t\t\t\tconsole.log(hello);\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t}\n\t"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"函数式定义的无状态组件\n它是为了创建纯展示组件，这种组件只负责根据传入的props来展示，不涉及到state状态的操作。\n组件不能访问this对象\n 不能访问生命周期方法\n \n \nes5原生方式React.createClass定义的组件\n这种方式比较陈旧，慢慢会被淘汰。\n\n\nes6形式的extends React.Component定义的组件\n成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。\n状态state是在constructor中像初始化。\nprops属性类型和组件默认属性作为组件类的属性，不是组件实例的属性，所以使用类的静态属性配置。"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"\nlet loadImg = (src) => {\n            return new Promise((resolve, reject) => {\n                let img = document.createElement('img')\n                img.src = src\n                document.body.append(img)\n                setTimeout(() => {\n                    resolve(true)\n                }, 1000)\n            })\n        }\n        const imgs = ['banner1.jpg', 'banner2.jpg', 'banner3.jpg', 'banner4.jpg'];\n        // 依次加载图片\n        async function fAync(imgs) {\n            for (let i of imgs) {\n                await loadImg(i)\n            }\n        }\n        fAync(imgs);\n"},{"title":"防抖场景实现","questions_id":"pee5rm-didl4v-b5ty-eay7yo","json_path":"pee5rm-didl4v-b5ty-eay7yo.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"题目 有一个 input 查询框，每一次 change 都会触发一个“ a 函数”\n要求\n1.此 input 框的 change 请求 在间隔 0.3s 内的过滤掉\n2.提供一个包装函数，可以对上述的“ a 函数”请求过滤做统一的封装\n```\n<input id=\"input\" />\n```","student_answer":"function input(value) {\n          console.log(\"输入的内容\")\n      }\n  const ipt = document.getElementById('input')\n  \n  function debounce(fun,delay){\n      let timer ;\n      return function(args){\n          const that = this\n        clearTimeout(timer)\n         timer = setTimeout(function(){\n             fun.call(that,args)\n         },delay)\n     }\n    }\n const debounceInput = debounce(input,300)\nipt.addEventListener(\"change\",function(e){\n    debounceInput(e.target.value)\n })"}]