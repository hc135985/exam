[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":""},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"1.函数式定义的无状态组件\n    创建纯展示组件，只负责根据传入的props来展示，不涉及state的操作。\n    无状态函数式组件形式上表现为一个直带有一个render方法的组件类。\n    特点是精简，避免冗余，以及：\n        1.组件不会实例化，整体渲染性能提升\n        2.组件不能访问this对象\n        3.组件无法访问生命周期的方法\n        4.无状态组件只能访问输入的props,同样的props会得到同样的渲染结果，不会有副作用\n    <script type=\"text/babel\">\n      function HelloComponent(props, /* context */) {\n      return <div>Hello {props.name}</div>\n    }\n    ReactDOM.render(<HelloComponent name=\"Sebastian\" />, mountNode) \n    </script>\n\n\t\t2.ES5原生方式 React.createClass定义的组件\n\n\t\t3.ES6形式的extends React.Component\n      <div id=\"box\"></div>\n      <script type=\"text/babel\">\n        class App extends React.Component{\n          render(){\n            return (\n              <div>ES6形式的extends React.Component</div>\n            )\n          }\n        }\n        ReactDOM.render(<App/>, document.getElementById(\"box\")) \n     \t</script>\n\n        React.createClass 与 extends React.Component区别：\n\n        (1).函数this自绑定\n          React,createClass会自绑定函数方法导致不必要的性能开销，增加代码过时的可能性\n          React.Component创建的组件，React.Component只绑定需要关心的函数，否则this不能获取当前组件实例对象。\n\n        (2).组件属性类型propTypes及其默认props属性defaultProps配置不同\n\t\t\t\tReact.createClass在创建组件时，有关组件props的属性类型及组件默认的属性会作为组件实例的属性来配置，其中defaultProps是使用getDefaultProps的方法来获取默认组件属性的\n\t\t\t\tReact.Component在创建组件时配置这两个对应信息时，他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类的静态属性来配置的。\n\n       (3).组件初始状态state的配置不同\n             React.createClass创建的组件，其状态state是通过getInitialState方法来配置组件相关的状态；\n             React.Component创建的组件，其状态state是在constructor中像初始化组件属性一样声明的。\n\n       (4).Mixins的支持不同\n             React.createClass在创建组件时可以使用mixins属性，以数组的形式来混合类的集合。\n             React.Component暂不不支持Mixins\n             React.createClass的mixins不够自然、直观；\n            React.Component形式非常适合高阶组件（Higher Order Components–HOC）,它以更直观的形式展示了比mixins更强大的功能，并且HOC是纯净的JavaScript，不用担心他们会被废弃。HOC可以参考无状态组件(Stateless Component) 与高阶组件。"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"function loadImageAsync(url) {\n  return new Promise(function(resolve, reject) {\n    const image = new Image();\n    image.onload = function() {\n      resolve(image);\n    };\n    image.onerror = function() {\n      reject(new Error('Could not load image at ' + url));\n    };\n    image.src = url;\n  });\n}"}]