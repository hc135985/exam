[{"title":"computed 和 watch 区别","questions_id":"joo9h2-q79phw-pskuido-ua4t7k","json_path":"joo9h2-q79phw-pskuido-ua4t7k.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"computed 和 watch 区别?\n\n\n\n\n\n\n\n\n\n\n\n","student_answer":"区别:\nComputed: 可以关联多个实时计算的对象，当这些对象中的其中一个改变时都会出发这个属性。具有缓存能力，所以只有当数据再次改变时才会重新渲染，否则就会直接拿取缓存中的数据。\nWatch：当你需要在数据变化响应时，执行异步操作，或高性能消耗的操作，自定义 watcher 的方式就会很有帮助。"},{"title":"实现双向数据绑定","questions_id":"nodsz-nme56x-51nrc-tklsfn","json_path":"nodsz-nme56x-51nrc-tklsfn.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"使用js实现一个数据双向绑定效果, input中输入的内容同步到p标签中\n```\n<div id=\"app\">\n    <input type=\"text\" id=\"txt\">\n    <p id=\"show-txt\"></p>\n</div>\n```","student_answer":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<input type=\"text\" id=\"txt\"/>\n<p id=\"show-txt\">{{hello}}</p>\n<script>\n    var obj = {};\n    Object.defineProperty(obj,'hello',{\n        set:function(val){\n            document.getElementById('show-txt').innerHTML = val;\n            document.getElementById('txt').value = val;\n        }\n    });\n    document.getElementById('txt').onkeyup = function(e){\n        obj.hello = e.target.value;\n    };\n    obj.hello = \"\";\n</script>\n</body>\n</html>"},{"title":"Vue导航守卫做鉴权处理","questions_id":"42cuvb-7216fb-zlkab2-wwns3d","json_path":"42cuvb-7216fb-zlkab2-wwns3d.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"wbxm4-jf8q6k-lvt2ca-ze96mg","exam_name":"月考","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 在Vue中我们可以使用导航守卫做鉴权，现有要求如下：  \n可以根据getToken()是否返回token判断  \n- 1.如果用户已经登陆  \n  - a. 如果用户要去/login页面，则重定向到/路径  \n  - b. 如果用户要去其他页面，则不做处理直接跳转    \n- 2.如果用户未登陆  \n  - a. 如果用户要去的页面在白名单内，则不做处理直接跳转  \n  - b. 如果用户要去的页面不在白名单内，则重定向到/login页面，并把要去的页面路径作为查询字符串的query的值\n\n```js\nimport router from './router'\nimport { getToken } from '@/utils/auth' // getToken from cookie\n\nconst whiteList = ['/login', '/register', '/auth-redirect']// no redirect whitelist\n\nrouter.beforeEach((to, from, next) => {\n  if (getToken()) { // determine if there has token\n    // write your code here\n  } else {\n    // write your code here\n  }\n})\n```","student_answer":"import router from './router'\nimport { getToken } from '@/utils/auth' // getToken from cookie\n\nconst whiteList = ['/login', '/register', '/auth-redirect']// no redirect whitelist\n\nconst vueRouter = new Router({\n    routes: [\n        //......\n        {\n          path: '/account',\n          name: 'account',\n          component: Account,\n          children: [\n            {name: 'course', path: 'course', component: CourseList},\n            {name: 'order', path: 'order', component: OrderList}\n          ]\n        }\n    ]\n});\nvueRouter.beforeEach(function (to, from, next) {\n    const nextRoute = [ 'account', 'order', 'course'];\n    const auth = store.state.auth;\n    //跳转至上述3个页面\n    if (nextRoute.indexOf(to.name) >= 0) {\n        //未登录\n        if (!store.state.auth.IsLogin) {\n            vueRouter.push({name: 'login'})\n        }\n    }\n    //已登录的情况再去登录页，跳转至首页\n    if (to.name === 'login') {\n        if (auth.IsLogin) {\n            vueRouter.push({name: 'home'});\n        }\n    }\n    next();\n});"},{"title":"Vue基础知识","questions_id":"uecyx-3qim4-rwk9o-v43sj8","json_path":"uecyx-3qim4-rwk9o-v43sj8.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"wbxm4-jf8q6k-lvt2ca-ze96mg","exam_name":"月考","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 谈谈对Vue响应原理的理解?","student_answer":"从三个方面来理解Vue处理深度响应的原理：\n\t第一：数据定义；\n    \t组件中定义数据{counter:0}；\n      初始化过程中，会执行observe(data, this)；\n      在observe（）过程中会将data这个对象劫持，通过Object.defineProperty将data上所有的属性绑定上getter和setter函数；（这是针对对象，对于数组，Vue通过改写数组的原生方法来劫持）；\n      通俗的说就是只要谁获取了counter的值就会触发getter()；要是谁改变了counter的值就会触发setter();比如上述代码中的button绑定{{count}}的时候一定会触发getter();如果是count的值发生改变就一定会触发setter()\n\t第二：数据绑定；\n    \t在页面元素button中绑定{{count}};\n      在编译过程中，针对这个button会产生一个Watcher(vm, exp, cb(newValue,oldValue)),vm是Vue对象，exp是数据绑定的数据;cb（）的逻辑是用来更新页面。现在的问题是如何将数据的变化和Watcher关联起来。\n      在这里用到了一个重要的思想就是发布订阅模式；Watcher初始化的时候会将Dep.target设置为this,也就是Watcher自己，同时会触发count的getter方法，getter里面会调用Dep的depend方法，depend方法会调用Watcher的addDep方法，addDep方法就是将Watcher自己存放在Dep的事件池里面。\n<script>\n class Dep {\n   constructor() {\n     this.id = uid++;\n     this.subs = [];\n   }\n\n   addSub(sub) {\n     this.subs.push(sub)\n   }\n\n   depend() {\n     if (Dep.target) {\n       Dep.target.addDep(this)\n     }\n   }\n\n   removeSub(sub) {\n     let ind = this.subs.findIndex(sub);\n     this.subs.splice(ind, 1)\n   }\n\n   notify() {\n     this.subs.forEach(sub => sub.update())\n   }\n}\nDep.target = null;\n</script>\n\t第三：数据响应；\n    当发生点击事件的时候，count的值改变，会触发setter里面的方法，这个方法会调用dep.notify()；它会告知Dep的事件池里的存放的Watcher去执行它的update（）方法；Watcher的update()方法；这个方法里面会获取count的新的值，给它的回调cb()，去更新视图。"}]