[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":" window.onresize=function(){\n let winWidth = window.innerWidth;\n   if(winWidth>=600){\n     console.log('hello')\n   }else{\n     console.log('')\n   }\t \n }"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"\nreact 创建方式：\n函数式定义的无状态组件\nes5原生方式React.createClass定义的组件  （this指向不一样）\nes6形式的extends React.Component定义的组件\n\nvue创建\n使用Vue.extend来创建全局的Vue组件\nvar tem1 = Vue.extend({\n   template:'<h3>这是使用 Vue.extend 创建的组件</h3>' //指定组件要展示的HTML结构\n});\n使用Vue.component('组件名称',创建出来的组件模板对象）\nVue.component('myTem1',tem1);\n"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg=(src)=> {\n            //返回出一个Promise\n            return new Promise(function(resolve, reject) {\n              // write your code here\n              //实例创建\n                const image = new Image();\n                //当图片加载成功后\n                image.onload = function() {\n                    resolve(image);\n                };\n                //当图片加载失败后\n                image.onerror = function() {\n                    reject(new Error('失败'));\n                };\n                image.src = src;\n            });\n        }"}]