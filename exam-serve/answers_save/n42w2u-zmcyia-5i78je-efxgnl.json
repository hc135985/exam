[{"title":"commonjs规范","questions_id":"ayf32j-5kv76-qvfqh-cigaoo","json_path":"ayf32j-5kv76-qvfqh-cigaoo.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"请简述node环境下的commonjs规范（说出如何导出模块，如何引入模块，如何创建模块）？","student_answer":"//导出模块，\nmodule.exports//抛出当前内容形式，\nexports//抛出对象\n//引入模块，\n require//命令是CommonJS规范之中，用来加载其他模块的命令\n//创建模块\n //一个目录先初始化package.json 入口文件默认index ,然后npm i 下载 node_modules目录存放文件 ,在node_modules，新建一个index.js\n \nvar exports = module.exports;\nexports.area = function (r) {\n  return Math.PI * r * r;\n};\nexports.circumference = function (r) {\n  return 2 * Math.PI * r;\n};"},{"title":"let和var的区别","questions_id":"h7f6hq-cezl0g-fyu3o-6onwjf","json_path":"h7f6hq-cezl0g-fyu3o-6onwjf.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"在声明变量的时候，使用`let`和`var`有什么区别呢？","student_answer":"let\n//1.能对变量重赋值\n//2.产生块级作用域\n//3.不会变量提升\n//4.能在声明时不赋值\n//5.在同一作用域下不能重复声明同一个变量\n//6.暂时性死区\nvar\n//1.var 声明的变量，在全局范围内都有效\n//2.var存在变量提升\n//3.只有全局作用域和函数作用域概念，没有块级作用域的概念。\n//4.变量可以多次声明\n//5.作用于函数中\n//6.可以在相同作用域内重复声明"},{"title":"解构赋值和数组的map方法","questions_id":"izvfy-572mw-thxrmm-7aba5s","json_path":"izvfy-572mw-thxrmm-7aba5s.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"如下：是一段html结构\n```   \n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n```\n加载一段对应的javaScript代码\n\n```\n        let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })\n```\n\n请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义","student_answer":" let oUl = document.getElementsByTagName(\"ul\")[0]; //获取节点 ul\n      let li = document.getElementsByTagName(\"li\"); //获取节点 li\n      //结构赋值 将map和forEach这两个方法解构出来方便遍历\n      const { map, forEach } = [];\n     // call传递参数要一个一个的传递 li指每个li标签,item指 li 的key属性值\n      li = map.call(li, item => {\n        //获取 自定义属性 计算 key 的值\n        let key = 2 * item.getAttribute(\"key\") - 1;\n        //给li每一项设置自定义属性\n        item.setAttribute(\"key\", key);\n        //返回 item\n        return item;\n      });\n      //先清空oUl\n      oUl.innerHTML = \"\";\n       //遍历上面已添加的key键值对的元素\n      forEach.call(li, item => {\n        //将 item 添加到 oUl：\n        oUl.appendChild(item);\n      });"},{"title":"解决以下异步代码问题","questions_id":"pwrym-ypsrgi-3smad-bm9d1m","json_path":"pwrym-ypsrgi-3smad-bm9d1m.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"检索并计算属于同一教室中每个学生的平均分数，例子中教室 ID 为 75。每个学生可以在一年内参加一门或多门课程。以下 API 可用于检索所需数据。\n```\n// GET LIST OF ALL STUDENTS\nGET /api/students\nResponse:\n[{\n    \"id\": 1,\n    \"name\": \"John\",\n    \"classroomId\": 75\n}]\n// GET COURSES FOR GIVEN A STUDENT\nGET /api/courses?filter=studentId eq 1\nResponse:\n[{\n    \"id\": \"history\",\n    \"studentId\": 1\n}, {\n    \"id\": \"algebra\",\n    \"studentId\": 1\n}]\n// GET EVALUATION FOR EACH COURSE\nGET /api/evaluation/history?filter=studentId eq 1\nResponse:\n{\n    \"id\": 200,\n    \"score\": 50,\n    \"totalScore\": 100\n}\n```\n编写一个接受教室 ID 的函数，并根据该函数计算该教室中每个学生的平均值。 该函数的最终输出应该是带有平均分数的学生列表：\n```\n[\n  { \"id\": 1, \"name\": \"John\", \"average\": 70.5 },\n  { \"id\": 3, \"name\": \"Lois\", \"average\": 67 },\n}\n```\n使用普通回调，promises，observables，generator 或 async-wait 编写所需的函数。 尝试使用至少 2 种不同的技术解决这个问题。\n代码素材用于代替接口\n```\nconst APIS = {\n  STUDENTS: '/api/students',\n  COURSES: '/api/courses',\n  EVALUATION: '/api/evaluation/'\n}; \nfunction fetchData(api) {\n  return new Promise(resolve => {\n    let data = null;\n    switch (api) {\n      case APIS.STUDENTS:\n        data = [{\n          id: 1,\n          name: 'John',\n          classroomId: 75\n        }, {\n          id: 1,\n          name: 'Tom',\n          classroomId: 75\n        }];\n        break;\n      case APIS.COURSES:\n        data = [{\n          id: 'history',\n          studentId: 1\n        }, {\n          id: 'algebra',\n          studentId: 1\n        }];\n        break;\n      case APIS.EVALUATION:\n        data = {\n          id: '200',\n          score: 50,\n          totalScore: 100\n        };\n        break;\n    } \n    resolve(data);\n  });\n} \n```","student_answer":"// GET LIST OF ALL STUDENTS\n      // GET /api/students\n      Response: [\n        {\n          id: 1,\n          name: \"John\",\n          classroomId: 75\n        }\n      ];\n      // GET COURSES FOR GIVEN A STUDENT\n      // GET /api/courses?filter=studentId eq 1\n      Response: [\n        {\n          id: \"history\",\n          studentId: 1\n        },\n        {\n          id: \"algebra\",\n          studentId: 1\n        }\n      ];\n      // GET EVALUATION FOR EACH COURSE\n      //  GET /api/evaluation/history?filter=studentId eq 1\n      Response: [\n        {\n          id: 200,\n          score: 50,\n          totalScore: 100\n        }\n      ][\n        // 编写一个接受教室 ID 的函数，并根据该函数计算该教室中每个学生的平均值。 该函数的最终输出应该是带有平均分数的学生列表：\n\n        ({ id: 1, name: \"John\", average: 70.5 },\n        { id: 3, name: \"Lois\", average: 67 })\n      ];\n\n      // 使用普通回调，promises，observables，generator 或 async-wait 编写所需的函数。 尝试使用至少 2 种不同的技术解决这个问题。 代码素材用于代替接口\n\n      const APIS = {\n        STUDENTS: \"/api/students\",\n        COURSES: \"/api/courses\",\n        EVALUATION: \"/api/evaluation/\"\n      };\n\n      function fetchData(api) {\n        return new Promise(resolve => {\n          setTimeout(function() {\n            let data = null;\n            switch (api) {\n              case APIS.STUDENTS:\n                data = [\n                  {\n                    id: 1,\n                    name: \"John\",\n                    classroomId: 75\n                  },\n                  {\n                    id: 1,\n                    name: \"Tom\",\n                    classroomId: 75\n                  }\n                ];\n                break;\n              case APIS.COURSES:\n                data = [\n                  {\n                    id: \"history\",\n                    studentId: 1\n                  },\n                  {\n                    id: \"algebra\",\n                    studentId: 1\n                  }\n                ];\n                break;\n              case APIS.EVALUATION:\n                data = {\n                  id: \"200\",\n                  score: 50,\n                  totalScore: 100\n                };\n                break;\n            }\n            resolve(data);\n          }, 1000);\n        });\n      }\nasync function fetchData(APIS) {\n\tlet sum = await fetchData(STUDENTS, COURSES, EVALUATION);\n   return sum ;\n }\n"}]