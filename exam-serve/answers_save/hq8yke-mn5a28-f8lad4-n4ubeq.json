[{"title":"computed 和 watch 区别","questions_id":"joo9h2-q79phw-pskuido-ua4t7k","json_path":"joo9h2-q79phw-pskuido-ua4t7k.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"computed 和 watch 区别?\n\n\n\n\n\n\n\n\n\n\n\n","student_answer":"watch主要是监听数据变化，可以监听数据来源的三个部分：props，data，computed内的数据，然后它还可以提供两个参数（new，old）顺序一定是新值，旧值。\ncomputed主要是处理逻辑运算，computed来存储需要处理的数据值，它有存储的机制，只能改变时才执行"},{"title":"实现双向数据绑定","questions_id":"nodsz-nme56x-51nrc-tklsfn","json_path":"nodsz-nme56x-51nrc-tklsfn.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"使用js实现一个数据双向绑定效果, input中输入的内容同步到p标签中\n```\n<div id=\"app\">\n    <input type=\"text\" id=\"txt\">\n    <p id=\"show-txt\"></p>\n</div>\n```","student_answer":"function defineProperty(obj,attr){\nvar val;\n  Obj.defineProperty(obj,attr,{\n  get:function(){\n return val;\n  },\n    set:function(newValue){\n    if(newValue===val){\n    return;\n    }\n      val=newValue;\n      document.getElementById('txt').value=newValue;\n      document.getElmentById('show-txt').innerHTML=newValue;\n    }\n  })\n}\nvar obj={};\ndefineProperty(\"obj,\"txt);\ndocument.getElementById(\"txt\").addEventListener(\"keyup\",function(e){\nobj.txt=e.target.value;\n})"},{"title":"Vue导航守卫做鉴权处理","questions_id":"42cuvb-7216fb-zlkab2-wwns3d","json_path":"42cuvb-7216fb-zlkab2-wwns3d.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"wbxm4-jf8q6k-lvt2ca-ze96mg","exam_name":"月考","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 在Vue中我们可以使用导航守卫做鉴权，现有要求如下：  \n可以根据getToken()是否返回token判断  \n- 1.如果用户已经登陆  \n  - a. 如果用户要去/login页面，则重定向到/路径  \n  - b. 如果用户要去其他页面，则不做处理直接跳转    \n- 2.如果用户未登陆  \n  - a. 如果用户要去的页面在白名单内，则不做处理直接跳转  \n  - b. 如果用户要去的页面不在白名单内，则重定向到/login页面，并把要去的页面路径作为查询字符串的query的值\n\n```js\nimport router from './router'\nimport { getToken } from '@/utils/auth' // getToken from cookie\n\nconst whiteList = ['/login', '/register', '/auth-redirect']// no redirect whitelist\n\nrouter.beforeEach((to, from, next) => {\n  if (getToken()) { // determine if there has token\n    // write your code here\n  } else {\n    // write your code here\n  }\n})\n```","student_answer":"router.beforeEach((to, from, next) => {\n\t//所有需要检测登录状态的路由页面都放在这个数组里面\n\t\tconst nextRoute = [ 'home', 'otherPages'];\n\t\tvar isLogin = false\n\t\tif(getCookie('username')&&getCookie('password')){\n\t\t\tisLogin = true;\n\t\t\t console.log('isLogin:'+isLogin);\n\t\t}\n    \n    //nextRoute.indexOf(to.path.split('/')[1]) >= 0表示导航栏能够获取到数据，表示进入到了该页面中\n    if (nextRoute.indexOf(to.path.split('/')[1]) >= 0) {\n        //检测是不是未登录状态，如果登录了就不做处理（页面跳转到上面数组的哪就是哪），未登录就去登录页\n        if (!isLogin) {\n\t\t\t\t\t\tnext({\n\t\t\t\t\t\t\tpath: '/login'\n\t\t\t\t\t\t})\n     \t\talert('未登录，先登录')\n\t\t\t\t\t\tlocation.reload();\n\t\t\t\t\t \n        }\n    }\n    \n \n    //已登录的情况再去登录页，直接跳转至首页\n   \n    if (to.path.split('/')[to.path.split('/').length-1] === 'login') {\n    \t\n        if (isLogin) {\n            \talert('你已登录，直接进入首页')\n\t\t\t\t\trouter.push({path:'/home'})\n\t\t\t\t\tlocation.reload();\n        }\n    }\n    next();\n});\nexport default router;\n"},{"title":"Vue基础知识","questions_id":"uecyx-3qim4-rwk9o-v43sj8","json_path":"uecyx-3qim4-rwk9o-v43sj8.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"wbxm4-jf8q6k-lvt2ca-ze96mg","exam_name":"月考","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 谈谈对Vue响应原理的理解?","student_answer":"vue.js首先通过Object.defineProperty来对要监听的数据进行getter和setter劫持，当数据的属性被赋值/取值的时候，vue.js就可以察觉到并做相应的处理。\n通过订阅发布模式，我们可以为对象的每个属性都创建一个发布者，当有其他订阅者依赖于这个属性的时候，则将订阅者加入到发布者的队列中。利用Object.defineProperty的数据劫持，在属性的setter调用的时候，该属性的发布者通知所有订阅者更新内容。\nVue 数据响应核心就是使用了 Object.defineProperty,\n观察者模式 ( 发布者-订阅者模式 ) vue 的响应式系统依赖于三个重要的类：Dep 类、Watcher 类、Observer 类。Dep 类作为发布者的角色，Watcher 类作为订阅者的角色，Observer 类则是连接发布者和订阅者的纽带，决定订阅和发布的时机。\n数据的双向绑定\n数据的双向绑定即数据和视图之间的同步，视图随着数据变化而变化，反之亦然。我们知道 Vue 是支持数据的双向绑定的，主要应用于表单，是通过 v-model 指令来实现的。而通过上面介绍的知识我们是可以知道如何实现视图随着数据变化的，那么如何让数据也随着视图变化而变化呢？其实也很简单，只要给有 v-model 指令的节点监听相应的事件即可，在事件回调中来改变相应的数据。这一切都 Compile 类中完成，假设有一个 input 标签应用了 v-model 指令，在开始编译模板时，遇到 v-model 指令时会执行：更新 dom 节点的值，订阅者订阅，事件监听。"}]