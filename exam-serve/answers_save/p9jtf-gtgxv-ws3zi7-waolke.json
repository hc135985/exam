[{"title":"使用async函数实现多张图片的依次加载（哪张加载完哪张添加到页面）","questions_id":"5oxqyl-8dnbaa-3dt3o9-qrecrk","json_path":"5oxqyl-8dnbaa-3dt3o9-qrecrk.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用async函数实现多张图片的依次加载（哪张加载完哪张添加到页面）\n\n```js\n// 封装加载图片的promise  \nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}   \nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fAsync(imgs){\n   // write your code here\n}\n\nfAsync(imgs);\n```","student_answer":"let loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n       let img = document.createElement('img')\n            img.src = src\n            document.body.append(img)\n            setTimeout(() => {\n                resolve(true)\n            }, 1000)\n\nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fSync(imgs) {\n        for (let i of imgs) {\n            await loadImg(i)\n        }\n    }\n   fSync(imgs);\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"vue自定义指令","questions_id":"6ivrh-g7kp8a-2gixkg-p117t","json_path":"6ivrh-g7kp8a-2gixkg-p117t.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"## 阅读如下代码，写出代码的功能，输入和输出\n```js\nVue.filter('formatDate', function(value){\n  let date = new Date();\n  date.setTime(value);\n  let year = date.getFullYear(),\n      month = (date.getMonth() + 1).toString().padStart(2, '0'),\n      day = date.getDate().toString().padStart(2, '0'),\n      hour = date.getHours().toString().padStart(2, '0'),\n      min = date.getMinutes().toString().padStart(2, '0'),\n      sec = date.getSeconds().toString().padStart(2, '0');\n  return `${year}-${month}-${day} ${hour}:${min}:${sec}`\n});\n```","student_answer":"Vue.filter('formatDate', function(value){   //Vue filter格式化时间戳时间成标准日期格式\n  let date = new Date();         //new 一个date的实例 现在的时间\n  date.setTime(value);          //设置value\n  let year = date.getFullYear(),     //date.getFullYear 今年\n      month = (date.getMonth() + 1).toString().padStart(2, '0'), //电脑的月份+1 是人过的月份 转成字符串 padStart()用于头部补全\n      day = date.getDate().toString().padStart(2, '0'), //得到日转成字符串 padStart()用于头部补全 \n      hour = date.getHours().toString().padStart(2, '0'),//得到小时转成字符串 padStart()用于头部补全\n      min = date.getMinutes().toString().padStart(2, '0'),//得到分钟转成字符串 padStart()用于头部补全\n      sec = date.getSeconds().toString().padStart(2, '0');//得到秒转成字符串 padStart()用于头部补全\n  return `${year}-${month}-${day} ${hour}:${min}:${sec}` //2019 5 18 \n});"},{"title":"vue自定义指令","questions_id":"9wck8-qt73nd-0v6s8-f6jyid","json_path":"9wck8-qt73nd-0v6s8-f6jyid.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"## 阅读如下代码，写出代码的功能，输入和输出\n```js\nVue.filter('toThousandFilter', function(num){\n  return (+num || 0).toString().replace(/^-?\\d+/g, m => m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ','))\n});\n```","student_answer":"Vue.filter('toThousandFilter', function(num){  //过滤toThousandFilter 函数\n  return (+num || 0).toString().replace(/^-?\\d+/g, m => m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ','))\n});\n//返回 函数函数(Num){ref(num或者0).转成字符串.替换”开头后面跟着至少一个数字结尾的数，m=>m)替换正向零宽断言，匹配三个数字字符\n"},{"title":"Vue导航守卫做鉴权处理","questions_id":"42cuvb-7216fb-zlkab2-wwns3d","json_path":"42cuvb-7216fb-zlkab2-wwns3d.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"wbxm4-jf8q6k-lvt2ca-ze96mg","exam_name":"月考","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 在Vue中我们可以使用导航守卫做鉴权，现有要求如下：  \n可以根据getToken()是否返回token判断  \n- 1.如果用户已经登陆  \n  - a. 如果用户要去/login页面，则重定向到/路径  \n  - b. 如果用户要去其他页面，则不做处理直接跳转    \n- 2.如果用户未登陆  \n  - a. 如果用户要去的页面在白名单内，则不做处理直接跳转  \n  - b. 如果用户要去的页面不在白名单内，则重定向到/login页面，并把要去的页面路径作为查询字符串的query的值\n\n```js\nimport router from './router'\nimport { getToken } from '@/utils/auth' // getToken from cookie\n\nconst whiteList = ['/login', '/register', '/auth-redirect']// no redirect whitelist\n\nrouter.beforeEach((to, from, next) => {\n  if (getToken()) { // determine if there has token\n    // write your code here\n  } else {\n    // write your code here\n  }\n})\n```","student_answer":"import router from './router'\nimport { getToken } from '@/utils/auth' // getToken from cookie\n\nconst whiteList = ['/login', '/register', '/auth-redirect']// no redirect whitelist\n\nrouter.beforeEach((to, from, next) => {\n  if (getToken()) { // determine if there has token\n    // write your code here\n     if (to.path === '/login') {\n      next({ path: '/' })\n    } else {\n      if (getToken.getters.roles.length === 0) {\n        console.log('roles====0')\n        getToken.dispatch('GetInfo').then(res => { // 拉取用户信息\n          const roles = res.data.roles // note: roles must be a array! such as: ['editor','develop']\n          console.log('roles?', roles)\n          getToken.dispatch('GenerateRoutes', { roles }).then(() => { // 根据roles权限生成可访问的路由表\n           router.addRoutes(getToken.getters.addRouters) // 动态添加可访问路由表\n            next({ ...to, replace: true }) // hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record\n          })\n        }).catch(() => {\n          getToken.dispatch('FedLogOut').then(() => {\n            Message.error('验证失败,请重新登录')\n            next({ path: '/login' })\n          })\n        })else {\n        \n        next() // 当有用户权限的时候，说明所有可访问路由已生成 如访问没权限的全面会自动进入404页面\n      }\n  } else {\n    // write your code here\n    if (whiteList.indexOf(to.path) !== -1) {\n      next()\n    } else {\n      next('/login')\n    }\n  }\n  }\n})"}]