[{"title":"类的抽象","questions_id":"c7y73-e0nft-6rplem-daxvxe","json_path":"c7y73-e0nft-6rplem-daxvxe.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"## 使用ES6的Class完成如下功能\n阿里云产品线十分丰富，拥有ECS、RDS等数百款产品，每个产品都具有一些通用属性，例如：  \nID（id），地域（region），名称（name），同时每个产品又包含自己特有的属性。 ECS拥  \n有实例（instance）属性，可选值有ecs.t1.small、ecs.t3.small、ecs.t1.large RDS  \n拥有数据库类型（dbType）属性，可选值有mysql、mssql、PPAS 请使用你的面向对象知识，  \n基于ES6语法编写ECS、RDS两个类，并实现如下方法：   \n- 1. config() 返回一个字面量对象，可以拿到所有的成员变量。  \n- 2. buy() 返回一个URL，格式https://www.aliyun.com/buy?id=xxx&region=xxx&name=xxx&每个产品自己特有的成员变量","student_answer":" let instaceEnum = {\n            t1s: \"ecs.t1.small\",\n            t3s: \"ecs.t3.small\",\n            t1l: \"ecs.t1.large\"\n        }\n        //dbType 属性值let\n    dbTypeEnum = {\n            mysql: \"mysql\",\n            mssql: \"mssql\",\n            PPAS: \"PPAS\"\n        }\n        // 定义父类， 名字是自己取的\n    class Product {\n        // 通过构造器接收属性值_id、 _region、 _name\n        constructor(_id, _region, _name) {\n                //增加ID属性\n                this.id = _id;\n                // 增加地域（ region） 属性 \n                this.region = _region;\n                // 增加名称（name）属性    \n                this.name = _name;\n            }\n            // 返回所有成员变量  \n        config() {\n                return this;\n            }\n            // 获得URL \n        buy() {\n            // 设置返回URL的默认值    \n            var url = \"https://www.aliyun.com/buy?\";\n            // 设置一个空数组，用于存放参数      \n            var urlArr = [];\n            for (let key in this) {\n                // 判断是否存在某属性，      \n                // 这里也可以用this.hasOwnProperty(key)   \n                if (this[key])\n                    urlArr.push(key + \"=\" + this[key]);\n                // 拼接后放到数组中      \n            } // 将urlArr以\"&\"分割转为字符串  \n            url += urlArr.join(\"&\");\n            return url;\n        }\n    }\n    // 定义子类ECS继承了父类\n    Productclass ECS extends Product {\n        // 接收通用属性_id,_region,_name与独有的实例（instance）属性  \n        constructor(_id, _region, _name, _instance) {\n            // 将通用属性传递给父类      \n            super(_id, _region, _name);\n            // 增加实例（instance）属性       \n            this.instance = _instance;\n        }\n    }\n    // 定义子类RDS继承了父类\n   Productclass RDS extends Product {\n        // 接收通用属性_id,_region,_name与独有的数据库类型（dbType）属性  \n        constructor(_id, _region, _name, _dbType) {\n            // 将通用属性传递给父类   \n            super(_id, _region, _name);\n            // 增加数据库类型（dbType）属性   \n            this.instance = _dbType;\n        }\n    }"},{"title":"使用类实现任务调度","questions_id":"sue8v-wa50ws-jss7qm-592yt8","json_path":"sue8v-wa50ws-jss7qm-592yt8.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用js实现以下效果 \nvar priorityQueue = new PriorityQueue();  \npriorityQueue.enqueue('优先级1-1', 1);  \npriorityQueue.enqueue('优先级3-1', 3);  \npriorityQueue.enqueue('优先级1-2', 1);  \npriorityQueue.enqueue('优先级2-1', 2);  \npriorityQueue.print();  \n// 优先级1-1 优先级1-2 优先级2-1 优先级3-1 priorityQueue.dequeue();   \n```js\nclass PriorityQueue{\n    constuctor(obj){\n        this.arr=[];\n    }\n    enqueue(str,num){\n        // write your code here\n    }\n    print(){\n       // write your code here \n    }\n}\n```","student_answer":"function Queue() {\n    //初始化队列（使用数组实现）\n    var items = []\n\n    //入队\n    this.enqueue = function (ele) {\n        items.push(ele)\n    }\n\n    //出队\n    this.dequeue = function () {\n       return items.shift()\n    }\n\n    //返回首元素\n    this.front = function () {\n        return items[0]\n    }\n\n    //队列是否为空\n    this.isEmpty = function () {\n        return items.length == 0\n    }\n\n    //清空队列\n    this.clear = function () {\n        items = []\n    }\n\n    //返回队列长度\n    this.size = function () {\n        return items.length\n    }\n\n    //查看列队\n    this.show = function () {\n        return items\n    }\n}\n\nvar queue = new Queue();\n\n"},{"title":"访问器属性的应用","questions_id":"txtcbb-7qmgwa-kwpbgu-08tn5qe","json_path":"txtcbb-7qmgwa-kwpbgu-08tn5qe.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请实现以下需求：\n1. 声明一个变量a = 10；\n2. 声明一个变量b，b的值永远自动的保持为a的2倍；\n\n效果如下，\nvar a = 10;\nvar b;\n// 自行实现绑定\n\n最后打印的结果如下：\nconsole.log(a); // 10\nconsole.log(b); // 20\n\na = 30;\nconsole.log(a); // 30\nconsoel.log(b); // 60","student_answer":"b=a*2"},{"title":"使用async函数实现多张图片的依次加载（第一张加载完之后才能加载第二张）","questions_id":"fl7dll-xh6eo-hpri8a-edulg","json_path":"fl7dll-xh6eo-hpri8a-edulg.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用async函数实现多张图片的依次加载（第一张加载完之后才能加载第二张）\n\n```js\n// 封装加载图片的promise  \nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}   \nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fSync(imgs){\n   // write your code here\n}\n\nfSync(imgs);\n```","student_answer":"let loadImg = (src) => {\n        return new Promise((resolve, reject) => {\n            let img = document.createElement('img')\n            img.src = src\n            document.body.append(img)\n            setTimeout(() => {\n                resolve(true)\n            }, 1000)\n        })\n    }\nconst imgs = ['url1', 'url2', 'url3'];\n    // 依次加载图片\n    async function fSync(imgs) {\n        for (let i of imgs) {\n            await loadImg(i)\n        }\n    }\n    fSync(imgs);\n \n\n"}]