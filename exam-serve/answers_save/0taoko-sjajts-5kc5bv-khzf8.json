[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"window.addEventListener('resize', function() {\n             // 变化后需要做的事\n\t\t\tvar w = document.documentElement.clientWidth;//获取页面可见高度\n        var open=false;\n           if(w>=600){\n               if(this.open){\n                   console.log(\"hello world\")\n                  }\n                 this.open=false\n                }\n}"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"一、函数式创建（无状态组件） ：\n1.组件不会被实例化，整体渲染性能得到提升 只有一个render方法  \n2.只负责根据传入的props来展示，不涉及state   \n3.组件不能访问this对象 \n4.无法访问生命周期的方法\n二、React.createClass :有状态的组件，\n1.这些组件是要被实例化的，\n2.并且可以访问组件的生命周期方法 \n3.自动绑定this\n三、React.Component:\n1.成员函数不会自动绑定this，需要开发者手动绑定\n2.创建的组件，其状态state是在constructor中像初始化组件属性一样声明的  \n3.创建组件时配置这两个对应信息时，他们是作为组件类的属性"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        const image = new Image();\n        image.onload = function() {\n           resolve(image);\n         };\n        image.onerror = function() {\n        reject(new Error('加载不出图片 ' + src));\n         };\n        image.src = src;\n    })\n}"}]