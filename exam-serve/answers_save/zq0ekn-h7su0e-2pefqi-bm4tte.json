[{"title":"青蛙跳台阶","questions_id":"cy51s-cirofn-vxvrne-hgh3tk","json_path":"cy51s-cirofn-vxvrne-hgh3tk.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"用js实现青蛙跳台阶，一共十个台阶，青蛙每次跳一个或者两个台阶，打印出所有可能的跳跃方法（例如：[1,1,1,1,1,1,1,1,1,1]/[2,2,2,2,2]/[1,1,1,1,1,1,1,1,2]）","student_answer":"let all = 0; // 设置一个变量   \nfunction fun(num, res) {\n    if (num === 0) { // 当num为0 时  \n        res = []; // 数组为空  证明还没有开始\n    }\n    var i = 1;  //  i 的作用是  设置第一步的步数\n    while (i < 3) {  // 这里 限定  步数不能 大于 3   也就是说  步数只能是  1 ， 2\n        if (i + num <= 10) {    // 这里计算  每一步的 总和  如果 不满足10  就 往这个数组里添加追加一个 i\n            var arr = [...res]  // 将 res 这个数组 展开 \n            arr.push(i)    // 然后 将 下一步走的push到 新的数组里\n            if (i + num === 10) {  \n                all++;// 当  满足 第一个步数加上后面的步数等于 10 的时候  计算  第几种方法\n                console.log(all, 'res',arr)\n            } else {\n                fun(num + i, arr)   // 如果不满足  就 再次调用 这个函数   这里num+i  是计算  总共跳了多少步\n            }\n        }\n        i++  // 步数增加   等到  第一步 为1 的 时候的方法 完成之后  i++   计算  当 i= 2 的时候的 方法\n    }\n}\nfun(0)   // 传入一个参数 用来 计算 跳台阶的步数"},{"title":"大小文件读取","questions_id":"z9ndnc-qhzc6-wb5vju-0pvnzk","json_path":"z9ndnc-qhzc6-wb5vju-0pvnzk.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"封装一个方法适配大小文件的读取，限定值2M","student_answer":"let fs = require(\"fs\");\nlet path = require(\"path\");\nlet startpath = path.join(__dirnome,\"main\")// 获取当前文件夹绝对路径\n\nfunction File(startpath){\n\tlet onpath = fs.existsSync(startpath) // 判断文件夹是否存在\n    if(!onpath){\n      return \n    }\n  // 获取该路径下所有的子级\n  let child = fs.readdirSync(startpath);// 返回的是一个数组\n  // 对这个数组进行遍历\n  child.forEach(val => {\n  \t\t// 获取每一个子级的绝对路径\n    let childpath = path.join(startpath,val);\n    // 获取文件信息\n    let isfile = fs.statSync(childpath); \n    if(isfile.isFile()){ //   判断是否文件  如果是文件   进行以下操作\n    \tlet size = isfile.size / 1024 / 1024; // 获取文件的大小\n      if(size > 2){  // 判断文件大小   \n      \tlet bigData = fs.createReadStream(childpath); // 如果文件 > 2m   则用流式读取\n        console.log(bigData)\n      }else{\n      \t\tlet littleData = fs.readFileSync(childpath) // 如果文件 < 2m  则正常读取\n      }\n    }else{ // 如果 此路径是文件夹，再次进行判断，调用这个函数 将该路径作为参数传进去\n    File(childpath)  \n    }\n  })\n}\nFile(startpath)"},{"title":"实现多维数组转换为一维数组","questions_id":"60gn1-9nj3mi-hv4xz-t6ecp","json_path":"60gn1-9nj3mi-hv4xz-t6ecp.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"封装一个函数可以使得n维数组转换为1维数组，输出","student_answer":"let arr = [1,2,4,9,[5,[8,7,[7,5]]]];\nfunction Array(arr){  \n\twhile(arr.some((val)=>{  //进行循环遍历  \n    Array.isArray(val)  // 判断  这个数组中 的每一项是否为数组 如果是数组 返回 布尔值  进行下面的操作\n    })){\n    \tarr = [].concat(...arr)   // 满足条件  将 arr 展开 进行拼接 \n    }\n  return arr // 最后将这个数组返回\n}\nconsole.log(Array(arr))  // 调用这个函数  打印结果"},{"title":"实现一个评星方法","questions_id":"tak6bp-2bpj3-xh6jpg-elkb8u","json_path":"tak6bp-2bpj3-xh6jpg-elkb8u.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"实现一个评星方法\n说明\n* 可根据传入的评分和总数，返回评星结果（用 ★ 和 ☆ 描述）\n* 评分必选项，四舍五入，总数可选，大于0的整数，默认为5\n* 对于评分为空或小于0、评分大于总数、总数小于0或总数非整数的情况，返回'errror'\n示例\n```\ngetRate(4); // ★★★★☆\ngetRate(4, 8); // ★★★★☆☆☆☆\ngetRate(3.4); //  ★★★☆☆\ngetRate(5, 2); // 'error'\ngetRate(-2); // 'error'\ngetRate(3, 5.5); // 'error'\n```\n\n\n\n\n\n\n\n\n\n\n\n","student_answer":"function getRate(fen=5, all) {\n    if (arguments.length == 1) {  // 总分可选\n        return str = \"★\".repeat(fen);\n    }\n  // 先进行判断  如果或小于0、评分大于总数、总数小于0或总数非整数\n    if (fen <= 0 || fen > all || all < 0 || !Number.isInteger(all)) {  \n        return \"error\"\n    } else { // 反之 则 打印评分\n      \n        let str = \"★\".repeat(fen); // 输出 评分的个数\n        let str2 = \"☆\".repeat(all - fen); // 计算白色星星的个数\n        return str.concat(str2)  // 进行拼接\n    }\n}\nconsole.log(getRate(3, 5)) // 进行调用\nconsole.log(getRate(9, 0.5))\nconsole.log(getRate(4))\nconsole.log(getRate(3.4))\ncosole.log(getRate(5, 2))\n"}]