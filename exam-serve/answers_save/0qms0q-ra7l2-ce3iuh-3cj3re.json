[{"title":"匿名自执行函数的应用","questions_id":"vh80e-3d3g3o-6hy47e-ib2x4c","json_path":"vh80e-3d3g3o-6hy47e-ib2x4c.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"heinan","user_id":"fdjfr-msxp8a","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"代码如下：\n```js\nfor (var i = 0; i < 5; i++) {\n    setTimeout(function () {\n        console.log(i)\n    })\n}\n输出\n5\n5\n5\n5\n5\n```\n修改上面代码，打印结果要求为：0,1，2，3，4","student_answer":"  for (let i = 0; i < 5; i++) {\n    setTimeout(function () {\n        console.log(i)\n    })\n  }\n  // 输出\n  // 5\n  // 5\n  // 5\n  // 5\n  // 5\n  // 修改上面代码，打印结果要求为：0,1，2，3，4"},{"title":"react生命周期","questions_id":"xt05yo-prna5g-f7zqo-ltl5rh","json_path":"xt05yo-prna5g-f7zqo-ltl5rh.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"dingshaoshan","user_id":"ypay2t-7uxsd","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"# react常用生命周期图\n\n## 请在 “其他“ 中查看图片。 \n \n\n\n如图是react常用生命周期图，请阅读图，并在1，2，3，4处填写对应的生命周期","student_answer":"初始化\n1、getDefaultProps()\n\n设置默认的props，也可以用dufaultProps设置组件的默认属性.\n\n2、getInitialState()\n\n在使用es6的class语法时是没有这个钩子函数的，可以直接在constructor中定义this.state。此时可以访问this.props\n\n3、componentWillMount()\n\n组件初始化时只调用，以后组件更新不调用，整个生命周期只调用一次，此时可以修改state。\n\n4、 render()\n\nreact最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行。此时就不能更改state了。\n\n5、componentDidMount()\n\n组件渲染之后调用，只调用一次。\n\n更新\n6、componentWillReceiveProps(nextProps)\n\n组件初始化时不调用，组件接受新的props时调用。\n\n7、shouldComponentUpdate(nextProps, nextState)\n\nreact性能优化非常重要的一环。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候\n\n8、componentWillUpdata(nextProps, nextState)\n\n组件初始化时不调用，只有在组件将要更新时才调用，此时可以修改state\n\n9、render()\n\n组件渲染\n\n10、componentDidUpdate()\n\n组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。\n\n卸载\n11、componentWillUnmount()\n\n组件将要卸载时调用，一些事件监听和定时器需要在此时清除。"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"1、无状态函数式组件\nfunction HelloComponent(props, /* context */) {\n  return <div>Hello {props.name}</div>\n}\nReactDOM.render(<HelloComponent name=\"Sebastian\" />, mountNode) \n2、React.createClass\nvar InputControlES5 = React.createClass({\n    propTypes: {//定义传入props中的属性各种类型\n        initialValue: React.PropTypes.string\n    },\n    defaultProps: { //组件默认的props对象\n        initialValue: ''\n    },\n    // 设置 initial state\n    getInitialState: function() {//组件相关的状态对象\n        return {\n            text: this.props.initialValue || 'placeholder'\n        };\n    },\n    handleChange: function(event) {\n        this.setState({ //this represents react component instance\n            text: event.target.value\n        });\n    },\n    render: function() {\n        return (\n            <div>\n                Type something:\n                <input onChange={this.handleChange} value={this.state.text} />\n            </div>\n        );\n    }\n});\nInputControlES6.propTypes = {\n    initialValue: React.PropTypes.string\n};\nInputControlES6.defaultProps = {\n    initialValue: ''\n};\n3、React.Component\nclass InputControlES6 extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // 设置 initial state\n        this.state = {\n            text: props.initialValue || 'placeholder'\n        };\n\n        // ES6 类中函数必须手动绑定\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({\n            text: event.target.value\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                Type something:\n                <input onChange={this.handleChange}\n               value={this.state.text} />\n            </div>\n        );\n    }\n}\nInputControlES6.propTypes = {\n    initialValue: React.PropTypes.string\n};\nInputControlES6.defaultProps = {\n    initialValue: ''\n};\n"},{"title":"分别使用DOM0级DOM2级给一个DIV绑定事件","questions_id":"1gsxn-k09c2j-gq8peo-sohe9","json_path":"1gsxn-k09c2j-gq8peo-sohe9.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"分别使用DOM0级DOM2级给一个button绑定事件，并且描述这两种方式的区别","student_answer":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta content=\"width=device-width, initial-scale=1.0\"\n        name=\"viewport\">\n  <meta content=\"ie=edge\"\n        http-equiv=\"X-UA-Compatible\">\n  <title>Document</title>\n</head>\n<body>\n  <button id=\"btn\"></button> \n  <script>\n\n\n\n  var btn=document.getElementById('btn');\n  //1、dom0级\n  btn.onclick = function() {\n      alert('i am isaac!');\n  }\n  //dom0级事件只能触发事件冒泡阶段不能触发事件捕获阶段\n\n\n\n\n  //2、dom2级\n\n  box2.addEventListener(\"click\",function(){\n        console.log(\"c\");\n  },false);\n\n  //dom2事件\n  // 对于精确的元素不区分事件捕获和事件冒泡，事件的执行顺序是按照绑定顺序来的。\n\n  //同一个元素绑定相同的事件，后面的不会覆盖前面的。因为DOM2级事件绑定不是给元素添加属性是直接添加的事件。等同于给一个元素绑定了多个事件。\n\n  </script>\n</body>\n</html>\n"},{"title":"最少两种方式实现点击每个li都弹出下标","questions_id":"puaqas-1modca-2y04jh-brcz59g","json_path":"puaqas-1modca-2y04jh-brcz59g.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"<ul id=”test”>\n    <li>这是第一条</li>\n    <li>这是第二条</li>\n    <li>这是第三条</li>\n</ul>","student_answer":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta content=\"width=device-width, initial-scale=1.0\"\n        name=\"viewport\">\n  <meta content=\"ie=edge\"\n        http-equiv=\"X-UA-Compatible\">\n  <title>Document</title>\n</head>\n<body>\n  <ul id=\"myul\">\n    <li>这个第一条</li>\n    <li>这个第一条</li>\n    <li>这个第一条</li>\n  </ul>\n  <script>\n  //1、方式1\n  var ulObj = document.getElementById(\"myul\"); \n  ulObj.onclick = function (event) { \n    var tg = event.target; \n    var liArray = ulObj.getElementsByTagName(\"li\"); \n    for (var i = 0; i < liArray.length; i++) { \n        if (liArray[i] === tg) { \n            alert(i + 1); \n            } \n        } \n    }\n    //2、方式2\n    var liArray = document.getElementById(\"myUl\").getElementsByTagName(\"li\"); \n        for (var i = 0; i < liArray.length; i++) { \n            (function () { \n                var n = i; \n                liArray[i].onclick = function () { \n                    alert(n + 1); \n                } \n            })(i) \n        }\n\n\n\n  </script>\n</body>\n</html>\n"}]