[{"title":"使用async函数实现多张图片的依次加载（哪张加载完哪张添加到页面）","questions_id":"5oxqyl-8dnbaa-3dt3o9-qrecrk","json_path":"5oxqyl-8dnbaa-3dt3o9-qrecrk.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用async函数实现多张图片的依次加载（哪张加载完哪张添加到页面）\n\n```js\n// 封装加载图片的promise  \nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}   \nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fAsync(imgs){\n   // write your code here\n}\n\nfAsync(imgs);\n```","student_answer":"// 封装加载图片的promise \nlet loadImg = (src) => {\n        return new Promise((resolve, reject) => {\n            let img = document.createElement('img')\n            img.src = src\n            document.body.append(img)\n            setTimeout(() => {\n                resolve(true)\n            }, 1000)\n        })\n    }\n    const imgs = ['url1', 'url2', 'url3'];\n    // 依次加载图片\n    async function fASync(imgs) {\n        for (let i of imgs) {\n            await loadImg(i)\n        }\n    }\n    fASync(imgs);\n"},{"title":"vue自定义指令","questions_id":"6ivrh-g7kp8a-2gixkg-p117t","json_path":"6ivrh-g7kp8a-2gixkg-p117t.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"## 阅读如下代码，写出代码的功能，输入和输出\n```js\nVue.filter('formatDate', function(value){\n  let date = new Date();\n  date.setTime(value);\n  let year = date.getFullYear(),\n      month = (date.getMonth() + 1).toString().padStart(2, '0'),\n      day = date.getDate().toString().padStart(2, '0'),\n      hour = date.getHours().toString().padStart(2, '0'),\n      min = date.getMinutes().toString().padStart(2, '0'),\n      sec = date.getSeconds().toString().padStart(2, '0');\n  return `${year}-${month}-${day} ${hour}:${min}:${sec}`\n});\n```","student_answer":"//格式化时间戳时间成标准日期格式\nVue.filter('formatDate', function(value){\n \t//设置当前时间戳\n  let date = new Date();\n  date.setTime(value);\n  //获取年份\n  let year = date.getFullYear(),\n      //获取月份 月份为0-11 所以要加1\n      month = (date.getMonth() + 1).toString().padStart(2, '0'),\n      //获取日期\n      day = date.getDate().toString().padStart(2, '0'),\n      //获取时\n      hour = date.getHours().toString().padStart(2, '0'),\n      //获取分\n      min = date.getMinutes().toString().padStart(2, '0'),\n      //获取秒\n      sec = date.getSeconds().toString().padStart(2, '0');\n  return `${year}-${month}-${day} ${hour}:${min}:${sec}`\n});"},{"title":"vue自定义指令","questions_id":"9wck8-qt73nd-0v6s8-f6jyid","json_path":"9wck8-qt73nd-0v6s8-f6jyid.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"## 阅读如下代码，写出代码的功能，输入和输出\n```js\nVue.filter('toThousandFilter', function(num){\n  return (+num || 0).toString().replace(/^-?\\d+/g, m => m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ','))\n});\n```","student_answer":"在Vue中当我们想要对一个数值进行处理时（改变格式、大小，类型，过滤等）可以使用filter\n\n当项目中多次需要使用过滤器时，可以新建filter文件，用以创建项目所需的过滤器\n//千分位的过滤\nVue.filter('toThousandFilter', function(num){\n  return (+num || 0).toString().replace(/^-?\\d+/g, m => m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ','))\n});"},{"title":"Vue导航守卫做鉴权处理","questions_id":"42cuvb-7216fb-zlkab2-wwns3d","json_path":"42cuvb-7216fb-zlkab2-wwns3d.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"wbxm4-jf8q6k-lvt2ca-ze96mg","exam_name":"月考","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 在Vue中我们可以使用导航守卫做鉴权，现有要求如下：  \n可以根据getToken()是否返回token判断  \n- 1.如果用户已经登陆  \n  - a. 如果用户要去/login页面，则重定向到/路径  \n  - b. 如果用户要去其他页面，则不做处理直接跳转    \n- 2.如果用户未登陆  \n  - a. 如果用户要去的页面在白名单内，则不做处理直接跳转  \n  - b. 如果用户要去的页面不在白名单内，则重定向到/login页面，并把要去的页面路径作为查询字符串的query的值\n\n```js\nimport router from './router'\nimport { getToken } from '@/utils/auth' // getToken from cookie\n\nconst whiteList = ['/login', '/register', '/auth-redirect']// no redirect whitelist\n\nrouter.beforeEach((to, from, next) => {\n  if (getToken()) { // determine if there has token\n    // write your code here\n  } else {\n    // write your code here\n  }\n})\n```","student_answer":"const router = new VueRouter({ ... }) //这是路由配置，我就不多说了\n\nconst whiteList = ['/error', '/register/regindex', '/register/userauthent',  '/register/submit'] // 路由白名单\nvueRouter.beforeEach(function(to,from,next){\n    console.log(\"进入守卫\");\n    if (userInfo.user_id>0){\n        console.log(\"登录成功\");\n        next();   //记得当所有程序执行完毕后要进行next()，不然是无法继续进行的;\n    }else{\n        console.log(\"登录失败\");\n        getUserInfo.then(res => {\n            if(res){\n                if (res.user_id){\n                    if (res.status == 4) {\n                        //账号冻结\n                        next({ path: '/error', replace: true, query: { noGoBack: true } })\n                    }\n                    if (res.status == 3) {\n                        //认证审核中\n                        next({ path: '/register/submit', replace: true, query: { noGoBack: true } })\n                    }\n                    if (res.status != 1 && res.status != 3) {\n                        if (!res.mobile ) {\n                            next({ path: '/register/regindex', replace: true, query: { noGoBack: true }})\n                        } else {\n                            //绑定完手机号了\n                            next({ path: '/register/userauthent', replace: true, query: { noGoBack: true } })\n                        }\n                    }\n                    next();  //记得当所有程序执行完毕后要进行next()，不然是无法继续进行的;\n                }else{\n                    if (whiteList.indexOf(to.path) !== -1) { // 在免登录白名单，直接进入\n                        next();  //记得当所有程序执行完毕后要进行next()，不然是无法继续进行的;\n                    }else{\n                        next({ path: '/register/regindex', replace: true, query: { noGoBack: true }})\n                    } \n                }\n                \n            }else{\n                \n                }\n            }\n            \n        }).catch(()=>{\n            //跳转失败页面\n            next({ path: '/error', replace: true, query: { noGoBack: true }})\n        })\n    }\n    \n    \n});\n\nexport default router"}]