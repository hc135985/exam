[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"   let flag = false\n        window.onresize=function(){\n            flag = this.innerWidth>=600?flag = this.innerWidth>603?false:true:false  \n            if(flag) console.log(\"hello\")\n        }"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"react组件创建方式：\n\t1.函数式创建组件 （木偶组件 无状态组件）\n   2.es6 类声明继承式创建组件 （状态组件）\n   3.es5 原生方式创建组件 React.createClass() (即将被废弃)\n三种区别：\n\t1.函数式组件 ： 也叫无状态组件，内部并没有用于保存数据状态\t的static  经常用于数据展示 因为其性能比较高 ，内部不需要做逻辑操作  代码的可读性更好，减少代码的冗余  \n    特点：(1)组件不会被实例化 ，整体渲染性能得到提升\n    \t\t(2)组件不能访问this对象\n    \t\t(3)组件无法访问生命周期的方法\n    \t\t(4)无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用 \n   2.es5 原生创建式组件  与函数式组件比 是状态组件 要被实例化的，并且可以访问组件的生命周期方法\n   \t\t缺点：(1) 导致不必要的性能开销，增加代码过时的可能性。\n        \t(2) React.createClass的mixins不够自然、直观；\n   3.es6 React.component \n\t\t特点：(1)状态组件  其成员函数不会自动绑定this，需要手动绑定，否则this不能获取当前组件实例对象\n          (2)更好实现代码复用。\n 2.vue 组件\n \t全局 创建 和局部创建组件"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"function loadImg (src) {\n  return new Promise(function(resolve, reject) {\n    const image = new Image();\n    image.onload = ()=> {\n      resolve(image);\n    };\n    image.onerror = () =>{\n      reject(\"error\");\n    };\n    image.src = src;\n  });\n}"}]