[{"title":"computed 和 watch 区别","questions_id":"joo9h2-q79phw-pskuido-ua4t7k","json_path":"joo9h2-q79phw-pskuido-ua4t7k.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"computed 和 watch 区别?\n\n\n\n\n\n\n\n\n\n\n\n","student_answer":"computed 多个值决定一个值，具有缓存性。\ncomputed主要是处理逻辑运算，computed来存储需要处理的数据值，它有存储的机制，只有改变时才执行。\n\nwatch 一个值决定多个值，无缓存性，页面重新渲染时值不变化也会执行。\nwatch主要是监听数据变化，可以监听数据来源的三个部分：props,data,computed内的数据，然后它还提供两个参数（new,old）,顺序一定是新值、旧值。 "},{"title":"实现双向数据绑定","questions_id":"nodsz-nme56x-51nrc-tklsfn","json_path":"nodsz-nme56x-51nrc-tklsfn.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"使用js实现一个数据双向绑定效果, input中输入的内容同步到p标签中\n```\n<div id=\"app\">\n    <input type=\"text\" id=\"txt\">\n    <p id=\"show-txt\"></p>\n</div>\n```","student_answer":"var obj = {};\nObject.defineProperty(obj, 'test', {\n　　set: (newVal)=>{\n　　　　document.getElementById('txt').value = newVal;\n　　　　document.getElementById('show_txt').innerHTML = newVal;\n　　}\n});\ndocument.addEventListener('keyup', (e)=>{\n　　obj.test = e.target.value;\n})"},{"title":"Vue导航守卫做鉴权处理","questions_id":"42cuvb-7216fb-zlkab2-wwns3d","json_path":"42cuvb-7216fb-zlkab2-wwns3d.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"wbxm4-jf8q6k-lvt2ca-ze96mg","exam_name":"月考","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 在Vue中我们可以使用导航守卫做鉴权，现有要求如下：  \n可以根据getToken()是否返回token判断  \n- 1.如果用户已经登陆  \n  - a. 如果用户要去/login页面，则重定向到/路径  \n  - b. 如果用户要去其他页面，则不做处理直接跳转    \n- 2.如果用户未登陆  \n  - a. 如果用户要去的页面在白名单内，则不做处理直接跳转  \n  - b. 如果用户要去的页面不在白名单内，则重定向到/login页面，并把要去的页面路径作为查询字符串的query的值\n\n```js\nimport router from './router'\nimport { getToken } from '@/utils/auth' // getToken from cookie\n\nconst whiteList = ['/login', '/register', '/auth-redirect']// no redirect whitelist\n\nrouter.beforeEach((to, from, next) => {\n  if (getToken()) { // determine if there has token\n    // write your code here\n  } else {\n    // write your code here\n  }\n})\n```","student_answer":"尊敬的老师，这个我们班还没有学到这里，我只找到了一些关于这方面的知识：\n在main.js中使用：\nrouter.beforeEach((to, from, next) => {   // 使用钩子函数对路由进行权限跳转\nconst role = localStorage.getItem('username');\n　　if ( !role && to.path !== '/login' && to.path !== '/register' ) {  // 如果用户不存在，并且访问的页面不是登录和注册，就前往登录页面\n　　　　next('/login');\n　　} else if ( to.meta.permission ) {  // 如果是管理员权限则可进入，这里只是简单的模拟管理员权限而已\n　　　　role === 'admin' ? next() : next('/403');\n　　} else {\n　　}\n})\n \n还有一种方法，是使用vue-router的重定向功能，实现路径的限制：\n在router的index.js中：\nexport default new Router({\nroutes: [\n　　{\n　　　　path: '/',\n　　　　redirect: '/home'  // 任何没有具体路径的访问，我都让它重定向到home主页，重定向在限制用户手动修改URL时误操作很管用\n　　},\n　　{\n　　　　path: '*',\n　　　　redirect: '/404'\n　　}\n]"},{"title":"Vue基础知识","questions_id":"uecyx-3qim4-rwk9o-v43sj8","json_path":"uecyx-3qim4-rwk9o-v43sj8.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"wbxm4-jf8q6k-lvt2ca-ze96mg","exam_name":"月考","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 谈谈对Vue响应原理的理解?","student_answer":"数据的定义:\n组件中定义数据{counter:0}；\n初始化过程中，会执行observe(data, this)；\n在observe（）过程中会将data这个对象劫持，通过Object.defineProperty将data上所有的属性绑定上getter和setter函数；（这是针对对象，对于数组，Vue通过改写数组的原生方法来劫持）；\n通俗的说就是只要谁获取了counter的值就会触发getter()；要是谁改变了counter的值就会触发setter();比如上述代码中的button绑定{{count}}的时候一定会触发getter();如果是count的值发生改变就一定会触发setter()\n\n.数据绑定:\n在页面元素button中绑定{{count}};\n在编译过程中，针对这个button会产生一个Watcher(vm, exp, cb(newValue,oldValue)),vm是Vue对象，exp是数据绑定的数据;cb（）的逻辑是用来更新页面。现在的问题是如何将数据的变化和Watcher关联起来。\n在这里用到了一个重要的思想就是发布订阅模式；Watcher初始化的时候会将Dep.target设置为this,也就是Watcher自己，同时会触发count的getter方法，getter里面会调用Dep的depend方法，depend方法会调用Watcher的addDep方法，addDep方法就是将Watcher自己存放在Dep的事件池里面。\n\n数据响应:\n当发生点击事件的时候，count的值改变，会触发setter里面的方法，这个方法会调用dep.notify()；它会告知Dep的事件池里的存放的Watcher去执行它的update（）方法；Watcher的update()方法；这个方法里面会获取count的新的值，给它的回调cb()，去更新视图。"}]