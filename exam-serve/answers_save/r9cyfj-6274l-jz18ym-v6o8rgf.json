[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"let str =  '';\n\twindow.onresize = function(){\n\t\t\tif(document.body.clientWidth>= 600){\n\t\t\t\t\tif(str === ''){\n\t\t\t\t\t\tstr='hello';\n\t\t\t\t\t\tconsole.log(str);\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t}\n\t}"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"react中创建组件的方式有三种：函数式定义；es5原生方式定义；es6形式的定义。\n三者的区别是：函数式定义是无状态的，这种方式代码的可读性更好，并且减少了大量冗余的代码。它的特点有：组件不会被实例化，整体渲染性能得到提升；组件不能访问this；无法访问生命周期；只负责根据传入的props来展示，不涉及到state状态的操作，只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用。\nes5原生方式即React.createClass。这种方式会自绑定函数方法，导致不必要的性能开销，增加代码过时的可能性。而且这种方式的mixins不够自然、直观，现在逐渐被废弃。\nes6形式即React.Component，是React目前极为推荐的创建有状态组件的方式。其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。有三种方式绑定this：在构造函数constructor中绑定；在调用函数时绑定；使用箭头函数来绑定。状态state是在constructor中像初始化。props属性类型和组件默认属性作为组件类的属性，不是组件实例的属性，所以使用类的静态属性配置。"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg = (url)=>{\n        return new Promise((resolve,reject)=>{\n            let img = new Image();\n                img.onload = ()=>{\n                    resolve(img);\n                }\n                img.src = url;\n        });\n    }\n    const imgs = [url1,url2,url3];\n\n    async function asyncfn(imgs) {\n        for(var i =0;i<imgs.length;i++){\n            await loadImg(imgs[i])\n        }\n    }\n    asyncfn(imgs);\n"},{"title":"防抖场景实现","questions_id":"pee5rm-didl4v-b5ty-eay7yo","json_path":"pee5rm-didl4v-b5ty-eay7yo.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"题目 有一个 input 查询框，每一次 change 都会触发一个“ a 函数”\n要求\n1.此 input 框的 change 请求 在间隔 0.3s 内的过滤掉\n2.提供一个包装函数，可以对上述的“ a 函数”请求过滤做统一的封装\n```\n<input id=\"input\" />\n```","student_answer":"function input(value) {\n         console.log(\"输入的内容\")\n     }\n const ipt = document.getElementById('input')\n \n function debounce(fun,delay){\n     let timer ;\n     return function(args){\n         const that = this\n         clearTimeout(timer)\n         timer = setTimeout(function(){\n             fun.call(that,args)\n         },delay)\n     }\n    }\n const debounceInput = debounce(input,300)\n ipt.addEventListener(\"change\",function(e){\n     debounceInput(e.target.value)\n })\n"}]