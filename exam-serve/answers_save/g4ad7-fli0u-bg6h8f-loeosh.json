[{"title":"匿名自执行函数的应用","questions_id":"vh80e-3d3g3o-6hy47e-ib2x4c","json_path":"vh80e-3d3g3o-6hy47e-ib2x4c.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"heinan","user_id":"fdjfr-msxp8a","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"代码如下：\n```js\nfor (var i = 0; i < 5; i++) {\n    setTimeout(function () {\n        console.log(i)\n    })\n}\n输出\n5\n5\n5\n5\n5\n```\n修改上面代码，打印结果要求为：0,1，2，3，4","student_answer":"for (let i = 0; i < 5; i++) {\n    setTimeout(function () {\n        console.log(i)\n    })\n}\n\n\nfor (var i = 0; i < 5; i++) {\n   (function(i){\n      setTimeout(function () {\n          console.log(i)\n       })\n    })(i)\n}"},{"title":"react生命周期","questions_id":"xt05yo-prna5g-f7zqo-ltl5rh","json_path":"xt05yo-prna5g-f7zqo-ltl5rh.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"dingshaoshan","user_id":"ypay2t-7uxsd","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"# react常用生命周期图\n\n## 请在 “其他“ 中查看图片。 \n \n\n\n如图是react常用生命周期图，请阅读图，并在1，2，3，4处填写对应的生命周期","student_answer":"1、shouldConponentUpdate\n2、ComponentDidMount\n3、ComponentDidUpdate"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"1、无状态函数组件\n    function myComponent(){\n    \t return <div>hellow</div>\n     }\n    组件不会被实例化，整体渲染性能得到提升\n    组件不能访问this对象\n    组件无法访问生命周期的方法\n    无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\n    无状态组件使得代码结构更加清晰，减少代码冗余，在开发过程中，尽量使用无状态组件\n    \n2、类组件 \n     React.Component\n     React.Component 形式非常适合高阶组件\n     它以更直观的形式展示了比mixins更强大的功能，并且HOC是纯净的JavaScript，不用担心他们会被废弃。\n     React.Component 在创建组件时配置这两个对应信息时，他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类的静态属性来配置的。 \n     React.Component创建的组件，其状态state是在constructor中像初始化组件属性一样声明的。\n\n3、原生组件\n     React.createClass\n     React.createClass 会自绑定函数方法（不像 React.Component 只绑定需要关心的函数）导致不必要的性能开销，增加代码过时的可能性。\n     React.createClass的mixins不够自然、直观"},{"title":"分别使用DOM0级DOM2级给一个DIV绑定事件","questions_id":"1gsxn-k09c2j-gq8peo-sohe9","json_path":"1gsxn-k09c2j-gq8peo-sohe9.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"分别使用DOM0级DOM2级给一个button绑定事件，并且描述这两种方式的区别","student_answer":"html:\n   <button id = \"btn\">按钮</button>\n\nscript:\n   const btn = document.getElementById(\"btn\")\ndom0:\n   btn.onClick = function(){\n   \t\tconsole.log(\"dom0级\")\n   }\n\ndom2级：\n   btn.addEventListener(\"click\" , function () {\n      console.log(\"dom2级\")\n   })\n\n区别：两个dom0级事件会被覆盖\n    两个dom2级事件不会被覆盖会依次执行"},{"title":"最少两种方式实现点击每个li都弹出下标","questions_id":"puaqas-1modca-2y04jh-brcz59g","json_path":"puaqas-1modca-2y04jh-brcz59g.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"<ul id=”test”>\n    <li>这是第一条</li>\n    <li>这是第二条</li>\n    <li>这是第三条</li>\n</ul>","student_answer":"html:\n   <ul id=\"uli\">\n      <li>1</li>\n      <li>2</li>\n      <li>3</li>\n   </ul>\n\nscript:\n方法1：\n    const uli = document.getElementById(\"uli\");\n    const li = [...document.querySelectorAll(\"li\")]\n    for (var i = 0; i < li.length; i++) {\n        (function (n) {\n            li[i].onclick = function () {\n                console.log(n)\n             }\n        })(i)\n     }\n\n方法2：\n    const uli = document.getElementById(\"uli\");\n    uli.onclick = function (e) {\n        e = e || window.event; //这一行及下一行是为兼容IE8及以下版本\n        var target = e.target || e.srcElement;\n        if (target.tagName.toLowerCase() === \"li\") {\n           var li = this.querySelectorAll(\"li\");\n           index = Array.prototype.indexOf.call(li, target);\n           console.log(index)\n        }\n     }\n\n"}]