[{"title":"commonjs规范","questions_id":"ayf32j-5kv76-qvfqh-cigaoo","json_path":"ayf32j-5kv76-qvfqh-cigaoo.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"请简述node环境下的commonjs规范（说出如何导出模块，如何引入模块，如何创建模块）？","student_answer":"只能用于服务端\n创建：var sample  = require('./module.js');\n\t console.log( sample.方法名(参数));\n    require('./module.js');，我们调用require模块，前面创建了名为module.js的模块。\n引入：require(module path路径)  默认忽略.js  .json  .node 后缀\n抛出：两种方法：1）exports 不可以直接赋值，可以添加方法或属性添加  例：exporets.name = ...\n\t\t\t\t  exports 是 module 的属性，默认情况是空对象\n\t\t\t\t2)module.exports  可以直接赋值，可以抛出任意类型的值，出现多个时，抛出最后一个\n"},{"title":"let和var的区别","questions_id":"h7f6hq-cezl0g-fyu3o-6onwjf","json_path":"h7f6hq-cezl0g-fyu3o-6onwjf.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"在声明变量的时候，使用`let`和`var`有什么区别呢？","student_answer":"var 声明的变量有声明提升的过程  而let没有\n例：console.log(a); //输出undefined\n   console.log(b); //直接报错：ReferenceError: b is not defined\n   var a = 'test var OK.';\n   let b = 'test let OK.';\n重复声明同一个变量 let会报错  var 则会覆盖前一个\n\nlet 还会产生块级作用域 而var不会\n例： var a = 'test var OK.';\n   let b = 'test let OK.';\n   {\n   var a = 'varTest changed.';\n   let b = 'letTest changed.';\n   }\n暂时性死区\ni = 0;  let i=1;//i is not defined;"},{"title":"解构赋值和数组的map方法","questions_id":"izvfy-572mw-thxrmm-7aba5s","json_path":"izvfy-572mw-thxrmm-7aba5s.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"如下：是一段html结构\n```   \n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n```\n加载一段对应的javaScript代码\n\n```\n        let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })\n```\n\n请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义","student_answer":"\t\tlet oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];//数组结构 把map方法和forEach方法结构出来\n        li = map.call(li,item=>{  //原本li是个类数组，是没有map方法的，直接用会报错的  修改了this指向，使li有map方法\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })"},{"title":"解决以下异步代码问题","questions_id":"pwrym-ypsrgi-3smad-bm9d1m","json_path":"pwrym-ypsrgi-3smad-bm9d1m.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"检索并计算属于同一教室中每个学生的平均分数，例子中教室 ID 为 75。每个学生可以在一年内参加一门或多门课程。以下 API 可用于检索所需数据。\n```\n// GET LIST OF ALL STUDENTS\nGET /api/students\nResponse:\n[{\n    \"id\": 1,\n    \"name\": \"John\",\n    \"classroomId\": 75\n}]\n// GET COURSES FOR GIVEN A STUDENT\nGET /api/courses?filter=studentId eq 1\nResponse:\n[{\n    \"id\": \"history\",\n    \"studentId\": 1\n}, {\n    \"id\": \"algebra\",\n    \"studentId\": 1\n}]\n// GET EVALUATION FOR EACH COURSE\nGET /api/evaluation/history?filter=studentId eq 1\nResponse:\n{\n    \"id\": 200,\n    \"score\": 50,\n    \"totalScore\": 100\n}\n```\n编写一个接受教室 ID 的函数，并根据该函数计算该教室中每个学生的平均值。 该函数的最终输出应该是带有平均分数的学生列表：\n```\n[\n  { \"id\": 1, \"name\": \"John\", \"average\": 70.5 },\n  { \"id\": 3, \"name\": \"Lois\", \"average\": 67 },\n}\n```\n使用普通回调，promises，observables，generator 或 async-wait 编写所需的函数。 尝试使用至少 2 种不同的技术解决这个问题。\n代码素材用于代替接口\n```\nconst APIS = {\n  STUDENTS: '/api/students',\n  COURSES: '/api/courses',\n  EVALUATION: '/api/evaluation/'\n}; \nfunction fetchData(api) {\n  return new Promise(resolve => {\n    let data = null;\n    switch (api) {\n      case APIS.STUDENTS:\n        data = [{\n          id: 1,\n          name: 'John',\n          classroomId: 75\n        }, {\n          id: 1,\n          name: 'Tom',\n          classroomId: 75\n        }];\n        break;\n      case APIS.COURSES:\n        data = [{\n          id: 'history',\n          studentId: 1\n        }, {\n          id: 'algebra',\n          studentId: 1\n        }];\n        break;\n      case APIS.EVALUATION:\n        data = {\n          id: '200',\n          score: 50,\n          totalScore: 100\n        };\n        break;\n    } \n    resolve(data);\n  });\n} \n```","student_answer":"async function getStudents1(classroomId) {\n    let Response\n    await fetchData('/api/students').then(data=>{\n        Response=data.filter(item=>item.classroomId=classroomId).map(item=>{\n            delete item.classroomId\n            return item\n        })\n    })\n    await fetchData(\"/api/courses\").then(data=>{\n        Response.forEach(item=>{\n            let scores = data.map(i => {\n                if (i.studentId === item.id) {\n                    return i.score ? i.score : 90\n                }\n            })\n            item.average = scores.reduce((prev, next, item, arr) => {\n                return prev + next\n            })/scores.length\n        });\n    })\n    return Response\n}\ngetStudents1(75).then(Response=>{\n    console.log(Response)\n})\n\nlet Response\nfunction* getStudents2(classroomId){\n    yield fetchData('/api/students').then(data => {\n        Response = data.filter(item => item.classroomId = classroomId).map(item => {\n            delete item.classroomId\n            return item\n        })\n        \n    })\n    yield fetchData('/api/courses').then(data => {\n        \n        Response = data.filter(item => item.classroomId = classroomId).map(item => {\n            delete item.classroomId\n            return item\n        })\n        console.log(Response)\n    })\n}\nlet a = getStudents2(75)\na.next()\na.next()"}]