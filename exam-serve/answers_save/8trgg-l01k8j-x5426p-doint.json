[{"title":"青蛙跳台阶","questions_id":"cy51s-cirofn-vxvrne-hgh3tk","json_path":"cy51s-cirofn-vxvrne-hgh3tk.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"用js实现青蛙跳台阶，一共十个台阶，青蛙每次跳一个或者两个台阶，打印出所有可能的跳跃方法（例如：[1,1,1,1,1,1,1,1,1,1]/[2,2,2,2,2]/[1,1,1,1,1,1,1,1,2]）","student_answer":" let num = 0;\n        function qw(num, res = []) {\n            if (num == 0) {\n                res = []\n            }\n            let i = 1\n            while (i < 3) {\n                if (num + i <= 10) { //\n                    let res1 = [...res] //res的内容给res1  \n                    res1.push(i) //每次的ipush到res1\n                    if (num + i === 10) { //加起来的值等于10\n                        num++\n                        console.log(num + i === 10)\n                             console.log(res1, \"---------------\", num)\n                    } else {\n                        qw(num + i, res1) //递归 重复调用\n                    }\n                }\n                i++\n            }\n        }\n        qw(0)"},{"title":"大小文件读取","questions_id":"z9ndnc-qhzc6-wb5vju-0pvnzk","json_path":"z9ndnc-qhzc6-wb5vju-0pvnzk.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"封装一个方法适配大小文件的读取，限定值2M","student_answer":"let fs = require(\"fs\")\nlet path = require(\"path\")\nlet all = path.join(__dirname, \"./dome1.html\") //绝对路径\n    //console.log(all)\n\nfunction size(all) {\n    let xin = fs.statSync(all).size //获取文件大小\n        // console.log(xin)\n    let Size = xin / 1024 / 1024 //换算\n    console.log(Size)\n    if (Size < 2) {//小于2 的时候读取\n        let m = fs.readFileSync(all, \"utf8\") //读取\n        console.log(m)\n    } else {\n        return\n    }\n}\nsize(all)"},{"title":"实现多维数组转换为一维数组","questions_id":"60gn1-9nj3mi-hv4xz-t6ecp","json_path":"60gn1-9nj3mi-hv4xz-t6ecp.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"封装一个函数可以使得n维数组转换为1维数组，输出","student_answer":"function arr(Arr) {\n    while (Arr.some((val) =>\n            Array.isArray(val)\n            // console.log(Array.isArray(val)) //判断是不是数组\n        )) { //检测\n        Arr = [].concat(...Arr) //每一项展开\n            // console.log(...Arr)\n    }\n    console.log(Arr)\n    return Arr\n\n}\narr([1, 2, [], 1, {},\n    [1, [4]]\n])"},{"title":"实现一个评星方法","questions_id":"tak6bp-2bpj3-xh6jpg-elkb8u","json_path":"tak6bp-2bpj3-xh6jpg-elkb8u.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"实现一个评星方法\n说明\n* 可根据传入的评分和总数，返回评星结果（用 ★ 和 ☆ 描述）\n* 评分必选项，四舍五入，总数可选，大于0的整数，默认为5\n* 对于评分为空或小于0、评分大于总数、总数小于0或总数非整数的情况，返回'errror'\n示例\n```\ngetRate(4); // ★★★★☆\ngetRate(4, 8); // ★★★★☆☆☆☆\ngetRate(3.4); //  ★★★☆☆\ngetRate(5, 2); // 'error'\ngetRate(-2); // 'error'\ngetRate(3, 5.5); // 'error'\n```\n\n\n\n\n\n\n\n\n\n\n\n","student_answer":"function pj(num1 = 0, num2 = 5) {\n    if (num1 < 0 && num2 < 0) { //判断是不是负数\n        return 'error'\n    } else if (String(num1).indexOf(\".\") == 1 || String(num2).indexOf(\".\") == 1) { //判断是不是小数  先转字符串 在检测有没有 .\n        return 'error'\n    } else {\n        let num = num2 - num1 //算出有几个是空的星星\n        for (let j = 0; j < num1; j++) { // 循环有几个实心星星\n            process.stdout.write(\"★\");\n        }\n        for (let n = 0; n < num; n++) { //循环num 空星星的个数\n            process.stdout.write(\"☆\");\n        }\n    }\n}\npj(3, 9)"}]