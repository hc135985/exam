[{"title":"commonjs规范","questions_id":"ayf32j-5kv76-qvfqh-cigaoo","json_path":"ayf32j-5kv76-qvfqh-cigaoo.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"请简述node环境下的commonjs规范（说出如何导出模块，如何引入模块，如何创建模块）？","student_answer":"创建模块:\n1先用npm init -y创建一个package.json文件。\n2.在package.json里把main改成主模块的路径。\n3.用npm i生成一个node_modules。\n4.在node_modules里创建一个文件夹，文件夹里创建一个js文件，这个js文件就是我们想创建的模块。\n\n引入模块:\n用require(\"模块文件名\" )方法可以引入想引入的模块。\n\n导出模块:\nmodule.exports={ }导出模块内想导出的内容\n"},{"title":"let和var的区别","questions_id":"h7f6hq-cezl0g-fyu3o-6onwjf","json_path":"h7f6hq-cezl0g-fyu3o-6onwjf.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"在声明变量的时候，使用`let`和`var`有什么区别呢？","student_answer":"先说一下let的特性\n1、块局作用域；\n2、不存在变量提升，一定声明后才能使用；\n3、暂时性死区，在代码块内使用let命令声明变量之前，该变量都是不可用的，不受外部变量影响；\n4、在相同作用域范围内不允许重复声明；\n声明变量时的区别:\n1.通过var定义的变量，作用域是整个封闭函数，是全域的 。通过let定义的变量，作用域是在块级\n2。let不允许在相同作用域内，重复声明同一个变量。"},{"title":"解构赋值和数组的map方法","questions_id":"izvfy-572mw-thxrmm-7aba5s","json_path":"izvfy-572mw-thxrmm-7aba5s.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"如下：是一段html结构\n```   \n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n```\n加载一段对应的javaScript代码\n\n```\n        let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })\n```\n\n请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义","student_answer":" let oUl = document.getElementsByTagName('ul')[0]; //获取ul这个节点\n        let li = document.getElementsByTagName('li'); //获取ul下4个LI节点\n        const {\n            map,\n            forEach\n        } = []; //我认为[]这是一个数组，利用结构赋值。map和forEach恰好是数组里的方法。所以这里的map和forEach是遍历数组的方法    \n        li = map.call(li, item => { //利用call让this指向了li这个数组，里面包含了ul下的4个LI。这样利用map遍历数组这个方法，item就相当于里面每一个li\n            let key = 2 * item.getAttribute('key') - 1; //这句话的意思就是用item.getAttribute('key')获取出当前li下的key属性下的值乘于2再减去1，最后得到的值复制给key变量\n            item.setAttribute('key', key); //利用setAttribute（）这个方法，重新给当前li下自定义属性key的值替换成key变量的值\n            return item; //最后返回的是4个新的li\n        });\n        //现在li里存储的不再是之前的\n        // <li key=\"1\"></li>\n        // <li key=\"2\"></li>\n        // <li key=\"3\"></li>\n        // <li key=\"4\"></li>\n        //而是\n        // <li key=\"1\"></li>\n        // <li key=\"3\"></li>\n        // <li key=\"5\"></li>\n        // <li key=\"7\"></li>\n        oUl.innerHTML = ''; //清空ul里面的内容\n        forEach.call(li, item => {\n            oUl.appendChild(item); //利用appendChild（）方法把新的li数组里的每一个LI重新添加到ul里\n        })"},{"title":"解决以下异步代码问题","questions_id":"pwrym-ypsrgi-3smad-bm9d1m","json_path":"pwrym-ypsrgi-3smad-bm9d1m.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"检索并计算属于同一教室中每个学生的平均分数，例子中教室 ID 为 75。每个学生可以在一年内参加一门或多门课程。以下 API 可用于检索所需数据。\n```\n// GET LIST OF ALL STUDENTS\nGET /api/students\nResponse:\n[{\n    \"id\": 1,\n    \"name\": \"John\",\n    \"classroomId\": 75\n}]\n// GET COURSES FOR GIVEN A STUDENT\nGET /api/courses?filter=studentId eq 1\nResponse:\n[{\n    \"id\": \"history\",\n    \"studentId\": 1\n}, {\n    \"id\": \"algebra\",\n    \"studentId\": 1\n}]\n// GET EVALUATION FOR EACH COURSE\nGET /api/evaluation/history?filter=studentId eq 1\nResponse:\n{\n    \"id\": 200,\n    \"score\": 50,\n    \"totalScore\": 100\n}\n```\n编写一个接受教室 ID 的函数，并根据该函数计算该教室中每个学生的平均值。 该函数的最终输出应该是带有平均分数的学生列表：\n```\n[\n  { \"id\": 1, \"name\": \"John\", \"average\": 70.5 },\n  { \"id\": 3, \"name\": \"Lois\", \"average\": 67 },\n}\n```\n使用普通回调，promises，observables，generator 或 async-wait 编写所需的函数。 尝试使用至少 2 种不同的技术解决这个问题。\n代码素材用于代替接口\n```\nconst APIS = {\n  STUDENTS: '/api/students',\n  COURSES: '/api/courses',\n  EVALUATION: '/api/evaluation/'\n}; \nfunction fetchData(api) {\n  return new Promise(resolve => {\n    let data = null;\n    switch (api) {\n      case APIS.STUDENTS:\n        data = [{\n          id: 1,\n          name: 'John',\n          classroomId: 75\n        }, {\n          id: 1,\n          name: 'Tom',\n          classroomId: 75\n        }];\n        break;\n      case APIS.COURSES:\n        data = [{\n          id: 'history',\n          studentId: 1\n        }, {\n          id: 'algebra',\n          studentId: 1\n        }];\n        break;\n      case APIS.EVALUATION:\n        data = {\n          id: '200',\n          score: 50,\n          totalScore: 100\n        };\n        break;\n    } \n    resolve(data);\n  });\n} \n```","student_answer":"let data=获取到的数据库\nfetchData（接口）{\n}.then(res => {\n     console.log(res)//获取对应接口的data数据\n    let obj = JSON.parse(平均值)\n    data.push(obj)\n  return data\n     }\n })"}]