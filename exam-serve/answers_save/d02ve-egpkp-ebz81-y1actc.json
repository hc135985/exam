[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"let flag=true;\n    window.onresize=()=>{\n        if(document.documentElement.clientWidth>600){\n            if(flag){\n                console.log('hello');\n                flag=false;\n            }\n        }else{\n            flag=true;\n        }\n    }"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"import React ,{Component} from 'react';\n//类组件\nclass App extends Component{\n\trender(){\n    \treturn (\n        \t\t<div>\n                Type something:\n                <input onChange={this.handleChange} value={this.state.text} />\n            </div>\n        )\n    }\n}\n//无状态函数式组件\n//组件不会被实例化，整体渲染性能得到提升\n//组件不能访问this对象\n//组件无法访问生命周期的方法\n//无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\nconst Child = prpos=>(\n\t\t<div>\n        Type something:\n        <input onChange={this.handleChange} value={this.state.text} />\n     </div>\n)\n// ES5 原生\nvar InputControlES5 = React.createClass({\n  render: function() {\n        return (\n            <div>\n                Type something:\n                <input onChange={this.handleChange} value={this.state.text} />\n            </div>\n        );\n    }\n})\n\n/*\n\tReact.createClass与React.Component区别\n   React.createClass创建的组件，其每一个成员函数的this都有React自动绑定，任何时候使用，直接使用this.method即可，函数中\t的this会被正确设置。\n   React.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象\n*/"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        const image = new Image();\n      \t image.onload = ()=>{\n      \t\tresolve(image)\n      \t }\n       \timage.onerror = ()=>{\n        reject(new Error('Could not load image at ' + url))\n        }\n        image.src=src\n    })\n}"}]