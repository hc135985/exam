[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"window.onresize = function(){\n  var docWidth = document.body.clientWidth;\n    if(docWidth >= 600){\n        return dy()\n    }\n}\nfunction dy(){\n  console.log('hello');\n  return ;\n}"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"react:\n1、函数式定义的 无状态组件：它是为了创建纯展示组件，这种组件只负责根据传入的props来展示，不涉及到要state状态的操作。特点 ：\n（1）组件不会被实例化，整体渲染性能得到提升\n（2）组件不能访问this对象\n（3）组件无法访问生命周期的方法\n（4）无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\n2、es5原生方式React.createClass定义的组件： 是ES5的原生的JavaScript来实现的React组件\n3、es6形式的extends React.Component定义的组件： 是以ES6的形式来创建react的组件的，是React目前极为推荐的创建有状态组件的方式，最终会取代React.createClass形式；相对于 React.createClass可以更好实现代码复用。"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"//封装加载图片的promise\nlet loadImg = (src)=>{\n   return new Promise((resolve, reject)=>{\n      // write your code here\n      const image = new Image();\n      image.onload = function() {\n         resolve(image);\n      };\n      image.onerror = function() {\n         reject(new Error('Could not load image at ' + src));\n      };\n     image.src = src;\n   })\n}"}]