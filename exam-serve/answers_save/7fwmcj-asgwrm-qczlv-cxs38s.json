[{"title":"commonjs规范","questions_id":"ayf32j-5kv76-qvfqh-cigaoo","json_path":"ayf32j-5kv76-qvfqh-cigaoo.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"请简述node环境下的commonjs规范（说出如何导出模块，如何引入模块，如何创建模块）？","student_answer":"导出模块:moudel.exports = 函数名或者变量名；\n引入模块 require('user.js')  当然.js可以省略 require('user');\n创建模块:因为一个文件本身就是一个模块，并且nodejs中提供了exports和require,exports是公开的接口,所以只需要定义一个js文件，进行模块创建\n例子如下\nvar name;\nexports.setName = function (thyName){\n    name = thyName;\n}\nexports.sayHello = function (){\n    console.log('hello' + name);\n}\nvar mymoudle = require('./moudle.js');\n \nmymoudle.setName('BYVoid');\nmymoudle.sayHello()\n\n"},{"title":"解构赋值和数组的map方法","questions_id":"izvfy-572mw-thxrmm-7aba5s","json_path":"izvfy-572mw-thxrmm-7aba5s.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"如下：是一段html结构\n```   \n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n```\n加载一段对应的javaScript代码\n\n```\n        let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })\n```\n\n请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义","student_answer":"ul下的li的key值依次变为 1,3,5,7 \nlet oUl = document.getElementsByTagName('ul')[0];//获取ul\nlet li = document.getElementsByTagName('li');//获取li\nconst {map,forEach} = [];//通过解构赋值使map,forEach可以使用Array的原型上的方法\n li = map.call(li,item=>{//遍历li\n   let key = 2 * item.getAttribute('key') - 1;//获取li上的hey属性并*2-1\n   item.setAttribute('key',key);//设置每个li上的key值为变量key\n   return item;//返回每个li\n});\noUl.innerHTML = '';//设置ul的innerHTML为空\nforEach.call(li,item=>{//遍历重新赋值的所有li\n   oUl.appendChild(item);//把每个li赋给ul\n})\n"},{"title":"解决以下异步代码问题","questions_id":"pwrym-ypsrgi-3smad-bm9d1m","json_path":"pwrym-ypsrgi-3smad-bm9d1m.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"检索并计算属于同一教室中每个学生的平均分数，例子中教室 ID 为 75。每个学生可以在一年内参加一门或多门课程。以下 API 可用于检索所需数据。\n```\n// GET LIST OF ALL STUDENTS\nGET /api/students\nResponse:\n[{\n    \"id\": 1,\n    \"name\": \"John\",\n    \"classroomId\": 75\n}]\n// GET COURSES FOR GIVEN A STUDENT\nGET /api/courses?filter=studentId eq 1\nResponse:\n[{\n    \"id\": \"history\",\n    \"studentId\": 1\n}, {\n    \"id\": \"algebra\",\n    \"studentId\": 1\n}]\n// GET EVALUATION FOR EACH COURSE\nGET /api/evaluation/history?filter=studentId eq 1\nResponse:\n{\n    \"id\": 200,\n    \"score\": 50,\n    \"totalScore\": 100\n}\n```\n编写一个接受教室 ID 的函数，并根据该函数计算该教室中每个学生的平均值。 该函数的最终输出应该是带有平均分数的学生列表：\n```\n[\n  { \"id\": 1, \"name\": \"John\", \"average\": 70.5 },\n  { \"id\": 3, \"name\": \"Lois\", \"average\": 67 },\n}\n```\n使用普通回调，promises，observables，generator 或 async-wait 编写所需的函数。 尝试使用至少 2 种不同的技术解决这个问题。\n代码素材用于代替接口\n```\nconst APIS = {\n  STUDENTS: '/api/students',\n  COURSES: '/api/courses',\n  EVALUATION: '/api/evaluation/'\n}; \nfunction fetchData(api) {\n  return new Promise(resolve => {\n    let data = null;\n    switch (api) {\n      case APIS.STUDENTS:\n        data = [{\n          id: 1,\n          name: 'John',\n          classroomId: 75\n        }, {\n          id: 1,\n          name: 'Tom',\n          classroomId: 75\n        }];\n        break;\n      case APIS.COURSES:\n        data = [{\n          id: 'history',\n          studentId: 1\n        }, {\n          id: 'algebra',\n          studentId: 1\n        }];\n        break;\n      case APIS.EVALUATION:\n        data = {\n          id: '200',\n          score: 50,\n          totalScore: 100\n        };\n        break;\n    } \n    resolve(data);\n  });\n} \n```","student_answer":"async function CountById(id){\n    let res = await fetchData('/api/students');\n    console.log(res);\n\n    let testArr = res.filter(item=>{\n       return item.classroomId === id;\n    });//获取同一教室中的所有学生\n\n    let subject = testArr.map(async (item)=>{\n        return await fetchData('/api/courses?filter='+item.id);\n    });//此时subjec是个二维数组，包含同一教室中的所有学生，每一项是学生的科目\n\n    let response = subject.map(async (item,i)=>{\n        let eachLength = item.length;\n        totscore=item.map(async (item2)=>{\n             let score = await fetchData('/api/evaluation/'+item2.id+'?filter='+item[0].id);\n                // 获取当前科目的分数\n             return score.score;\n        });\n        let eachTotscore = totscore.reduce((tot,each)=>tot+each); // reduce函数获取总分\n\n        return {\n            id:item[0].id,\n            name:item[0].name,\n            average:Math.floor(eachTotscore/eachLength)\n        }\n    })\n    return new Promise((resolve,reject)=>{\n       if(response&&response.length){\n           //若存在则成功\n           resolve({response})\n       }else{\n           reject({response:'失败'})\n       }\n    })\n}\nCountById(75).then(res=>{\n    console.log(res)\n});\nclass Solution {\npublic:\n    bool judgeCircle(string moves) {\n        int x = 0;\n        int y = 0;\n        for(int i = 0; i < moves.size(); i++){\n            if(moves[i] == 'U') y++;\n            else if(moves[i] == 'D') y--;\n            else if(moves[i] == 'L') x--;\n            else if(moves[i] == 'R') x++;\n        }\n        return (x == 0) && (y == 0);\n    }\n};\n\n"},{"title":"机器人归位","questions_id":"4t0rar-39c33-wq098t-phh5ht","json_path":"4t0rar-39c33-wq098t-phh5ht.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"dingshaoshan","user_id":"ypay2t-7uxsd","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"在二维平面上，有一个机器人从原点 (0, 0) 开始，给出它的移动顺序，判断这个机器人在完成移动后是否在 (0, 0) 处结束。\n\n移动顺序由字符串表示。机器人的有效动作有 R（右），L（左），U（上）和 D（下）。如果机器人在完成所有动作后返回原点，则返回 true。否则，返回 false。\n\n示例 1:\n\n        输入: \"UD\"\n        输出: true\n        解释：机器人向上移动一次，然后向下移动一次。所有动作都具有相同的幅度，因此它最终回到它开始的原点。因此，我们返回 true。\n\n示例 2:\n\n        输入: \"LL\"\n        输出: false\n        解释：机器人向左移动两次。它最终位于原点的左侧，距原点有两次 “移动” 的距离。我们返回 false，因为它在移动结束时没有返回原点。\n\n\n注意：机器人“面朝”的方向无关紧要。 “R” 将始终使机器人向右移动一次，“L” 将始终向左移动等。此外，假设每次移动机器人的移动幅度相同。\n\n请根据题意在横线处填写合适的代码：\n\n\n  function check(str){\n            var U = 0, D = 0, L = 0, R = 0;\n            for(var i=0; i < str.length; i++){\n                switch (str[i]){\n                    case \"U\":______ ;break;\n                    case \"D\":______ ;break;\n                    case \"L\":______ ;break;\n                    case \"R\":______ ;break;\n                }\n            }\n            return ( ______ && ______ ) \n  }","student_answer":"U++\nD--\nL++\nR--\nU+B L+R\n\n     var li = [...document.querySelectorAll('ul li')];\n        var str = [];\n        li.forEach(item => {\n            item.onclick = function() {\n                str.push(item.innerHTML)\n                if (check(str) !== 0) {\n                    console.log('false')\n                } else {\n                    console.log('true')\n                }\n            }\n        })\n\n        function check(str) {\n            var U = 0,\n                D = 0,\n                L = 0,\n                R = 0;\n            for (var i = 0; i < str.length; i++) {\n                switch (str[i]) {\n                    case \"U\":\n                        U++;\n                        break;\n                    case \"D\":\n                        D--;\n                        break;\n                    case \"L\":\n                        L++;\n                        break;\n                    case \"R\":\n                        R--;\n                        break;\n                }\n            }\n            console.log(U, D, L, R)\n            return (U + D && L + R)\n        }\n"}]