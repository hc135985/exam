[{"title":"使用类实现任务调度","questions_id":"sue8v-wa50ws-jss7qm-592yt8","json_path":"sue8v-wa50ws-jss7qm-592yt8.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用js实现以下效果 \nvar priorityQueue = new PriorityQueue();  \npriorityQueue.enqueue('优先级1-1', 1);  \npriorityQueue.enqueue('优先级3-1', 3);  \npriorityQueue.enqueue('优先级1-2', 1);  \npriorityQueue.enqueue('优先级2-1', 2);  \npriorityQueue.print();  \n// 优先级1-1 优先级1-2 优先级2-1 优先级3-1 priorityQueue.dequeue();   \n```js\nclass PriorityQueue{\n    constuctor(obj){\n        this.arr=[];\n    }\n    enqueue(str,num){\n        // write your code here\n    }\n    print(){\n       // write your code here \n    }\n}\n```","student_answer":"#ifndef PRIORITY_QUEUE_H_\n#define PRIORITY_QUEUE_H_\n#include <iostream>\n#include <string>\n#include <strstream>\nusing namespace std;\nconst int defaultSize = 50;\ntemplate <class T>\nclass PriorityQueue\n{\npublic:\n    PriorityQueue(int sz = defaultSize);        //构造函数\n    ~PriorityQueue();                           //析构函数\npublic:\n    bool getHead(T& x) const;       //读取队头(具最小优先权)的值\n    bool Insert(const T& x);        //将新元素x插入到队尾\n    bool RemoveMin(T& x);           //将队头元素删除       \n    bool IsEmpty() const;           //判断队列是否为空\n    bool IsFull() const;            //判断队列是否为满\n    void MakeEmpty();               //置优先级队列为空\n    int getSize() const;            //求优先级队列中元素个数\npublic:\n    template <class T>\n    friend ostream& operator<<(ostream& os, const PriorityQueue<T>& q); //输出队列元素的重载操作<<\nprivate:\n    void adjust();                  //队列调整\nprivate:\n    T *pqelements;  //存放队列元素的队列数组\n    int maxSize;    //队列最大可容纳元素个数\n    int count;      //当前元素个数(长度)\n};\n\n//构造函数\ntemplate <class T>\nPriorityQueue<T>::PriorityQueue(int sz)\n{\n    cout << \"$ 执行构造函数\" << endl;\n    if (sz >= 0)\n    {\n        maxSize = sz;           \n        count = 0;      \n        pqelements = new T[maxSize];\n    }\n}                       \n\n//析构函数\ntemplate <class T>\nPriorityQueue<T>::~PriorityQueue()\n{\n    cout << \"$ 执行析构函数\" << endl;\n    delete[] pqelements;\n    pqelements = NULL;\n}   \n\n\n//读取队头(具最小优先权)的值\ntemplate <class T>\nbool PriorityQueue<T>::getHead(T& x) const\n{\n    if (true == IsEmpty())\n    {\n        return false;\n    }\n    x = pqelements[0];\n    return true;\n}\n\n//将新元素x插入到队尾\ntemplate <class T>\nbool PriorityQueue<T>::Insert(const T& x)\n{\n    if (true == IsFull())\n    {\n        return false;\n    }\n    pqelements[count++] = x;\n    adjust();   //按优先权进行调整\n    return true;\n}\n\n//将队头元素删除\ntemplate <class T>\nbool PriorityQueue<T>::RemoveMin(T& x)\n{\n    if (true == IsEmpty())\n    {\n        return false;\n    }\n    x = pqelements[0];\n    for (int i = 1; i < count; i++)\n    {\n        pqelements[i - 1] = pqelements[i];\n    }\n    count--;\n    return true;\n}\n\n//判断队列是否为空\ntemplate <class T>\nbool PriorityQueue<T>::IsEmpty() const\n{\n    return (0 == count) ? true : false;\n}\n\n//判断队列是否为满\ntemplate <class T>\nbool PriorityQueue<T>::IsFull() const\n{\n    return (maxSize == count) ? true : false;\n}\n\n//置优先级队列为空\ntemplate <class T>\nvoid PriorityQueue<T>::MakeEmpty()\n{\n    delete[] pqelements;\n    count = 0;\n    pqelements = new T[maxSize];\n}\n\n//求优先级队列中元素个数\ntemplate <class T>\nint PriorityQueue<T>::getSize() const\n{\n    return count;\n}\n\n//输出队列元素的重载操作<<\ntemplate <class T>\nostream& operator<<(ostream& os, const PriorityQueue<T>& q)\n{\n    for (int i = 0; i < q.count; i++)\n    {\n        os << \"[\" << i << \"]\" << \" : \" << q.pqelements[i] << endl;\n    }\n    return os;\n}\n\n//队列调整\ntemplate <class T>\nvoid PriorityQueue<T>::adjust()\n{\n    int i = 0;\n    T temp = pqelements[count - 1];\n    for (i = count - 2; i >= 0; i--)\n    {\n        if (pqelements[i] <= temp)\n        {\n            break;\n        }\n        pqelements[i + 1] = pqelements[i];\n    }\n    pqelements[i + 1] = temp;\n}"},{"title":"react生命周期","questions_id":"xt05yo-prna5g-f7zqo-ltl5rh","json_path":"xt05yo-prna5g-f7zqo-ltl5rh.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"dingshaoshan","user_id":"ypay2t-7uxsd","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"# react常用生命周期图\n\n![alt](https://raw.githubusercontent.com/JackCrysler/react-start/master/1.png)\n\n如图是react常用生命周期图，请阅读图，并在1，2，3，4处填写对应的生命周期","student_answer":"1 shouldComponentUpdate\n\n2 componentDidMount\n\n3 componentDidUpdate"},{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"window.onload=function(){\n  changeDivHeight();\n}\nwindow.onresize=function(){\n  changeDivHeight();\n}\nfunction changeDivHeight(){\t\t\t\t\n  var h = document.documentElement.clientHeight;\n  document.getElementById(\"div_ov_y\").style.height=h-140+\"px\";\n}"},{"title":"async配合transition实现自定义动画","questions_id":"bqq54a-jly2z9-m9fg7pj-oio193","json_path":"bqq54a-jly2z9-m9fg7pj-oio193.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"html结构\n```html\n<div id=\"box\"></div>\n```\ncss样式\n```css\n#box{\n  width:100px; height:100px; background-color:red; border-radius:50%; transition:transform 0.5s;\n}\n```\njavaScript代码\n```js\n        const oBox = document.getElementById('box');\n        oBox.addEventListener('transitionend',()=>{\n            let {x,y} = oBox;\n            moveTo.reslove({x,y});\n        },false);\n        function moveTo(x,y){\n            return new Promise((reslove,reject)=>{\n                moveTo.reslove = reslove;\n                oBox.x = x;\n                oBox.y = y;\n                oBox.style.transform = `translate(${x}px,${y}px)`;\n            })\n        }\n```\n\n补全以上代码，使点击oBox后，使oBox走出一个  W 的轨迹（使用async函数实现），并简单写出整体的代码思路。","student_answer":"var w=0;\nvar h=0;\nvar wp=10;//移动增量\nvar hp=10;//移动增量\nvar div2 =document.getElementById(\"div1\");\n\nvar ss=setInterval(\"move()\",100);\n\nfunction mouseovers(){  \n  clearInterval(ss);\n}\nfunction mouseouts(){\n  ss=setInterval(\"move()\",100);\n}\nfunction move(){\n  w=w+wp;\n  h=h+hp;\n  div2.style.left=w+\"px\";\n  div2.style.top=h+\"px\";\n  if(h>=innerHeight-100||h<0){\n    hp=0-hp;\n\n  }//判断是否碰壁\n  if(w>=innerWidth-100||w<0){\n    wp=0-wp;\n  }\n}"}]