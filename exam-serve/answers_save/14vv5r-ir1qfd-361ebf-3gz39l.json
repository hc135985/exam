[{"title":"commonjs规范","questions_id":"ayf32j-5kv76-qvfqh-cigaoo","json_path":"ayf32j-5kv76-qvfqh-cigaoo.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"请简述node环境下的commonjs规范（说出如何导出模块，如何引入模块，如何创建模块）？","student_answer":"答:\n模块的引用 : 在CommonJS规范中，存在require( )方法，它接受一个模块标识，用来引入一个模块中API  ,引入模块与引入脚本是有区别的,前者更多是按需引入加载,后者而是无论有没有用,全部一次性引入和加载,类似于通过script标签引入jQuery等库都是一次性载入\n\n\n创建模块:根据参数的不同格式，require命令去不同路径寻找模块文件\n　　1、如果参数字符串以“/”开头，则表示加载的是一个位于绝对路径的模块文件。比如，require('/home/marco/foo.js')将加载/home/marco/foo.js\n　　2、如果参数字符串以“./”开头，则表示加载的是一个位于相对路径（跟当前执行脚本的位置相比）的模块文件。比如，require('./circle')将加载当前脚本同一目录的circle.js\n　　3、如果参数字符串不以“./“或”/“开头，则表示加载的是一个默认提供的核心模块（位于Node的系统安装目录中），或者一个位于各级node_modules目录的已安装模块（全局安装或局部安装）\n\n\n导出模块:使用module.exports导出接口\n\n\n\n\n 答:CommonJS 是模块化的标准，nodejs 就是 CommonJS(模块化)的实现。"},{"title":"解构赋值和数组的map方法","questions_id":"izvfy-572mw-thxrmm-7aba5s","json_path":"izvfy-572mw-thxrmm-7aba5s.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"如下：是一段html结构\n```   \n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n```\n加载一段对应的javaScript代码\n\n```\n        let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })\n```\n\n请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义","student_answer":"  答:\nlet oUl = document.getElementsByTagName('ul')[0];   //获取ul\n        let li = document.getElementsByTagName('li');  //获取li\n        const {map,forEach} = [];   //建一个空数组\n        li = map.call(li,item=>{   //item箭头函数\n            let key = 2 * item.getAttribute('key') - 1;    //2*item获取自定义\n            item.setAttribute('key',key);\t\t//然后在设置一个key  把之前的覆盖\n            return item;     //返回item\n        });\n        oUl.innerHTML = '';   //ul为一个空字符串\n        forEach.call(li,item=>{   //遍历item\n            oUl.appendChild(item);    //item追加到ul里面\n        })\n\n\n\n答:\n    var url = 'http://test6m.wukonglicai.com/act/bfe/wk-op/jf-forest/index.html?from=singlemessage&isappinstalled=0#/transfer?shareId=9fwkZUWBURLF65AL544MFOXDFSBBGI?name=aa'\n       var get = function (url, key) {\n       var str = url.slice(url.indexOf(key)).split(\"?\")[0];\n       if (str.indexOf(\"&\") != -1) {\n           str = str.split(\"&\")[0].split(\"=\")[1];\n       } else {\n           str = str.split(\"=\")[1];\n       }\n       return str\n      }\n     console.log(get(url, 'from')) //  singlemessage"},{"title":"解决以下异步代码问题","questions_id":"pwrym-ypsrgi-3smad-bm9d1m","json_path":"pwrym-ypsrgi-3smad-bm9d1m.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"检索并计算属于同一教室中每个学生的平均分数，例子中教室 ID 为 75。每个学生可以在一年内参加一门或多门课程。以下 API 可用于检索所需数据。\n```\n// GET LIST OF ALL STUDENTS\nGET /api/students\nResponse:\n[{\n    \"id\": 1,\n    \"name\": \"John\",\n    \"classroomId\": 75\n}]\n// GET COURSES FOR GIVEN A STUDENT\nGET /api/courses?filter=studentId eq 1\nResponse:\n[{\n    \"id\": \"history\",\n    \"studentId\": 1\n}, {\n    \"id\": \"algebra\",\n    \"studentId\": 1\n}]\n// GET EVALUATION FOR EACH COURSE\nGET /api/evaluation/history?filter=studentId eq 1\nResponse:\n{\n    \"id\": 200,\n    \"score\": 50,\n    \"totalScore\": 100\n}\n```\n编写一个接受教室 ID 的函数，并根据该函数计算该教室中每个学生的平均值。 该函数的最终输出应该是带有平均分数的学生列表：\n```\n[\n  { \"id\": 1, \"name\": \"John\", \"average\": 70.5 },\n  { \"id\": 3, \"name\": \"Lois\", \"average\": 67 },\n}\n```\n使用普通回调，promises，observables，generator 或 async-wait 编写所需的函数。 尝试使用至少 2 种不同的技术解决这个问题。\n代码素材用于代替接口\n```\nconst APIS = {\n  STUDENTS: '/api/students',\n  COURSES: '/api/courses',\n  EVALUATION: '/api/evaluation/'\n}; \nfunction fetchData(api) {\n  return new Promise(resolve => {\n    let data = null;\n    switch (api) {\n      case APIS.STUDENTS:\n        data = [{\n          id: 1,\n          name: 'John',\n          classroomId: 75\n        }, {\n          id: 1,\n          name: 'Tom',\n          classroomId: 75\n        }];\n        break;\n      case APIS.COURSES:\n        data = [{\n          id: 'history',\n          studentId: 1\n        }, {\n          id: 'algebra',\n          studentId: 1\n        }];\n        break;\n      case APIS.EVALUATION:\n        data = {\n          id: '200',\n          score: 50,\n          totalScore: 100\n        };\n        break;\n    } \n    resolve(data);\n  });\n} \n```","student_answer":"答:\n// GET LIST OF ALL STUDENTS\nGET /api/students\nResponse:\n[{\n“id”: 1,\n“name”: “John”,\n“classroomId”: 75\n}]\n// GET COURSES FOR GIVEN A STUDENT\nGET /api/courses?filter=studentId eq 1\nResponse:\n[{\n“id”: “history”,\n“studentId”: 1\n}, {\n“id”: “algebra”,\n“studentId”: 1\n}]\n// GET EVALUATION FOR EACH COURSE\nGET /api/evaluation/history?filter=studentId eq 1\nResponse:\n{\n“id”: 200,\n“score”: 50,\n“totalScore”: 100\n}\n编写一个接受教室 ID 的函数，并根据该函数计算该教室中每个学生的平均值。 该函数的最终输出应该是带有平均分数的学生列表：\n\n[\n{ “id”: 1, “name”: “John”, “average”: 70.5 },\n{ “id”: 3, “name”: “Lois”, “average”: 67 },\n}\n使用普通回调，promises，observables，generator 或 async-wait 编写所需的函数。 尝试使用至少 2 种不同的技术解决这个问题。 代码素材用于代替接口\n\nconst APIS = {\nSTUDENTS: ‘/api/students’,\nCOURSES: ‘/api/courses’,\nEVALUATION: ‘/api/evaluation/’\n};\nfunction fetchData(api) {\nreturn new Promise(resolve => {\nlet data = null;\nswitch (api) {\ncase APIS.STUDENTS:\ndata = [{\nid: 1,\nname: ‘John’,\nclassroomId: 75\n}, {\nid: 1,\nname: ‘Tom’,\nclassroomId: 75\n}];\nbreak;\ncase APIS.COURSES:\ndata = [{\nid: ‘history’,\nstudentId: 1\n}, {\nid: ‘algebra’,\nstudentId: 1\n}];\nbreak;\ncase APIS.EVALUATION:\ndata = {\nid: ‘200’,\nscore: 50,\ntotalScore: 100\n};\nbreak;\n}\nresolve(data);\n});\n}\n"},{"title":"机器人归位","questions_id":"4t0rar-39c33-wq098t-phh5ht","json_path":"4t0rar-39c33-wq098t-phh5ht.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"dingshaoshan","user_id":"ypay2t-7uxsd","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"在二维平面上，有一个机器人从原点 (0, 0) 开始，给出它的移动顺序，判断这个机器人在完成移动后是否在 (0, 0) 处结束。\n\n移动顺序由字符串表示。机器人的有效动作有 R（右），L（左），U（上）和 D（下）。如果机器人在完成所有动作后返回原点，则返回 true。否则，返回 false。\n\n示例 1:\n\n        输入: \"UD\"\n        输出: true\n        解释：机器人向上移动一次，然后向下移动一次。所有动作都具有相同的幅度，因此它最终回到它开始的原点。因此，我们返回 true。\n\n示例 2:\n\n        输入: \"LL\"\n        输出: false\n        解释：机器人向左移动两次。它最终位于原点的左侧，距原点有两次 “移动” 的距离。我们返回 false，因为它在移动结束时没有返回原点。\n\n\n注意：机器人“面朝”的方向无关紧要。 “R” 将始终使机器人向右移动一次，“L” 将始终向左移动等。此外，假设每次移动机器人的移动幅度相同。\n\n请根据题意在横线处填写合适的代码：\n\n\n  function check(str){\n            var U = 0, D = 0, L = 0, R = 0;\n            for(var i=0; i < str.length; i++){\n                switch (str[i]){\n                    case \"U\":______ ;break;\n                    case \"D\":______ ;break;\n                    case \"L\":______ ;break;\n                    case \"R\":______ ;break;\n                }\n            }\n            return ( ______ && ______ ) \n  }","student_answer":"答:  function check(str){ \n  var U = 0,\n      D = 0, \n      L = 0, \n      R = 0;\n   var int t1=0,t2=0;\n  for(var i=0; i < str.length; i++){ \n    switch (str[i]){  \n      case “U”:__ t2++___ ;\n        break; case “D”:___t2--___ ;\n        break; case “L”:_t1--____ ;\n        break; case “R”:_t1++____ ;\n        break;\n      }\n  } \n  return ( _t1==0___ && _t2==0____ ) }\n\n\n"}]