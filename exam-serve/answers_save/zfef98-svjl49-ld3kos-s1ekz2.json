[{"title":"匿名自执行函数的应用","questions_id":"vh80e-3d3g3o-6hy47e-ib2x4c","json_path":"vh80e-3d3g3o-6hy47e-ib2x4c.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"heinan","user_id":"fdjfr-msxp8a","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"代码如下：\n```js\nfor (var i = 0; i < 5; i++) {\n    setTimeout(function () {\n        console.log(i)\n    })\n}\n输出\n5\n5\n5\n5\n5\n```\n修改上面代码，打印结果要求为：0,1，2，3，4","student_answer":"for (let i = 0; i < 5; i++) {\n    setTimeout(function () {\n        console.log(i)\n    })\n}"},{"title":"react生命周期","questions_id":"xt05yo-prna5g-f7zqo-ltl5rh","json_path":"xt05yo-prna5g-f7zqo-ltl5rh.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"dingshaoshan","user_id":"ypay2t-7uxsd","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"# react常用生命周期图\n\n## 请在 “其他“ 中查看图片。 \n \n\n\n如图是react常用生命周期图，请阅读图，并在1，2，3，4处填写对应的生命周期","student_answer":" 1:shouldComponentUpdate\n 2:componentDidMound\n 3:componentDidUpdate"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"三种方式：函数式定义的无状态组件、es5原生方式React.createClass定义的组件、es6形式的extends.React.component定义的组件\n区别：\n     函数式定义的无状态组件：1、组件不会被实例化，整体渲染得到提升；\n                     2、组件不能访问this对象；\n                     3、组件无法访问生命周期的方法；\n                     4、无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用；\n     es5原生方式React.createClass定义的组件：1、与无状态组件相比React.createClass和后面的React.component都是创建有组件的状态这些组件是要被实例化；\n                               2、可以访问组件生命周期的方法；\n                               3、会自绑定函数方法，导致不必要的性能开销，增加代码过时的可能性；\n                               4、不够自然、直观；\n                               5、React.createClass的mixins不够自然、直观；React.Component形式非常适合高阶组件（Higher Order Components--HOC）,它以更直观的形式展示了比mixins更强大的功能，并且HOC是纯净的JavaScript，不用担心他们会被废弃。\n     es6形式的extends.React.component定义的组件：1、React.Component是以ES6的形式来创建react的组件的，是React目前极为推荐的创建有状态组件的方式，最终会取代React.createClass形式；\n                                  2、相对于 React.createClass可以更好实现代码复用；\n                                  3、其成员函数不会自动绑定this"},{"title":"分别使用DOM0级DOM2级给一个DIV绑定事件","questions_id":"1gsxn-k09c2j-gq8peo-sohe9","json_path":"1gsxn-k09c2j-gq8peo-sohe9.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"分别使用DOM0级DOM2级给一个button绑定事件，并且描述这两种方式的区别","student_answer":"DOM0级：\n    document.getElementsByTagName(\"button\").onclick = function(){};\nDOM2级：\n    document.getElementsByTagName(\"button\").addEventListener(\"click\", function(){}, false);\n区别：\n   dom0级后面绑定的事件会覆盖前面绑定的事件，点击的时候会执行新绑定的\n   dom2级不会覆盖前面绑定的事件，点击的时候所有绑定的事件会依次执行一遍"},{"title":"最少两种方式实现点击每个li都弹出下标","questions_id":"puaqas-1modca-2y04jh-brcz59g","json_path":"puaqas-1modca-2y04jh-brcz59g.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"<ul id=”test”>\n    <li>这是第一条</li>\n    <li>这是第二条</li>\n    <li>这是第三条</li>\n</ul>","student_answer":" <ul id=\"ul\">\n   <li>这是第一条</li>\n   <li>这是第二条</li>\n   <li>这是第三条</li>\n</ul>\n<script>    \n   //方法一：事件委托\n    var uls = document.getElementById(\"ul\"); \n    uls.onclick = function (event) { \n    var target = event.target; \n    var liArray = uls.getElementsByTagName(\"li\"); \n    for (var i = 0; i < liArray.length; i++) { \n    if (liArray[i] === target) { \n            alert(i); \n            } \n        } \n    }\n\n   //方法二：闭包\n    var liArray = document.getElementById(\"ul\").getElementsByTagName(\"li\"); \n    for (var i = 0; i < liArray.length; i++) { \n    (function () { \n    var n = i; \n        liArray[i].onclick = function () { \n            alert(n); \n        } \n    })(i) \n    }\n</script>"}]