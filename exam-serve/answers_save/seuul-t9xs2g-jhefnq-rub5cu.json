[{"title":"青蛙跳台阶","questions_id":"cy51s-cirofn-vxvrne-hgh3tk","json_path":"cy51s-cirofn-vxvrne-hgh3tk.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"用js实现青蛙跳台阶，一共十个台阶，青蛙每次跳一个或者两个台阶，打印出所有可能的跳跃方法（例如：[1,1,1,1,1,1,1,1,1,1]/[2,2,2,2,2]/[1,1,1,1,1,1,1,1,2]）","student_answer":" let number = 0;//定义计数器\n        function tai(num){//封装函数\n            if(num === 0){//如果 num为0的时候 定义一个为空的数组\n               let res = [];\n            }\n            var i = 1;//初始值\n            while(i<3){// 一次只能跳一次或两次所以条件i<3\n                if(num + i<=10){\n                    let _res = [...res];//累加进入\n                    _res.push(i);//累计每一次在原数组上让i进栈\n                    if(num + i === 10){//每一次的数的和大于等于10 \n                        number ++ ;//计数器+1\n                        console.log(number,_res);\n                    }else{\n                        gua(num + i,_res);//函数一直回调\n                    }\n                }\n                i++;\n            }\n        }\n        tai(0);"},{"title":"大小文件读取","questions_id":"z9ndnc-qhzc6-wb5vju-0pvnzk","json_path":"z9ndnc-qhzc6-wb5vju-0pvnzk.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"封装一个方法适配大小文件的读取，限定值2M","student_answer":"let fs = require(\"fs\");//引入模块\nlet path = require(\"path\");\nlet newpath = path.join(__dirname, \"./main\");//链接当前路径和主操作路径\nfunction ReadFile(newpath) {//封装函数\n       ispath = fs.existsSync(newpath);//判断是否包含此路径\n        if (!ispath) {return}//不包含则终止函数\n        child = fs.readdirSync(newpath);//读取文件夹 返回值为一个数组\n        child.forEach(val => {//循环这个数组，则每个值则是文件的文件名\n            let aa = path.join(newpath, val);//在整合路径\n            let isflie = fs.statSync(aa);//读取每一个文件的信息\n            let size = isflie.size;//获取文件的大小\n            if (isflie.isFile()) {//判断是否是一个文件\n                let num = size / 1024 / 1024;//转换\n                if (num > 2) {//如果大于2B\n                  let res=fs.createReadSream(aa);\n                   res.on(\"data\",(check){//操作数据流的一个状态 \n                   let rew=fs.createWriteSream(aa);\n                      rew.pipe(check)})//用管道形式所输出\n                } else {\n                  let samll=fs.readFileSync(aaa);//读取小文件\n                    console.log(samll);//否则为小文件\n                }\n            } else { ReadFile(aa);  }//回调\n        })\n    }ReadFile(newpath)//调用函数\n"},{"title":"实现多维数组转换为一维数组","questions_id":"60gn1-9nj3mi-hv4xz-t6ecp","json_path":"60gn1-9nj3mi-hv4xz-t6ecp.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"封装一个函数可以使得n维数组转换为1维数组，输出","student_answer":"        function longarr(data, res) {//接收\n            data.forEach(item => {//对数据进行循环遍历\n                item instanceof Array ? arr(item, res) : res.push(item);\n              //判断如果item每项为数组还是数字，为数字直接进栈,如果为数组则在执行自己调用自己本身\n            })\n            return res;//返回新数组\n        }\n        console.log(longarr([1, [1, 2, [4, 7, [9, 0]], 0], 9], []));//穿进去数据 和一个空数组"},{"title":"实现一个评星方法","questions_id":"tak6bp-2bpj3-xh6jpg-elkb8u","json_path":"tak6bp-2bpj3-xh6jpg-elkb8u.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"实现一个评星方法\n说明\n* 可根据传入的评分和总数，返回评星结果（用 ★ 和 ☆ 描述）\n* 评分必选项，四舍五入，总数可选，大于0的整数，默认为5\n* 对于评分为空或小于0、评分大于总数、总数小于0或总数非整数的情况，返回'errror'\n示例\n```\ngetRate(4); // ★★★★☆\ngetRate(4, 8); // ★★★★☆☆☆☆\ngetRate(3.4); //  ★★★☆☆\ngetRate(5, 2); // 'error'\ngetRate(-2); // 'error'\ngetRate(3, 5.5); // 'error'\n```\n\n\n\n\n\n\n\n\n\n\n\n","student_answer":" <style>* {list-style: none;}ul>li {float: left;}</style> \n<body><ul></ul><body>\nlet ul = document.querySelector(\"ul\"); //获取ul\n        function xingxing(ge, sum) { //封装方法 传 个数 总数\n            var arr = []; //创建数组\n            var li;\n            if (ge > sum) { console.log(\"error\");return; }//判断如果个数大于总数打印错误,函数直接结束\n            if (sum <= 5) {sum = 5;} //总数小于等于5默认都为5\n            //总数小于0 或者等于0 直接结束\n          if (ge <= 0) {console.log(\"error\");return;} else {\n                for (var i = 0; i < sum; i++) {//循环添加li标签\n                    li = document.createElement(\"li\");//创建 li\n                    li.innerHTML = \"☆\";//li的内容\n                    ul.appendChild(li);//追加li\n                }\n                let lis = document.querySelectorAll(\"li\");//获取追加进去的li\n                ge = Math.round(ge);//个数四舍五入\n                for (var k = 0; k < lis.length; k++) {//循环所有的li\n                    for (var j = 0; j < ge; j++) {//从0开始满足个数停止填充\n                        lis[j].innerHTML = \"★\";\n                    }\n                }\n            }\n        }\n        xingxing(5, 2)"}]