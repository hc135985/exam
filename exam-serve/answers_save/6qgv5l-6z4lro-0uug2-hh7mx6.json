[{"title":"类的抽象","questions_id":"c7y73-e0nft-6rplem-daxvxe","json_path":"c7y73-e0nft-6rplem-daxvxe.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"## 使用ES6的Class完成如下功能\n阿里云产品线十分丰富，拥有ECS、RDS等数百款产品，每个产品都具有一些通用属性，例如：  \nID（id），地域（region），名称（name），同时每个产品又包含自己特有的属性。 ECS拥  \n有实例（instance）属性，可选值有ecs.t1.small、ecs.t3.small、ecs.t1.large RDS  \n拥有数据库类型（dbType）属性，可选值有mysql、mssql、PPAS 请使用你的面向对象知识，  \n基于ES6语法编写ECS、RDS两个类，并实现如下方法：   \n- 1. config() 返回一个字面量对象，可以拿到所有的成员变量。  \n- 2. buy() 返回一个URL，格式https://www.aliyun.com/buy?id=xxx&region=xxx&name=xxx&每个产品自己特有的成员变量","student_answer":"let instaceEnum = { t1s: \"ecs.t1.small\", t3s: \"ecs.t3.small\", t1l: \"ecs.t1.large\"}\nlet dbTypeEnum = { mysql: \"mysql\", mssql: \"mssql\", PPAS: \"PPAS\"}\nclass Product {    \n    // 通过构造器接收属性值\n    _id、_region、_name    constructor(_id, _region, _name) {             \n        this.id = _id;   this.region = _region;   this.name = _name;   \n    } \n     config() {   return this;  }\n    // 获得URL  \n      buy() {       \n        let url = \"https://www.aliyun.com/buy?\", urlArr = [];                  \n        for (let key in this) {              \n            if (this[key])     urlArr.push(key + \"=\" + this[key]);// 拼接后放到数组中            \n        }        \n        url += urlArr.join(\"&\");    return url;     \n    }}\n// 定义子类ECS继承了父类\nProductclass ECS extends Product {    \n    constructor(_id, _region, _name, _instance) {                \n        super(_id, _region, _name);   this.instance = _instance;     \n    }}\n// 定义子类RDS继承了父类\nProductclass RDS extends Product {      \n    constructor(_id, _region, _name, _dbType) {        \n        super(_id, _region, _name);      this.instance = _dbType;   \n}}\n"},{"title":"使用类实现任务调度","questions_id":"sue8v-wa50ws-jss7qm-592yt8","json_path":"sue8v-wa50ws-jss7qm-592yt8.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用js实现以下效果 \nvar priorityQueue = new PriorityQueue();  \npriorityQueue.enqueue('优先级1-1', 1);  \npriorityQueue.enqueue('优先级3-1', 3);  \npriorityQueue.enqueue('优先级1-2', 1);  \npriorityQueue.enqueue('优先级2-1', 2);  \npriorityQueue.print();  \n// 优先级1-1 优先级1-2 优先级2-1 优先级3-1 priorityQueue.dequeue();   \n```js\nclass PriorityQueue{\n    constuctor(obj){\n        this.arr=[];\n    }\n    enqueue(str,num){\n        // write your code here\n    }\n    print(){\n       // write your code here \n    }\n}\n```","student_answer":"class PriorityQueue{\n    constuctor(ele, priority){\n        this.arr=[]; this.ele = ele; this.priority = priority;\n    }\n    enqueue(ele, priority){   //入队\n        let element = new queueEle(ele, priority)\n        if (this.isEmpty()) {  arr.push(element)  }   //为空直接入队\n        else {\n            var qeueued = false; //是否满足优先级要求，并且已经入队\n            for (let i = 0; i < this.size(); i++) {\n                if (element.priority < arr[i].priority) {\n                    arr.splice(i, 0, element)\n                    qeueued = true\n                    break;\n                }\n            }\n            if (!qeueued) arr.push(element)\n        }\n    }\n    print(){  return arr.shift()} //出队\n    front() { return arr[0] }   //返回首元素 \n    isEmpty() { return arr.length == 0} //队列是否为空\n    clear() { arr = []} //清空队列\n    size() { return arr.length} //返回队列长度\n    show() { return arr }  //查看列队\n}\nconst PriorityQueue = new PriorityQueue()"},{"title":"访问器属性的应用","questions_id":"txtcbb-7qmgwa-kwpbgu-08tn5qe","json_path":"txtcbb-7qmgwa-kwpbgu-08tn5qe.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请实现以下需求：\n1. 声明一个变量a = 10；\n2. 声明一个变量b，b的值永远自动的保持为a的2倍；\n\n效果如下，\nvar a = 10;\nvar b;\n// 自行实现绑定\n\n最后打印的结果如下：\nconsole.log(a); // 10\nconsole.log(b); // 20\n\na = 30;\nconsole.log(a); // 30\nconsoel.log(b); // 60","student_answer":"  let a = 10, b = 0;\n  function res(){\n      b = a * 2;\n      console.log(a)\n      console.log(b)\n  }    \n  res()\n\n  let a = 30, b = 0;\n  function ress(){\n      b = a * 2;\n      console.log(a)\n      console.log(b)\n   }    \n   ress()"},{"title":"使用async函数实现多张图片的依次加载（第一张加载完之后才能加载第二张）","questions_id":"fl7dll-xh6eo-hpri8a-edulg","json_path":"fl7dll-xh6eo-hpri8a-edulg.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用async函数实现多张图片的依次加载（第一张加载完之后才能加载第二张）\n\n```js\n// 封装加载图片的promise  \nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}   \nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fSync(imgs){\n   // write your code here\n}\n\nfSync(imgs);\n```","student_answer":"let loadImg = (src) => {\n     return new Promise((resolve, reject) => {\n     let img = document.createElement('img')\n         img.src = src\n         document.body.appendChild(img)\n         setTimeout(() => {\n              resolve(true)\n          }, 1000)\n     })\n }\n const imgs = ['url1', 'url2', 'url3'];\n // 依次加载图片\n async function fSync(imgs) {\n    for (let i of imgs) {\n         await loadImg(i)\n    }\n }\n fSync(imgs);\n"}]