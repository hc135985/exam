[{"title":"匿名自执行函数的应用","questions_id":"vh80e-3d3g3o-6hy47e-ib2x4c","json_path":"vh80e-3d3g3o-6hy47e-ib2x4c.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"heinan","user_id":"fdjfr-msxp8a","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"代码如下：\n```js\nfor (var i = 0; i < 5; i++) {\n    setTimeout(function () {\n        console.log(i)\n    })\n}\n输出\n5\n5\n5\n5\n5\n```\n修改上面代码，打印结果要求为：0,1，2，3，4","student_answer":"1.用es6的let声明\nfor (let i = 0; i < 5; i++) {\n    setTimeout(function () {\n        console.log(i)\n    })\n}\n2.用自执行函数\nfor (var i = 0; i < 5; i++) {\n    (function(i){\n     \tsetTimeout(function () {\n          console.log(i)\n      \t})\n    })(i)\n }"},{"title":"react生命周期","questions_id":"xt05yo-prna5g-f7zqo-ltl5rh","json_path":"xt05yo-prna5g-f7zqo-ltl5rh.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"dingshaoshan","user_id":"ypay2t-7uxsd","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"# react常用生命周期图\n\n## 请在 “其他“ 中查看图片。 \n \n\n\n如图是react常用生命周期图，请阅读图，并在1，2，3，4处填写对应的生命周期","student_answer":"1.shouldComponentUpdate \nreact性能优化非常重要的一环。组件接受新的state或者props时调用，我们可以设置在此对比前后两个props和state是否相同，如果相同则返回false阻止更新，因为相同的属性状态一定会生成相同的dom树，这样就不需要创造新的dom树和旧的dom树进行diff算法对比，节省大量性能，尤其是在dom结构复杂的时候\n2.componentDidMount 组件渲染之后调用，只调用一次。\n3.componentDidUpdate 组件初始化时不调用，组件更新完成后调用，此时可以获取dom节点。"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"1.import React, { Component } from 'react';\nexport default (props)=>(<div>main</div>)\n函数式定义的无状态组件，它是为了创建纯展示组件\n组件不会被实例化，整体渲染性能得到提升\n这种组件只负责根据传入的props来展示，不涉及到要state状态的操作。\n内部无生命周期，没有this。\n2.import React,{Component} from 'react'\nclass Header extends Component {\n  render(){\n    return (\n      <header>我是头部</header>\n    )\n  }\n}\nes6形式的extends React.Component 定义的组件\n可以更好实现代码复用,有状态，有this，有生命周期"},{"title":"分别使用DOM0级DOM2级给一个DIV绑定事件","questions_id":"1gsxn-k09c2j-gq8peo-sohe9","json_path":"1gsxn-k09c2j-gq8peo-sohe9.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"分别使用DOM0级DOM2级给一个button绑定事件，并且描述这两种方式的区别","student_answer":"1.<button onclick=\"alert('hello')\"><button>\n document.querySelector('button').onclick = function() {\n    alert('hello')\n }\nDOM 0级事件绑定 会存在覆盖的问题,后面的事件会覆盖前面的事件\n为两种：一种是 onclick = function(){} ,还有一种是标签内写onclick事件\n\n2.document.getElementById('input').addEventListener('click', function() {\n \t\talert('hello')\n}, true)\n只有一个：监听方法，原生有两个方法用来添加和移除事件处理程序：addEventListener()和removeEventListener()。\n持绑定多个函数; 只有三个参数都相同时，才会处理称重复绑定，这时就不再往 事件池 添加，\n1、第一个参数是事件名（如click）\n2、第二个参数是事件处理程序函数\n3、第三个参数如果是true则表示在捕获阶段调用，为false表示在冒泡阶段调用。\n只有2级DOM包含3个事件：事件捕获阶段、处于目标阶段和事件冒泡阶段\ndom2级不会覆盖，会依次执行,dom1和dom2是可以共存的"},{"title":"最少两种方式实现点击每个li都弹出下标","questions_id":"puaqas-1modca-2y04jh-brcz59g","json_path":"puaqas-1modca-2y04jh-brcz59g.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"<ul id=”test”>\n    <li>这是第一条</li>\n    <li>这是第二条</li>\n    <li>这是第三条</li>\n</ul>","student_answer":"HTML代码：\n <ul id='list'>\n       <li>这是第一条</li>\n       <li>这是第二/li>\n       <li>这是第三li>\n </ul>\n1.var List = document.getElementById(\"list\")\n           List.onclick = function (event) {\n                var tg = event.target;\n                var liArray = List.getElementsByTagName(\"li\");\n                for (var i = 0; i < liArray.length; i++) {\n                    if (liArray[i] === tg) {\n                        alert(i + 1);\n                    }\n                }\n            }\n2.var liArray = document.getElementById(\"list\").getElementsByTagName(\"li\");\n            for (var i = 0; i < liArray.length; i++) {\n                (function () {\n                    var n = i;\n                    liArray[i].onclick = function () {\n                        alert(n + 1);\n                    }\n                })(i)\n            }\n"}]