[{"title":"commonjs规范","questions_id":"ayf32j-5kv76-qvfqh-cigaoo","json_path":"ayf32j-5kv76-qvfqh-cigaoo.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"请简述node环境下的commonjs规范（说出如何导出模块，如何引入模块，如何创建模块）？","student_answer":"  导出模块：exports,\n  引入模块：require\n  创建模块：require"},{"title":"let和var的区别","questions_id":"h7f6hq-cezl0g-fyu3o-6onwjf","json_path":"h7f6hq-cezl0g-fyu3o-6onwjf.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"在声明变量的时候，使用`let`和`var`有什么区别呢？","student_answer":"变量作用范围不同\nvar 可以变量提升\nES6新增let和const两个变量声明命令，他们都具有如下特性：\n1、块局作用域；\n2、不存在变量提升，一定声明后才能使用；\n3、暂时性死区，在代码块内使用let命令声明变量之前，该变量都是不可用的，不受外部变量影响；\n4、在相同作用域范围内不允许重复声明；"},{"title":"解构赋值和数组的map方法","questions_id":"izvfy-572mw-thxrmm-7aba5s","json_path":"izvfy-572mw-thxrmm-7aba5s.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"如下：是一段html结构\n```   \n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n```\n加载一段对应的javaScript代码\n\n```\n        let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })\n```\n\n请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义","student_answer":"let oUl = document.getElementsByTagName('ul')[0];   \nlet li = document.getElementsByTagName('li');\nconst {map,forEach} = [];   //从数组中解构出map，forEach方法\nli = map.call(li,item=>{  //循环遍历每一个li\nlet key = 2 * item.getAttribute('key') - 1;   //获取到每一个li的key值-1所得到的值\nitem.setAttribute('key',key);  //每一个item赋值\n    return item;\n });\noUl.innerHTML = '';\nforEach.call(li,item=>{    //循环li\n    oUl.appendChild(item);   //item追加到 oUl\n })"},{"title":"async配合transition实现自定义动画","questions_id":"bqq54a-jly2z9-m9fg7pj-oio193","json_path":"bqq54a-jly2z9-m9fg7pj-oio193.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"html结构\n```html\n<div id=\"box\"></div>\n```\ncss样式\n```css\n#box{\n  width:100px; height:100px; background-color:red; border-radius:50%; transition:transform 0.5s;\n}\n```\njavaScript代码\n```js\n        const oBox = document.getElementById('box');\n        oBox.addEventListener('transitionend',()=>{\n            let {x,y} = oBox;\n            moveTo.reslove({x,y});\n        },false);\n        function moveTo(x,y){\n            return new Promise((reslove,reject)=>{\n                moveTo.reslove = reslove;\n                oBox.x = x;\n                oBox.y = y;\n                oBox.style.transform = `translate(${x}px,${y}px)`;\n            })\n        }\n```\n\n补全以上代码，使点击oBox后，使oBox走出一个  W 的轨迹（使用async函数实现），并简单写出整体的代码思路。","student_answer":"  const oBox1 = document.getElementById('box');\n    const reslove = null;\n    oBox1.addEventListener('transitionend',()=>{\n        if(resloves){\n            resloves()\n        }\n    },false);\n    function moveTo(x,y){\n        return new Promise((reslove,reject)=>{\n            resloves = reslove;\n            oBox1.x = x;\n            oBox1.y = y;\n            oBox1.style.transform = `translate(${x}px,${y}px)`;\n        })\n    }\n\n    let Moves = [{x:0,y:0},{x:40,y:100},{x:80,y:0},{x:120,y:100},{x:160,y:0}];\n    oBox1.onclick = async () => {\n        for (let val of Moves) {\n            await moveTo(val.x, val.y)\n        }\n    }"},{"title":"输入的reduce方法","questions_id":"zyocwi-drka9-kx8vv-blrmw9p","json_path":"zyocwi-drka9-kx8vv-blrmw9p.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"现在有一个数组如下：\n```js\n    const car = [\n            {\n                groupName:'水果',\n                type:[\n                    {\n                        name:'苹果',\n                        price:10\n                    },\n                    {\n                        name:'橘子',\n                        price:40\n                    },\n                    {\n                        name:'香蕉',\n                        price:90\n                    }\n                ]\n            },\n            {\n                groupName:'蔬菜',\n                type:[\n                    {\n                        name:'芹菜',\n                        price:10\n                    },\n                    {\n                        name:'菠菜',\n                        price:15\n                    },\n                    {\n                        name:'土豆',\n                        price:8\n                    }\n                ]\n            }\n        ]\n```\n\n根据上述数据，编写一个函数，该函数(computedPrice)接收上述的数据作为参数，返回一个对象，请输入用数组的reduce方法实现。对象的格式如下\n\n```js\n       {\n            allPrice:所有商品的总价格,\n            group:[\n                {\n                    typeName:'水果',\n                    price:所有水果的总价格\n                },\n                {\n                    typeName:'蔬菜',\n                    price:所有蔬菜的总价格\n                }\n            ]\n        } \n```  ","student_answer":"class computedPrice{\n    constructor(obj){\n        this.objs = obj;\n        this.export();\n    }\n    export(){\n        let obj1 = {};\n        let group = [],typeName={};\n        this.objs.reduce((prev,next)=>{\n            let num=0,num1 = 0,num2 = 0;\n            prev.type.map(item=>{\n                num1 += item.price\n            })\n            next.type.map(item=>{\n                num2 += item.price\n            })\n            num = num1+num2;\n            group.push({typeName:p.groupName,price:num1})\n            group.push({typeName:n.groupName,price:num2});\n            obj1['allPrice'] = num;\n            obj1.group = group;\n        })\n        console.log(obj1);\n        return obj1;\n    }\n}\nnew computedPrice(car)"}]