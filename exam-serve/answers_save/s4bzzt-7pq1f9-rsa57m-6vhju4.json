[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"\nlet Width = document.documentElement.clientWidth;\nfunction size(w){\n  let flag = true\n    window.onresize = function () {\n      if (w>= 600 && flag) {\n        flag = false\n        console.log('hello')\n        return\n      } else if(w< 600){\n        flag = true\n      }\n   }\n}\nsize(Width)\n"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"函数式定义的无状态组件\n\t特点:\n      组件不会被实例化，整体渲染性能得到提升\n      因为组件被精简成一个render方法的函数来实现的，由于是无状态组件，所以无状态组件就不会在有组件实例化的过程，无实       例化过程也就不需要分配多余的内存，从而性能得到一定的提升。\n      组件不能访问this对象\n      无状态组件由于没有实例化过程，所以无法访问组件this中的对象，例如：this.ref、this.state等均不能访问。若想访问就       不能使用这种形式来创建组件\n      组件无法访问生命周期的方法\n      因为无状态组件是不需要组件生命周期管理和状态管理，所以底层实现这种形式的组件时是不会实现组件的生命周期方法。所以     无状态组件是不能参与组件的各个生命周期管理的。\n      无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\nes5原生方式React.createClass定义的组件\n\t特点：\n    React.createClass会自绑定函数方法（不像React.Component只绑定需要关心的函数）导致不必要的性能开销，增加代码过时的     可能性。\n    React.createClass的mixins不够自然、直观；React.Component形式非常适合高阶组件（Higher Order Components--HOC）,它以     更直观的形式展示了比mixins更强大的功能，并且HOC是纯净的JavaScript，不用担心他们会被废弃。HOC可以参考无状态组件       (Stateless Component) 与高阶组件。\nes6形式的extends React.Component定义的组件\n\t\t特点：\n        React.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对\t\t\t象。\n        React.Component在创建组件时配置这两个对应信息时，他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类         的静态属性来配置的\n        React.Component创建的组件，其状态state是在constructor中像初始化组件属性一样声明的。"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n       \t\tvar img = new Image();    \n\t\t\timg.src = src;    \n\t\t\tsetTimeout(()=>{\n\t\t\t\tresolve()\n\t\t\t},1000)\n\t\t\t   \n   \t })\n\t}\t   \n\tconst imgs = ['url1', 'url2', 'url3'];\n\t// 依次加载图片\n\n\tasync function fSync(imgs){\n   \tfor(let i=0;i<imgs.length;i++){\n   \t\t\tawait loadImg(imgs)\n\t\t}\n   \t}\n   \tfSync(imgs)\n"},{"title":"防抖场景实现","questions_id":"pee5rm-didl4v-b5ty-eay7yo","json_path":"pee5rm-didl4v-b5ty-eay7yo.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"题目 有一个 input 查询框，每一次 change 都会触发一个“ a 函数”\n要求\n1.此 input 框的 change 请求 在间隔 0.3s 内的过滤掉\n2.提供一个包装函数，可以对上述的“ a 函数”请求过滤做统一的封装\n```\n<input id=\"input\" />\n```","student_answer":"function a(value){\n\t\tconsole.log(`输入的内容${value}`)\n\t}\n\tconst ipt=document.getElementById('input')\n\tfunction debounce(fun,delay){\n\t\tlet timer;\n\t\treturn function (args){\n\t\t\tconst that=this\n\t\t\tclearTimeout(timer)\n\t\t\ttimer=setTimeout(function(){\n\t\t\t\tfun.call(that,args)\n\t\t\t})\n\t\t}\n\t}\n\tconst debounceInput=debounce(a,300)\n\tipt.addEventListener('change',function(e){\n\t\tdebounceInput(e.target.value)\n\t})\n"}]