[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"<span id=\"info_jb51_net\">请改变浏览器窗口大小</span>\n<script>\nwindow.onresize = function(){\ndocument.getElementById(\"info_jb51_net\").innerHTML=\"宽度：\"+document.documentElement.clientWidth+\"，高度：\"+document.documentElement.clientHeight;\n}</script>"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"函数式定义的无状态组件\nes5原生方式React.createClass定义的组件\nes6形式的extends React.Component定义的组件"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let urls = [\"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3293635140,3955114282&fm=26&gp=0.jpg\",\n            \"https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1019333328,1858047370&fm=26&gp=0.jpg\"\n        ]\n\n\n        function loadImg(url) {\n            let img = new Image()\n            img.src = url\n            return new Promise((resolve, reject) => {\n                img.onload = () => {\n                    resolve(img)\n                }\n                img.onerror = (e) => {\n                    reject(e)\n                }\n            })\n        }\n\n        function loadAll(arr) {\n            let result = []\n            arr.forEach(item => {\n                let p = loadImg(item).then((img) => {\n                        console.log(img)\n                    })\n                    //存储当前Promise对象\n                console.log(p)\n                result.push(p)\n            });\n            Promise.all(result).then(() => {\n                //全部完成\n                console.log(\"done\")\n            }).catch((err) => {\n                // 有失败的情况\n                console.log(err)\n            });\n        }\n        loadAll(urls)"}]