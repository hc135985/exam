[{"title":"commonjs规范","questions_id":"ayf32j-5kv76-qvfqh-cigaoo","json_path":"ayf32j-5kv76-qvfqh-cigaoo.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"请简述node环境下的commonjs规范（说出如何导出模块，如何引入模块，如何创建模块）？","student_answer":"1.模块引用 \n   在CommonJS规范中，存在require( )方法，它接受一个模块标识，用来引入一个模块中API\n\n2.模块定义 \n   既然在模块中有require( )方法来引入外部模块，那么也存在某个方法来导出模块的方法或者变量，对，它就是export对象。在模块中还存在一个module对象，它代表的是模块的本身，而export是module的属性。 \n\n//  method.js\nexport.add = function(n){\n    var sum = 0,i=0;\n    while(i<n){\n        sum += i;\n    }\n    return sum;\n}\n1\n\n在另一个文件中引入模块并调用定义的属性和方法：\n\n//  use.js\nvar method = required(\"method\");\nexport.fn = function(val){\n    return method.add(val);\n}\n"},{"title":"let和var的区别","questions_id":"h7f6hq-cezl0g-fyu3o-6onwjf","json_path":"h7f6hq-cezl0g-fyu3o-6onwjf.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"在声明变量的时候，使用`let`和`var`有什么区别呢？","student_answer":"一、let不能在js中使用，是es6的语法，需要在js中使用就必须使用严格模式：'use strict';\n二、声明后未赋值，表现相同\n  var varTest;\n  let letTest;\n  console.log(varTest); //输出undefined\n  console.log(letTest); //输出undefined\n也即是说声明后直接使用输出都是一样的undefined\n\n三、使用未声明的变量，不同\n console.log(varTest); //输出undefined(注意要注释掉下面一行才能运行)\n  console.log(letTest); //直接报错：ReferenceError: letTest is not defined\n直接使用没有声明的变量，let直接报错，var的提示未定义：undefined\n\n四、重复声明同一个变量的时候，不同\n var varTest = 'test var OK.';\n  let letTest = 'test let OK.';\n \n  var varTest = 'varTest changed.';\n  let letTest = 'letTest changed.'; //直接报错：SyntaxError: Identifier 'letTest' has already been declared\n \n  console.log(varTest); //输出varTest changed.(注意要注释掉上面letTest变量的重复声明才能运行)\n  console.log(letTest);\nvar 重复声明，第二次声明会覆盖第一次声明的值\n\nlet重复声明会报错\n\n五、变量作用域不同\n{\n  var varTest = 'test var OK.';\n  let letTest = 'test let OK.';\n \n  {\n    var varTest = 'varTest changed.';\n    let letTest = 'letTest changed.';\n  }\n \n  console.log(varTest); //输出\"varTest changed.\"，内部\"{}\"中声明的varTest变量覆盖外部的letTest声明\n  console.log(letTest); //输出\"test let OK.\"，内部\"{}\"中声明的letTest和外部的letTest不是同一个变量\n}\n大括号包裹的是一个作用域，不同；作用域let声明的变量只在当前的作用域里面有用，和另一个作用域里面的let声明的变量是两个不同的变量，互相不会有影响\n\n而var的声明的是全局的变量\n"},{"title":"解构赋值和数组的map方法","questions_id":"izvfy-572mw-thxrmm-7aba5s","json_path":"izvfy-572mw-thxrmm-7aba5s.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"如下：是一段html结构\n```   \n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n```\n加载一段对应的javaScript代码\n\n```\n        let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })\n```\n\n请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义","student_answer":"    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n加载一段对应的javaScript代码\n\t\t\t\t//获取元素\n        let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];\n\t\t//循环所有li  获取li自定义属性key  返回Key*2-1值\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n\t\t//把uldom 清空\n        oUl.innerHTML = '';\n\t//把 清空 后的dom 渲染成新循环追加的li\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })"},{"title":"async配合transition实现自定义动画","questions_id":"bqq54a-jly2z9-m9fg7pj-oio193","json_path":"bqq54a-jly2z9-m9fg7pj-oio193.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"html结构\n```html\n<div id=\"box\"></div>\n```\ncss样式\n```css\n#box{\n  width:100px; height:100px; background-color:red; border-radius:50%; transition:transform 0.5s;\n}\n```\njavaScript代码\n```js\n        const oBox = document.getElementById('box');\n        oBox.addEventListener('transitionend',()=>{\n            let {x,y} = oBox;\n            moveTo.reslove({x,y});\n        },false);\n        function moveTo(x,y){\n            return new Promise((reslove,reject)=>{\n                moveTo.reslove = reslove;\n                oBox.x = x;\n                oBox.y = y;\n                oBox.style.transform = `translate(${x}px,${y}px)`;\n            })\n        }\n```\n\n补全以上代码，使点击oBox后，使oBox走出一个  W 的轨迹（使用async函数实现），并简单写出整体的代码思路。","student_answer":"async function(){\n\tawait move(val)\n}\n\n       const oBox = document.getElementById('box');\n        oBox.addEventListener('transitionend',()=>{\n            let {x,y} = oBox;\n            moveTo.reslove({x,y});\n        },false);\n        function moveTo(x,y){\n            return new Promise((reslove,reject)=>{\n                moveTo.reslove = reslove;\n                oBox.x = x;\n                oBox.y = y;\n                oBox.style.transform = `translate(${x}px,${y}px)`;\n            })\n        }"},{"title":"输入的reduce方法","questions_id":"zyocwi-drka9-kx8vv-blrmw9p","json_path":"zyocwi-drka9-kx8vv-blrmw9p.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"现在有一个数组如下：\n```js\n    const car = [\n            {\n                groupName:'水果',\n                type:[\n                    {\n                        name:'苹果',\n                        price:10\n                    },\n                    {\n                        name:'橘子',\n                        price:40\n                    },\n                    {\n                        name:'香蕉',\n                        price:90\n                    }\n                ]\n            },\n            {\n                groupName:'蔬菜',\n                type:[\n                    {\n                        name:'芹菜',\n                        price:10\n                    },\n                    {\n                        name:'菠菜',\n                        price:15\n                    },\n                    {\n                        name:'土豆',\n                        price:8\n                    }\n                ]\n            }\n        ]\n```\n\n根据上述数据，编写一个函数，该函数(computedPrice)接收上述的数据作为参数，返回一个对象，请输入用数组的reduce方法实现。对象的格式如下\n\n```js\n       {\n            allPrice:所有商品的总价格,\n            group:[\n                {\n                    typeName:'水果',\n                    price:所有水果的总价格\n                },\n                {\n                    typeName:'蔬菜',\n                    price:所有蔬菜的总价格\n                }\n            ]\n        } \n```  ","student_answer":"   let computedPrice = (obj, ind) => {\n            let arr = [],\n                brr = [],\n                crr = []\n            let apobj = {},\n                chiobj = {}\n            let allPrice = {},\n                appleprice, chiprice\n            obj.forEach((item, ind) => {\n                console.log(item.groupName)\n                item.type.forEach(val => {\n                    arr.push(val.price)\n                })\n                if (item.groupName == \"水果\") {\n                    item.type.forEach(val => {\n                        brr.push(val.price)\n                    })\n\n                    apobj.groupName = item.groupName\n                    apobj.price = priceAll(brr)\n                    console.log(brr)\n                        //  return appleprice = priceAll(brr)\n                }\n                if (item.groupName == \"蔬菜\") {\n                    item.type.forEach(val => {\n                        crr.push(val.price)\n                    })\n                    chiobj.groupName = item.groupName;\n                    chiobj.price = priceAll(crr)\n                        // return chiprice = priceAll(crr)\n                }\n            });\n\n            allPrice.allPrice = priceAll(arr)\n\n            //console.log(arr.flat(Infinity))\n            let obs = [allPrice, apobj, chiobj]\n            console.log(obs)\n            return obs\n        }\n\n        let priceAll = (arr) => {\n            let num = arr.reduce(function(prev, cur) {\n                return prev + cur\n            })\n            return num\n        }\n\n        computedPrice(car)\n\n       {\n            allPrice:所有商品的总价格,\n            group:[\n                {\n                    typeName:'水果',\n                    price:所有水果的总价格\n                },\n                {\n                    typeName:'蔬菜',\n                    price:所有蔬菜的总价格\n                }\n            ]\n        } \n答题框：\nJavaScript\n1\n​\n"}]