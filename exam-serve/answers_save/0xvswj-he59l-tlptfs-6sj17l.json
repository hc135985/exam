[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"let flag = 0\n\nwindow.onresize = function(){\n    if(document.documentElement.clientWidth>=600){\n        flag++;\n        flag===1&&console.log('hellow')\n    } else{\n        flag=0\n    }\n}"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"函数式定义的无状态组件\n \t组件不会被实例化，整体渲染性能得到提升\n   组件不能访问this对象\n   组件无法访问生命周期的方法\n   无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\nes5原生方式React.createClass定义的组件\n\t有状态的组件，这些组件是要被实例化的，并且可以访问组件的生命周期方法\n   会自绑定函数方法,导致不必要的性能开销，增加代码过时的可能性。\nes6形式的extends React.Component定义的组件\n\t有状态的组件，这些组件是要被实例化的，并且可以访问组件的生命周期方法\n   可以更好实现代码复用\n   不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg = (src)=>{\n  \treturn new Promise((resolve, reject)=>{\n       let image = new Image()\n       image.onload=function(){\n           resolve(image)\n       }\n       image.onerror=function(){\n           reject(new Error('Could not load image at ' + src))\n        }\n       image.src = src;\n    })\n};"}]