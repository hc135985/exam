[{"title":"vue基础知识","questions_id":"00o5nwy-qw7jj-ko6qkb-4uwrhv","json_path":"00o5nwy-qw7jj-ko6qkb-4uwrhv.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 谈谈Vue中v-for指令里key的作用？","student_answer":"v-for 中 key的作用主要是为了高效的更新虚拟Dom, vue中在使用相同标签名元素的过渡切换时，也是通过key属性，来让vue可以区分它们 "},{"title":"Vue基础知识","questions_id":"05snch-6eq8dn-szfd6q-t34nld","json_path":"05snch-6eq8dn-szfd6q-t34nld.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 控制元素显示隐藏的指令v-if与v-show之间的区别及适用场景？","student_answer":"区别:\n方式：v-if是动态的向DOM树内添加或者删除DOM元素；v-show是通过设置DOM元素的display样式属性控制显隐； \n编译：v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于css切换； \n条件：v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译（编译被缓存？编译被缓存后，然后再切换的时候进行局部卸载); v-show是在任何条件下（首次条件是否为真）都被编译，然后被缓存，而且DOM元素保留； \n性能：v-if有更高的切换消耗；v-show有更高的初始渲染消耗；\n\n使用场景:\nv-if适合运营条件不大可能改变；v-show适合频繁切换。 \n（1）对于管理系统的权限列表的展示，这里可以使用v-if来渲染，如果使用到v-show，对于用户没有的权限，在网页的源码中，仍然能够显示出该权限，如果用v-if，网页的源码中就不会显示出该权限。（在前后台分离情况下，后台不负责渲染页面的场景。） \n（2）对于前台页面的数据展示，推荐使用v-show，这样可以减少开发中不必要的麻烦。 "},{"title":"vue自定义指令","questions_id":"6ivrh-g7kp8a-2gixkg-p117t","json_path":"6ivrh-g7kp8a-2gixkg-p117t.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"## 阅读如下代码，写出代码的功能，输入和输出\n```js\nVue.filter('formatDate', function(value){\n  let date = new Date();\n  date.setTime(value);\n  let year = date.getFullYear(),\n      month = (date.getMonth() + 1).toString().padStart(2, '0'),\n      day = date.getDate().toString().padStart(2, '0'),\n      hour = date.getHours().toString().padStart(2, '0'),\n      min = date.getMinutes().toString().padStart(2, '0'),\n      sec = date.getSeconds().toString().padStart(2, '0');\n  return `${year}-${month}-${day} ${hour}:${min}:${sec}`\n});\n```","student_answer":"这段代码用于 格式化时间成标准日期格式\n输入 时间戳/日期\n输出 YYYY-MM-DD hh:mm:ss 格式的日期, 且会自动补0 "},{"title":"使用async函数实现多张图片的依次加载（第一张加载完之后才能加载第二张）","questions_id":"fl7dll-xh6eo-hpri8a-edulg","json_path":"fl7dll-xh6eo-hpri8a-edulg.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用async函数实现多张图片的依次加载（第一张加载完之后才能加载第二张）\n\n```js\n// 封装加载图片的promise  \nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}   \nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fSync(imgs){\n   // write your code here\n}\n\nfSync(imgs);\n```","student_answer":"let loadImg = (src)=>{\n            return new Promise((resolve, reject)=>{\n                // write your code here\n                let img = new Image()\n                    img.src = src;\n                    img.onload = ()=>{\n                        document.body.append(img)\n                        resolve()\n                    }       \n            })\n        }\n        const imgs = ['./Paper/02.jpg', './Paper/03.jpg', './Paper/04.jpg'];\n            // 依次加载图片\n        async function fSync(imgs){\n            for (let i = 0; i < imgs.length; i++) {\n                const element = imgs[i];\n                await loadImg(element)    \n             }\n }   \n fSync(imgs)"}]