[{"title":"青蛙跳台阶","questions_id":"cy51s-cirofn-vxvrne-hgh3tk","json_path":"cy51s-cirofn-vxvrne-hgh3tk.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"用js实现青蛙跳台阶，一共十个台阶，青蛙每次跳一个或者两个台阶，打印出所有可能的跳跃方法（例如：[1,1,1,1,1,1,1,1,1,1]/[2,2,2,2,2]/[1,1,1,1,1,1,1,1,2]）","student_answer":"using std::vector;\nusing std::cout;\nusing std::endl;\n\nlong long frog_fun1(int n)\n{\n    if(n <=0 )\n        return 0;\n    if(n == 1)\n        return 1;\n    if(n == 2)\n        return 2;\n    return frog_fun1(n-1)+frog_fun1(n-2);\n}\nlong long frog_fun2(int n)\n{\n\n    int result[] = {0,1,2};\n    if(n < 0)\n        return result[0];\n    if(n <3)\n        return result[n];\n\n    long long frog_one = 2;\n    long long frog_two = 1;\n    long long frog_result = 0;\n    for(int i=3;i <=n ;++i)\n    {\n        frog_result = frog_one + frog_two;\n        frog_two = frog_one;\n        frog_one = frog_result;\n    }\n    return frog_result;\n\n}\n\nlong long forg_fun3_result(vector<long long>& r,int n)\n{\n    if(r[n]!=-1)\n        return r[n];\n\n    if(n >= 3)\n        r[n] = forg_fun3_result(r,n-1)+forg_fun3_result(r,n-2);\n\n\n    return r[n];\n}\nlong long forg_fun3(int n)\n{\n    if(n <= 0)\n        return 0;\n    if(n == 1)\n        return 1;\n    vector<long long> r(n+1,-1);\n    r[0] = 0; \n    r[1] = 1;\n    r[2] = 2;\n    return forg_fun3_result(r,n);\n\n}\n\n\nvoid Test(int n)\n{\n    cout<<\"(\"<<n<<\"):\"<<\":\"<<frog_fun2(n)<<\":\"<<forg_fun3(n)<<endl;\n    //cout << \"frog_fun1:\"<<frog_fun1(n)<<endl;\n}\nint main()\n{\n    for(int i=-1;i <40;++i)\n    {\n        Test(i);\n    }\n    return 0;\n}\n！"},{"title":"大小文件读取","questions_id":"z9ndnc-qhzc6-wb5vju-0pvnzk","json_path":"z9ndnc-qhzc6-wb5vju-0pvnzk.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"封装一个方法适配大小文件的读取，限定值2M","student_answer":"const ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    // ...\n    new ExtractTextPlugin({ filename: '[name].[contenthash].css', allChunks: false }),\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        exclude: /node_modules/,\n        use: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: ['css-loader?modules', 'postcss-loader'],\n        }),\n      }, {\n        test: /\\.css$/,\n        include: /node_modules/,\n        use: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: ['css-loader', 'postcss-loader'],\n        }),\n      },\n      {\n        test: /\\.less$/,\n        use: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: ['css-loader?modules', 'less-loader', 'postcss-loader'],\n        }),\n      },\n    ],\n  },\n}"},{"title":"实现多维数组转换为一维数组","questions_id":"60gn1-9nj3mi-hv4xz-t6ecp","json_path":"60gn1-9nj3mi-hv4xz-t6ecp.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"封装一个函数可以使得n维数组转换为1维数组，输出","student_answer":"//采用递归实现：\nfunction array_multi2single($array) {\nstatic $result_array = array(); \nforeach($array as $value) { \nif(is_array($value)) {\narray_multi2single($value); \n} else {\n$result_array[] = $value;\n}\n}\nreturn $result_array;\n}"},{"title":"实现一个评星方法","questions_id":"tak6bp-2bpj3-xh6jpg-elkb8u","json_path":"tak6bp-2bpj3-xh6jpg-elkb8u.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"实现一个评星方法\n说明\n* 可根据传入的评分和总数，返回评星结果（用 ★ 和 ☆ 描述）\n* 评分必选项，四舍五入，总数可选，大于0的整数，默认为5\n* 对于评分为空或小于0、评分大于总数、总数小于0或总数非整数的情况，返回'errror'\n示例\n```\ngetRate(4); // ★★★★☆\ngetRate(4, 8); // ★★★★☆☆☆☆\ngetRate(3.4); //  ★★★☆☆\ngetRate(5, 2); // 'error'\ngetRate(-2); // 'error'\ngetRate(3, 5.5); // 'error'\n```\n\n\n\n\n\n\n\n\n\n\n\n","student_answer":"window.onload = function(){\n\tstars(7) //  满分 7 分 根据 html 自定义星星数\n}\nfunction stars(size){\n        //获取总的星星数\n        var stars = document.querySelectorAll('.stars> span')\n        // 得分数组\n        var scores=[]\n        // 评分项数组\n        var starArrs = []\n        //数组分割\n        for(var i = 0; i<Math.ceil(stars.length/size);i++ ){\n            var start = i*size\n            var end = start+size\n            //初始评分为0\n            scores.push(0)\n            starArrs.push([].slice.call(stars,start,end))\n        }\n        // 事件委托父元素\n        document.querySelector('.stars-wrapper').onclick = function(e){\n            //获取点击的星星 在 总数组中的index\n            var index = [].indexOf.call(stars,e.target)\n            // 如果点击的 不是星星 \n            if(index===-1) return\n            // 判断 该星星归属 评分项数组\n            var i = parseInt(index/size)\n            var starArr =starArrs[ i ]\n             // 计算归属评分项 的评分\n             index = index%size\n             // 评分未更改\n             if(index ===( scores[ i ] - 1)){\n             \tconsole.log(scores)\n             \t return scores\n            }\n            scores[ i ] =  index+1\n            \n               //显示评分红色托马斯基柴夫波娃效果\n            starArr.forEach(function(star,i){\n                if(i<= index){\n                    star.classList.toggle('active',true)\n                }else{\n                    star.classList.toggle('active',false)\n                }\n            })\n            console.log(scores)\n            return scores\n        }\n    }\n// 数组分割 可以自定义成一个函数\n  function arrayChunck(arr,size){\n        if(!arr.length) return\n        var arrs = []\n        for(var i=0; i< Math.ceil(arr.length/7);i++){\n            var start = i*size\n            var end = start+size\n            arrs.push([].slice.call(arr,start,end))\n        }\n        return arrs\n    }\n"}]