[{"title":"青蛙跳台阶","questions_id":"cy51s-cirofn-vxvrne-hgh3tk","json_path":"cy51s-cirofn-vxvrne-hgh3tk.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"用js实现青蛙跳台阶，一共十个台阶，青蛙每次跳一个或者两个台阶，打印出所有可能的跳跃方法（例如：[1,1,1,1,1,1,1,1,1,1]/[2,2,2,2,2]/[1,1,1,1,1,1,1,1,2]）","student_answer":"    function qingwa(n) {\n    var target = 0,\n        number1 = 1,\n        number2 = 2;\n\n    if (n <= 0) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    for (var i = 3; i <= n; ++i) {\n        target = number1 + number2;\n        number1 = number2;\n        number2 = target;\n    }\n    return target;\n}\n\nconsole.log(qingwa(100))"},{"title":"大小文件读取","questions_id":"z9ndnc-qhzc6-wb5vju-0pvnzk","json_path":"z9ndnc-qhzc6-wb5vju-0pvnzk.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"封装一个方法适配大小文件的读取，限定值2M","student_answer":"//限制图片大小\n var $ = S.all,\n    D = S.DOM;\n\n var Max_Size = 2000; //2M\nvar Max_Width = 100; //100px\n var Max_Height = 200; //200px\n function testMaxSize(file) {\n    if (file.files && file.files[0]) {\n        var fileData = file.files[0];\n        var size = fileData.size; //注意，这里读到的是字节数\n\n       var isAllow = false;\n     if (!size) isAllow = false;\n       var maxSize = Max_Size;\n       isAllow = size <= maxSize;\n        showTip1(isAllow);\n\n    } else {\n        console.log('error')\n   }\n }\n\n\n"},{"title":"实现多维数组转换为一维数组","questions_id":"60gn1-9nj3mi-hv4xz-t6ecp","json_path":"60gn1-9nj3mi-hv4xz-t6ecp.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"封装一个函数可以使得n维数组转换为1维数组，输出","student_answer":"function arrFn (){\n  var a = [1,3,4,5,[6,7,9],[2],[5]];\n \ta = a.join(\",\").split(\",\"); \n   //输出结果\n  console.log(a)//a=[1,3,4,5,6,7,9,2,5];\n}\n\n\n\n\n"},{"title":"实现一个评星方法","questions_id":"tak6bp-2bpj3-xh6jpg-elkb8u","json_path":"tak6bp-2bpj3-xh6jpg-elkb8u.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"实现一个评星方法\n说明\n* 可根据传入的评分和总数，返回评星结果（用 ★ 和 ☆ 描述）\n* 评分必选项，四舍五入，总数可选，大于0的整数，默认为5\n* 对于评分为空或小于0、评分大于总数、总数小于0或总数非整数的情况，返回'errror'\n示例\n```\ngetRate(4); // ★★★★☆\ngetRate(4, 8); // ★★★★☆☆☆☆\ngetRate(3.4); //  ★★★☆☆\ngetRate(5, 2); // 'error'\ngetRate(-2); // 'error'\ngetRate(3, 5.5); // 'error'\n```\n\n\n\n\n\n\n\n\n\n\n\n","student_answer":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <style>\n        .stars {\n            background: #ff0;\n            padding: 5px;\n            margin-bottom: 10px;\n        }\n        \n        .stars span {\n            display: inline-block;\n            width: 20px;\n            height: 20px;\n            background: #ccc;\n            margin-right: 10px;\n        }\n        \n        span.active {\n            background: red;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"stars-wrapper\">\n        //评分项1\n        <div class=\"stars\">\n            <span>1</span>\n            <span>2</span>\n            <span>3</span>\n            <span>4</span>\n            <span>5</span>\n            <span>6</span>\n            <span>7</span>\n        </div>\n        //评分项2\n        <div class=\"stars\">\n            <span>1</span>\n            <span>2</span>\n            <span>3</span>\n            <span>4</span>\n            <span>5</span>\n            <span>6</span>\n            <span>7</span>\n        </div>\n        //评分项3\n        <div class=\"stars\">\n            <span>1</span>\n            <span>2</span>\n            <span>3</span>\n            <span>4</span>\n            <span>5</span>\n            <span>6</span>\n            <span>7</span>\n        </div>\n    </div>\n    <script>\n        window.onload = function() {\n    stars(7) //  满分 7 分 根据 html 自定义星星数\n}\n\nfunction stars(size) {\n    //获取总的星星数\n    var stars = document.querySelectorAll('.stars> span')\n        // 得分数组\n    var scores = []\n        // 评分项数组\n    var starArrs = []\n        //数组分割\n    for (var i = 0; i < Math.ceil(stars.length / size); i++) {\n        var start = i * size\n        var end = start + size\n            //初始评分为0\n        scores.push(0)\n        starArrs.push([].slice.call(stars, start, end))\n    }\n    // 事件委托父元素\n    document.querySelector('.stars-wrapper').onclick = function(e) {\n        //获取点击的星星 在 总数组中的index\n        var index = [].indexOf.call(stars, e.target)\n            // 如果点击的 不是星星 \n        if (index === -1) return\n            // 判断 该星星归属 评分项数组\n        var i = parseInt(index / size)\n        var starArr = starArrs[i]\n            // 计算归属评分项 的评分\n        index = index % size\n            // 评分未更改\n        if (index === (scores[i] - 1)) {\n            console.log(scores)\n            return scores\n        }\n        scores[i] = index + 1\n\n        //显示评分红色托马斯基柴夫波娃效果\n        starArr.forEach(function(star, i) {\n            if (i <= index) {\n                star.classList.toggle('active', true)\n            } else {\n                star.classList.toggle('active', false)\n            }\n        })\n        console.log(scores)\n        return scores\n    }\n}\n// 数组分割 可以自定义成一个函数\nfunction arrayChunck(arr, size) {\n    if (!arr.length) return\n    var arrs = []\n    for (var i = 0; i < Math.ceil(arr.length / 7); i++) {\n        var start = i * size\n        var end = start + size\n        arrs.push([].slice.call(arr, start, end))\n    }\n    return arrs\n}  \n    </script>\n</body>\n\n<ml>"}]