[{"title":"Vue基础知识","questions_id":"05snch-6eq8dn-szfd6q-t34nld","json_path":"05snch-6eq8dn-szfd6q-t34nld.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 控制元素显示隐藏的指令v-if与v-show之间的区别及适用场景？","student_answer":"v-if\n\tv-if是动态的向DOM树内添加或者删除DOM元素； \n\t切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件\n\t是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译（编译被缓存？编译被缓存后，然后再切换的时候进行局部卸载)\n\t有更高的切换消耗\n\t适合运营条件不大可能改变；\nv-show\n\t是通过设置DOM元素的display样式属性控制显隐； \n \t只是简单的基于css切换； \n\t是在任何条件下（首次条件是否为真）都被编译，然后被缓存，而且DOM元素保留； \n\t有更高的初始渲染消耗； \n \t适合频繁切换。"},{"title":"使用async函数实现多张图片的依次加载（哪张加载完哪张添加到页面）","questions_id":"5oxqyl-8dnbaa-3dt3o9-qrecrk","json_path":"5oxqyl-8dnbaa-3dt3o9-qrecrk.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用async函数实现多张图片的依次加载（哪张加载完哪张添加到页面）\n\n```js\n// 封装加载图片的promise  \nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}   \nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fAsync(imgs){\n   // write your code here\n}\n\nfAsync(imgs);\n```","student_answer":"let loadImg = (src) => {\n        return new Promise((resolve, reject) => {\n            let img = document.createElement('img')\n            img.src = src\n            document.body.append(img)\n            setTimeout(() => {\n                resolve(true)\n            }, 1000)\n        })\n    }\n    const imgs = ['../src/img/1.jpg', '../src/img/2.jpg', '../src/img/3.jpg'];\n    // 依次加载图片1\n    async function fSync(imgs) {\n        for (let i of imgs) {\n            await loadImg(i)\n        }\n    }\n    fSync(imgs);\n"},{"title":"vue自定义指令","questions_id":"6ivrh-g7kp8a-2gixkg-p117t","json_path":"6ivrh-g7kp8a-2gixkg-p117t.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"## 阅读如下代码，写出代码的功能，输入和输出\n```js\nVue.filter('formatDate', function(value){\n  let date = new Date();\n  date.setTime(value);\n  let year = date.getFullYear(),\n      month = (date.getMonth() + 1).toString().padStart(2, '0'),\n      day = date.getDate().toString().padStart(2, '0'),\n      hour = date.getHours().toString().padStart(2, '0'),\n      min = date.getMinutes().toString().padStart(2, '0'),\n      sec = date.getSeconds().toString().padStart(2, '0');\n  return `${year}-${month}-${day} ${hour}:${min}:${sec}`\n});\n```","student_answer":"这个题模拟时间\n\n学会了padStart()方法"},{"title":"vue自定义指令","questions_id":"9wck8-qt73nd-0v6s8-f6jyid","json_path":"9wck8-qt73nd-0v6s8-f6jyid.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"## 阅读如下代码，写出代码的功能，输入和输出\n```js\nVue.filter('toThousandFilter', function(num){\n  return (+num || 0).toString().replace(/^-?\\d+/g, m => m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ','))\n});\n```","student_answer":"javascript格式化数字成K,M等格式\n\n function nFormatter(num, digits) {\n                const si = [\n                    { value: 1, symbol: \"\" },\n                    { value: 1E3, symbol: \"K\" },\n                    { value: 1E6, symbol: \"M\" },\n                    { value: 1E9, symbol: \"G\" },\n                    { value: 1E12, symbol: \"T\" },\n                    { value: 1E15, symbol: \"P\" },\n                    { value: 1E18, symbol: \"E\" }\n                ];\n                const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n                let i;\n                for (i = si.length - 1; i > 0; i--) {\n                    if (num >= si[i].value) {\n                        break;\n                    }\n                }\n                return (num / si[i].value).toFixed(digits).replace(rx, \"$1\") + si[i].symbol;\n            }\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n原本格式\n\n    <div class=\"stat-display__value\">22200</div>\n    <div class=\"stat-display__value\">3388990000000</div>\n1\n2\n经过js:\n\n $('.stat-display__value').each(function () {\n                num = nFormatter($(this).text(), 2);\n                $(this).html(num);\n            });\n1\n2\n3\n4\n呈现格式：\n\n22.K\n3.39T\n1\n2\n另外，将数字以，每三位隔开：\n\nfunction toThousandslsFilter(num) {\n   return (+num || 0).toString().replace(/^-?\\d+/g, m => m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ','));\n   }"}]