[{"title":"commonjs规范","questions_id":"ayf32j-5kv76-qvfqh-cigaoo","json_path":"ayf32j-5kv76-qvfqh-cigaoo.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"请简述node环境下的commonjs规范（说出如何导出模块，如何引入模块，如何创建模块）？","student_answer":"//commonjs规定每个js文件都是一个模块，都拥有单独的作用域 ，也就是说，在一个模块里定义的变量，包括函数和类，在外部都是访问不到，如果想被访问到，必须挂载到global对象上\n\n// 1 引入模块 require()\n\n// 2 导出模块 exports,exports只能导出对象 Eg: exports.key = val;module.exports可以导出当前内容形式\n\n// 3 创建模块 \n//在 Node.js 中，创建一个模块非常简单，如下我们创建一个 main.js 文件，代码如下:\nvar hello = require('./hello');\nhello.world();\n//以上实例中，代码 require('./hello') 引入了当前目录下的 hello.js 文件（./ 为当前目录，node.js 默认后缀为 js）\n//接下来我们就来创建 hello.js 文件，代码如下：\nexports.world = function() {\n    console.log('Hello World');\n}"},{"title":"let和var的区别","questions_id":"h7f6hq-cezl0g-fyu3o-6onwjf","json_path":"h7f6hq-cezl0g-fyu3o-6onwjf.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"在声明变量的时候，使用`let`和`var`有什么区别呢？","student_answer":"//1 let具有块级作用域\n//2 let不存在变量提升,let声明的变量一定要在声明后使用，否则报错,var会发生变量提升，变量可以在声明前使用，值为undefined\n//3 let具有暂时性死区，只要块级作用域内存在let命令，在该代码块内，使用let命令声明变量之前，该变量都是不可用的\n//4 不允许重复声明\n//综上所述：\n//var定义的变量是全局变量或者函数变量\n//let定义的变量是块级的变量\n//例如：\nwhile(1){\nlet let1 = 2;\nvar var1 = 2;\n}\nalert(let1); //不可访问\nalert(var1); //可以访问\n// 也就是说，let只对它所在的最内侧块内有效，而var的范围至少是一个函数之内"},{"title":"解构赋值和数组的map方法","questions_id":"izvfy-572mw-thxrmm-7aba5s","json_path":"izvfy-572mw-thxrmm-7aba5s.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"如下：是一段html结构\n```   \n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n```\n加载一段对应的javaScript代码\n\n```\n        let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })\n```\n\n请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义","student_answer":" //获取节点ul\n        let oUl = document.getElementsByTagName('ul')[0];\n        //获取所有的li\n        let li = document.getElementsByTagName('li');\n        //es6语法 const定义了一个对象，解构对象方法\n        const {\n            map,\n            forEach\n        } = [];\n        // map遍历，执行callback函数，this指向li, item=>li\n        li = map.call(li, item => {\n            //将每一项li上绑定的值key * 2 - 1(修改每个item的key值，重新赋值返回) \n            let key = 2 * item.getAttribute('key') - 1;\n            //console.log(key); //1 3 5 7\n            item.setAttribute('key', key);\n            //返回item\n            return item;\n        });\n        oUl.innerHTML = '';\n        //遍历li   item为每一项\n        forEach.call(li, item => {\n            //把每一项追加到oUl\n            oUl.appendChild(item);\n        })"},{"title":"解决以下异步代码问题","questions_id":"pwrym-ypsrgi-3smad-bm9d1m","json_path":"pwrym-ypsrgi-3smad-bm9d1m.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"检索并计算属于同一教室中每个学生的平均分数，例子中教室 ID 为 75。每个学生可以在一年内参加一门或多门课程。以下 API 可用于检索所需数据。\n```\n// GET LIST OF ALL STUDENTS\nGET /api/students\nResponse:\n[{\n    \"id\": 1,\n    \"name\": \"John\",\n    \"classroomId\": 75\n}]\n// GET COURSES FOR GIVEN A STUDENT\nGET /api/courses?filter=studentId eq 1\nResponse:\n[{\n    \"id\": \"history\",\n    \"studentId\": 1\n}, {\n    \"id\": \"algebra\",\n    \"studentId\": 1\n}]\n// GET EVALUATION FOR EACH COURSE\nGET /api/evaluation/history?filter=studentId eq 1\nResponse:\n{\n    \"id\": 200,\n    \"score\": 50,\n    \"totalScore\": 100\n}\n```\n编写一个接受教室 ID 的函数，并根据该函数计算该教室中每个学生的平均值。 该函数的最终输出应该是带有平均分数的学生列表：\n```\n[\n  { \"id\": 1, \"name\": \"John\", \"average\": 70.5 },\n  { \"id\": 3, \"name\": \"Lois\", \"average\": 67 },\n}\n```\n使用普通回调，promises，observables，generator 或 async-wait 编写所需的函数。 尝试使用至少 2 种不同的技术解决这个问题。\n代码素材用于代替接口\n```\nconst APIS = {\n  STUDENTS: '/api/students',\n  COURSES: '/api/courses',\n  EVALUATION: '/api/evaluation/'\n}; \nfunction fetchData(api) {\n  return new Promise(resolve => {\n    let data = null;\n    switch (api) {\n      case APIS.STUDENTS:\n        data = [{\n          id: 1,\n          name: 'John',\n          classroomId: 75\n        }, {\n          id: 1,\n          name: 'Tom',\n          classroomId: 75\n        }];\n        break;\n      case APIS.COURSES:\n        data = [{\n          id: 'history',\n          studentId: 1\n        }, {\n          id: 'algebra',\n          studentId: 1\n        }];\n        break;\n      case APIS.EVALUATION:\n        data = {\n          id: '200',\n          score: 50,\n          totalScore: 100\n        };\n        break;\n    } \n    resolve(data);\n  });\n} \n```","student_answer":"let data = [{\n    \"id\": 1,\n    \"name\": \"a\",\n    \"classID\": 11,\n    \"class\": [\n        { \"chinese\": 90 },\n        { \"math\": 40 }\n    ]\n}, {\n    \"id\": 2,\n    \"name\": \"b\",\n    \"classID\": 22,\n    \"class\": [\n        { \"english\": 80 },\n        { \"math\": 50 }\n    ]\n}]\n\nconst APIS = {\n    STUDENTS: '/api/students',\n    COURSES: '/api/courses',\n    EVALUATION: '/api/evaluation/'\n};\n\nfunction formateData(api, data) {\n    return new Promise(resolve => {\n        let arr = [];\n        switch (api) {\n            case APIS.STUDENTS:\n                let stu = data.map(item => {\n                    return `{\n                                id: ${item.id},\n                                name: ${item.name}',\n                                classroomId: ${item.classID}\n                            }`\n                }).join('')\n                arr.push(stu)\n                break;\n        }\n        resolve(arr)\n    })\n}"}]