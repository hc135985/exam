[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"let str = '';\nwindow.onresize=function(){\n  if(document.body.clientWidth>=600){\n    if(str === ''){\n      str = 'hello';\n      console.log(str);\n    }else{\n      return;\n    }\n  }\n}"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"函数式定义的无状态组件\n区别：为了创建纯展示组件，这种组件只负责根据传入的props来展示，不涉及到要state状态的操作,组件不会被实例化，整体渲染性能得到提升,组件不能访问this对象,组件无法访问生命周期的方法,只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用.\n示例：\nimport React from 'react';\n\nexport default props => (\n    <div>\n        我是函数组件\n    </div>\n)\nes5原生方式React.createClass定义的组件\n区别：创建有状态的组件,并且可以访问组件的生命周期方法,React.createClass会自绑定函数方法,但是会导致不必要的性能开销，而且也不够自然、直观，React.createClass创建的组件，其每一个成员函数的this都有React自动绑定，任何时候使用，直接使用this.method即可，函数中的this会被正确设置。\n示例：\nimport React from 'react';\nconst EmptyRowsView = React.createClass({\n  render() {\n    return (<div>我是 createClass 组件</div>);\n   }\n})\nexport default EmptyRowsView;\n\nes6形式的extends React.Component定义的组件\n区别：以ES6的形式来创建，可以更好实现代码复用，React.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。\n示例：\nimport React,{Component} from 'react';\nexport default class Header extends Component {\n    render(){\n        return (\n            <div>\n                我是Component组件\n            </div>\n        )\n    }\n} \n\n非受控组件\n定义：该组件内部的状态不受state控制；\n缺点：组件的变化不容易管理；\n示例：\nimport React,{Component} from 'react';\nclass Demo extends Component {\n\trender(){\n   \t\treturn <input type='text' defaultValue='demo' /> \n    }\n}\t\nexport default Demo;\n  \n 受控组件\n 定义：组件的状态变化受到state的控制；\n import React,{Component} from 'react';\n class Demo extends Component {\n   constructore(){\n   \t super()\n    this.state = {\n    \tvalues:''\n     } \n   }\n   render(){\n     return <input type='text' value={this.state.values} onChange={this.handleChange}/> \n   }\n     \n   handleChange = (e) => {\n   \tthis.setState({\n    values:e.target.value\n    })\n   }\n  }\t\n export default Demo;\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  "},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg = (src)=>{\n  return new Promise((resolve, reject)=>{\n    var image = new Image();\n    image.onload = function () {\n      resolve(image);\n    }\n    image.onerror = function () {\n      reject(new Error('Could not load image at '+src))\n    }\n    image.src = src\n  })\n}"}]