[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"window.onresize = function(){\n\tif(document.body.offsetWidth>=600){\n       console.log('hello')\n\t}\n}"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"react创建组件有如下几种方式\n\n　　①.函数式定义的无状态组件\n\n　　②.es5原生方式React.createClass定义的组件\n\n 　  ③.es6形式的extends React.Component定义的组件\n\n1、无状态函数式组件\n创建无状态函数式组件形式是从React 0.14版本开始出现的。它是为了创建纯展示组件，这种组件只负责根据传入的props来展示，不涉及到要state状态的操作。具体的无状态函数式组件，其官方指出：\n\n在大部分React代码中，大多数组件被写成无状态的组件，通过简单组合可以构建成其他的组件等；这种通过多个简单然后合并成一个大应用的设计模式被提倡。\n\n无状态函数式组件形式上表现为一个只带有一个render方法的组件类，通过函数形式或者ES6 arrow function的形式在创建，并且该组件是无state状态的。具体的创建形式如下：\n\nfunction HelloComponent(props, /* context */) {\n  return <div>Hello {props.name}</div>\n}\nReactDOM.render(<HelloComponent name=\"Sebastian\" />, mountNode) \n无状态组件的创建形式使代码的可读性更好，并且减少了大量冗余的代码，精简至只有一个render方法，大大的增强了编写一个组件的便利，除此之外无状态组件还有以下几个显著的特点：\n\n组件不会被实例化，整体渲染性能得到提升\n因为组件被精简成一个render方法的函数来实现的，由于是无状态组件，所以无状态组件就不会在有组件实例化的过程，无实例化过程也就不需要分配多余的内存，从而性能得到一定的提升。\n组件不能访问this对象\n无状态组件由于没有实例化过程，所以无法访问组件this中的对象，例如：this.ref、this.state等均不能访问。若想访问就不能使用这种形式来创建组件\n组件无法访问生命周期的方法\n因为无状态组件是不需要组件生命周期管理和状态管理，所以底层实现这种形式的组件时是不会实现组件的生命周期方法。所以无状态组件是不能参与组件的各个生命周期管理的。\n无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\n无状态组件被鼓励在大型项目中尽可能以简单的写法来分割原本庞大的组件，未来React也会这种面向无状态组件在譬如无意义的检查和内存分配领域进行一系列优化，所以只要有可能，尽量使用无状态组件。\n\n \n\n2、React.createClass\nReact.createClass 是react刚开始推荐的创建组件的方式，这是ES5的原生的JavaScript来实现的React组件，其形式如下：\n\n复制代码\nvar InputControlES5 = React.createClass({\n    propTypes: {//定义传入props中的属性各种类型\n        initialValue: React.PropTypes.string\n    },\n    defaultProps: { //组件默认的props对象\n        initialValue: ''\n    },\n    // 设置 initial state\n    getInitialState: function() {//组件相关的状态对象\n        return {\n            text: this.props.initialValue || 'placeholder'\n        };\n    },\n    handleChange: function(event) {\n        this.setState({ //this represents react component instance\n            text: event.target.value\n        });\n    },\n    render: function() {\n        return (\n            <div>\n                input something:<input onChange={this.handleChange} value={this.state.text} />\n            </div>\n        );\n    }\n});\nInputControlES6.propTypes = {\n    initialValue: React.PropTypes.string\n};\nInputControlES6.defaultProps = {\n    initialValue: ''\n};\n复制代码\n与无状态组件相比，React.createClass和后面要描述的React.Component都是创建有状态的组件，这些组件是要被实例化的，并且可以访问组件的生命周期方法。但是随着React的发展，React.createClass形式自身的问题暴露出来：\n\nReact.createClass会自绑定函数方法（不像React.Component只绑定需要关心的函数）导致不必要的性能开销，增加代码过时的可能性。\nReact.createClass的mixins不够自然、直观；React.Component形式非常适合高阶组件（Higher Order Components--HOC）,它以更直观的形式展示了比mixins更强大的功能，并且HOC是纯净的JavaScript，不用担心他们会被废弃。HOC可以参考无状态组件(Stateless Component) 与高阶组件。\n3、React.Component\nReact.Component是以ES6的形式来创建react的组件的，是React目前极为推荐的创建有状态组件的方式，最终会取代React.createClass形式；相对于 React.createClass可以更好实现代码复用。将上面React.createClass的形式改为React.Component形式如下：\n\n复制代码\nclass InputControlES6 extends React.Component {\n    constructor(props) {\n        super(props);\n        // 设置 initial state\n        this.state = {\n            text: props.initialValue || 'placeholder'\n        };\n        // ES6 类中函数必须手动绑定\n        this.handleChange = this.handleChange.bind(this);\n    }\n    handleChange(event) {\n        this.setState({\n            text: event.target.value\n        });\n    }\n    render() {\n        return (\n            <div>\n                Type something:\n                <input onChange={this.handleChange}\n               value={this.state.text} />\n            </div>\n        );\n    }\n}\nInputControlES6.propTypes = {\n    initialValue: React.PropTypes.string\n};\nInputControlES6.defaultProps = {\n    initialValue: ''\n};\n复制代码\n4、React.createClass与React.Component区别\n根据上面展示代码中二者定义组件的语法格式不同之外，二者还有很多重要的区别，下面就描述一下二者的主要区别。\n\n函数this自绑定\nReact.createClass创建的组件，其每一个成员函数的this都有React自动绑定，任何时候使用，直接使用this.method即可，函数中的this会被正确设置。\n\n复制代码\nconst Contacts = React.createClass({  \n  handleClick() {\n    console.log(this); // React Component instance\n  },\n  render() {\n    return (\n      <div onClick={this.handleClick}></div>\n    );\n  }\n});\n复制代码\nReact.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。关于bind可参看文章：http://www.cnblogs.com/zuobaiquan01/p/8728949.html\n\n复制代码\nclass Contacts extends React.Component {  \n  constructor(props) {\n    super(props);\n  }\n  handleClick() {\n    console.log(this); // null\n  }\n  render() {\n    return (\n      <div onClick={this.handleClick}></div>\n    );\n  }\n复制代码\n当然，React.Component有三种手动绑定方法：可以在构造函数中完成绑定，也可以在调用时使用method.bind(this)来完成绑定，还可以使用arrow function来绑定。拿上例的handleClick函数来说，其绑定可以有：\n\nconstructor(props) {\n   super(props);\n   this.handleClick = this.handleClick.bind(this); //构造函数中绑定\n}\n1\n<div onClick={this.handleClick.bind(this)}></div> //使用bind来绑定\n<div onClick={()=>this.handleClick()}></div> //使用arrow function来绑定\n组件属性类型propTypes及其默认props属性defaultProps配置不同\nReact.createClass在创建组件时，有关组件props的属性类型及组件默认的属性会作为组件实例的属性来配置，其中defaultProps是使用getDefaultProps的方法来获取默认组件属性的\n\n复制代码\nconst TodoItem = React.createClass({\n    propTypes: { // as an object\n        name: React.PropTypes.string\n    },\n    getDefaultProps(){   // return a object\n        return {\n            name: ''    \n        }\n    }\n    render(){\n        return <div></div>\n    }\n})\n复制代码\nReact.Component在创建组件时配置这两个对应信息时，他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类的静态属性来配置的。对应上面配置如下：\n\n\nclass TodoItem extends React.Component {\n    static propTypes = {//类的静态属性\n        name: React.PropTypes.string\n    };\n    static defaultProps = {//类的静态属性\n        name: ''\n    };\n    ...\n}\n\n组件初始状态state的配置不同\nReact.createClass创建的组件，其状态state是通过getInitialState方法来配置组件相关的状态；\nReact.Component创建的组件，其状态state是在constructor中像初始化组件属性一样声明的。\n\n\nconst TodoItem = React.createClass({\n    // return an object\n    getInitialState(){ \n        return {\n            isEditing: false\n        }\n    }\n    render(){\n        return <div></div>\n    }\n})\n\nclass TodoItem extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = { // define this.state in constructor\n            isEditing: false\n        } \n    }\n    render(){\n        return <div></div>\n    }\n}\n\nMixins的支持不同\nMixins(混入)是面向对象编程OOP的一种实现，其作用是为了复用共有的代码，将共有的代码通过抽取为一个对象，然后通过Mixins进该对象来达到代码复用。具体可以参考React Mixin的前世今生。\n\nReact.createClass在创建组件时可以使用mixins属性，以数组的形式来混合类的集合。\n\n\nvar SomeMixin = {  \n  doSomething() {\n\n  }\n};\nconst Contacts = React.createClass({  \n  mixins: [SomeMixin],\n  handleClick() {\n    this.doSomething(); // use mixin\n  },\n  render() {\n    return (\n      <div onClick={this.handleClick}></div>\n    );\n  }\n});\n\n但是遗憾的是React.Component这种形式并不支持Mixins，至今React团队还没有给出一个该形式下的官方解决方案；但是React开发者社区提供一个全新的方式来取代Mixins,那就是Higher-Order Components，具体细节可以参考这篇文章\n\n如何选择哪种方式创建组件\n由于React团队已经声明React.createClass最终会被React.Component的类形式所取代。但是在找到Mixins替代方案之前是不会废弃掉React.createClass形式。所以：\n\n能用React.Component创建的组件的就尽量不用React.createClass形式创建组件。\n除此之外，创建组件的形式选择还应该根据下面来决定：\n\n1、只要有可能，尽量使用无状态组件创建形式。\n2、否则（如需要state、生命周期方法等），使用`React.Component`这种es6形式创建组件\n补充一点\n\n无状态组件内部其实是可以使用ref功能的，虽然不能通过this.refs访问到，但是可以通过将ref内容保存到无状态组件内部的一个本地变量中获取到。\n\n例如下面这段代码可以使用ref来获取组件挂载到dom中后所指向的dom元素：\n\nfunction TestComp(props){\n    let ref;\n    return (<div>\n        <div ref={(node) => ref = node}>\n            ...\n        </div>\n    </div>)\n}\n\n\n"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"function loadImageAsync(url) {\n  return new Promise(function(resolve, reject) {\n    const image = new Image();\n    image.onload = function() {\n      resolve(image);\n    };\n    image.onerror = function() {\n      reject(new Error('Could not load image at ' + url));\n    };\n    image.src = url;\n  });\n}"}]