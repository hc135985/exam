[{"title":"Vue基础知识","questions_id":"05snch-6eq8dn-szfd6q-t34nld","json_path":"05snch-6eq8dn-szfd6q-t34nld.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 控制元素显示隐藏的指令v-if与v-show之间的区别及适用场景？","student_answer":"区别：\nv-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。 \nv-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。 \nv-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。\nv-if是动态的向DOM树内添加或者删除DOM元素；v-show是通过设置DOM元素的display样式属性控制显隐； \nv-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于css切换\n\n适用场景：\nv-if 有更高的切换开销，而 v-show 有更高的初始渲染开销\n如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。\nv-if适合运营条件不大可能改变；v-show适合频繁切换。 "},{"title":"使用async函数实现多张图片的依次加载（哪张加载完哪张添加到页面）","questions_id":"5oxqyl-8dnbaa-3dt3o9-qrecrk","json_path":"5oxqyl-8dnbaa-3dt3o9-qrecrk.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用async函数实现多张图片的依次加载（哪张加载完哪张添加到页面）\n\n```js\n// 封装加载图片的promise  \nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}   \nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fAsync(imgs){\n   // write your code here\n}\n\nfAsync(imgs);\n```","student_answer":"let loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n      \t let img=document.querySelector('img')\n        img.src=src;\n        documnet.body.append(img)\n        setTimeout(()=>{\n            resolve(true)\n        },1000)\n    })\n}   \nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fSync(imgs){\n   // write your code here\n  \t for(let i of imgs){\n        await loadImg(i)\n    }\n}\nfSync(imgs);\n"},{"title":"vue自定义指令","questions_id":"6ivrh-g7kp8a-2gixkg-p117t","json_path":"6ivrh-g7kp8a-2gixkg-p117t.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"## 阅读如下代码，写出代码的功能，输入和输出\n```js\nVue.filter('formatDate', function(value){\n  let date = new Date();\n  date.setTime(value);\n  let year = date.getFullYear(),\n      month = (date.getMonth() + 1).toString().padStart(2, '0'),\n      day = date.getDate().toString().padStart(2, '0'),\n      hour = date.getHours().toString().padStart(2, '0'),\n      min = date.getMinutes().toString().padStart(2, '0'),\n      sec = date.getSeconds().toString().padStart(2, '0');\n  return `${year}-${month}-${day} ${hour}:${min}:${sec}`\n});\n```","student_answer":"功能：过滤时间戳\n  <div id=\"app\">\n           {{message|formatDate}}\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>    \n    <script>\n        Vue.filter('formatDate', function (value) {\n            console.log(value)\n            let date = new Date();\n            console.log(date)\n            date.setTime(value);\n            let year = date.getFullYear(),\n                month = (date.getMonth() + 1).toString().padStart(2, '0'),\n                day = date.getDate().toString().padStart(2, '0'),\n                hour = date.getHours().toString().padStart(2, '0'),\n                min = date.getMinutes().toString().padStart(2, '0'),\n                sec = date.getSeconds().toString().padStart(2, '0');\n            return `${year}-${month}-${day} ${hour}:${min}:${sec}`\n        });\n        new Vue({\n            el: '#app',\n            data: {\n                message: '1555721721000'\n            }\n        });\n    </script>\n输入：1555721721000    \n输出：2019-04-20 08:55:21"},{"title":"vue自定义指令","questions_id":"9wck8-qt73nd-0v6s8-f6jyid","json_path":"9wck8-qt73nd-0v6s8-f6jyid.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"## 阅读如下代码，写出代码的功能，输入和输出\n```js\nVue.filter('toThousandFilter', function(num){\n  return (+num || 0).toString().replace(/^-?\\d+/g, m => m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ','))\n});\n```","student_answer":"功能：千分位过滤器\n<div id=\"app\">\n           {{message|toThousandFilter}}\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>    \n    <script>\n        Vue.filter('toThousandFilter', function(num){\n          return (+num || 0).toString().replace(/^-?\\d+/g, m => m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ','))  //用逗号替换千分符\n        });\n        new Vue({\n            el: '#app',\n            data: {\n                message: '1555721721000'\n            }\n        });\n    </script>\n输入：1555721721000\n输出：155,572,172,000"}]