[{"title":"commonjs规范","questions_id":"ayf32j-5kv76-qvfqh-cigaoo","json_path":"ayf32j-5kv76-qvfqh-cigaoo.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"请简述node环境下的commonjs规范（说出如何导出模块，如何引入模块，如何创建模块）？","student_answer":"CommonJS规范就是模块加载机制被称为CommonJS规范。\n在这个规范下，每个js文件都是一个模块，它们内部各自使用的变量名和函数名都互不冲突\n使用require方式引入模块\n使用module.exports导出模块"},{"title":"let和var的区别","questions_id":"h7f6hq-cezl0g-fyu3o-6onwjf","json_path":"h7f6hq-cezl0g-fyu3o-6onwjf.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"在声明变量的时候，使用`let`和`var`有什么区别呢？","student_answer":"let 是es6语法，需要在js中使用就必须使用严格模式，var不用\n声明后未赋值，表现相同\n使用未声明的变量不同：直接使用没有声明的变量，let直接报错，var的提示未定义：undefined\n重复声明同一个变量的时候不同：var 可以重复声明，第二次声明会覆盖第一次声明的值，let重复声明会报错\n变量作用域不同：let声明的变量只在当前的作用域里面有用，而var的声明的是全局的变量"},{"title":"解构赋值和数组的map方法","questions_id":"izvfy-572mw-thxrmm-7aba5s","json_path":"izvfy-572mw-thxrmm-7aba5s.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"如下：是一段html结构\n```   \n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n```\n加载一段对应的javaScript代码\n\n```\n        let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })\n```\n\n请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义","student_answer":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n    <script>\n        // 获取文档中的ul\n        let oUl = document.getElementsByTagName('ul')[0];\n        // 获取文档中所有的li\n        let li = document.getElementsByTagName('li');\n        // 声明一个空数组\n        const {map,forEach} = [];\n        // 循环遍历每一个li\n        li = map.call(li,item=>{\n            // 声明一个key的变量为li中自定义属性的key值乘2减1\n            let key = 2 * item.getAttribute('key') - 1;\n            // 重新设置li中自定义属性的key值为上一段代码中声明的key值\n            item.setAttribute('key',key);\n            // 返回每一项li\n            return item;\n        });\n        // 重新书写结构\n        oUl.innerHTML = '';\n        // 再次遍历返回的li\n        forEach.call(li,item=>{\n            // 追加到获取的oUl元素中\n            oUl.appendChild(item);\n        })\n    </script>\n</body>\n</html>"},{"title":"async配合transition实现自定义动画","questions_id":"bqq54a-jly2z9-m9fg7pj-oio193","json_path":"bqq54a-jly2z9-m9fg7pj-oio193.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"html结构\n```html\n<div id=\"box\"></div>\n```\ncss样式\n```css\n#box{\n  width:100px; height:100px; background-color:red; border-radius:50%; transition:transform 0.5s;\n}\n```\njavaScript代码\n```js\n        const oBox = document.getElementById('box');\n        oBox.addEventListener('transitionend',()=>{\n            let {x,y} = oBox;\n            moveTo.reslove({x,y});\n        },false);\n        function moveTo(x,y){\n            return new Promise((reslove,reject)=>{\n                moveTo.reslove = reslove;\n                oBox.x = x;\n                oBox.y = y;\n                oBox.style.transform = `translate(${x}px,${y}px)`;\n            })\n        }\n```\n\n补全以上代码，使点击oBox后，使oBox走出一个  W 的轨迹（使用async函数实现），并简单写出整体的代码思路。","student_answer":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <style>\n        #box {\n            width: 100px;\n            height: 100px;\n            background-color: red;\n            border-radius: 50%;\n            transition: transform 0.5s;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"box\"></div>\n    <script>\n        const oBox = document.getElementById('box');\n        oBox.addEventListener('transitionend',()=>{\n            let {x,y} = oBox;\n            moveTo.reslove({x,y});\n        },false);\n        function moveTo(x,y){\n            return new Promise((reslove,reject)=>{\n                moveTo.reslove = reslove;\n                oBox.x = x;\n                oBox.y = y;\n                oBox.style.transform = `translate(${x}px,${y}px)`;\n            })\n        }\n        // 声明一个W走位数组\n        const positionW=[\n            { x: 0, y: 0 },\n            { x: 100, y: 200 },\n            { x: 200, y: 0 },\n            { x: 300, y: 200 },\n            { x: 400, y: 0 }\n        ]\n        // 创建一个asyns函数\n        oBox.onclick=async function(){\n            // 循环走位数组\n            for(let i of positionW){\n                // 通过async中的await来监听pormise,等待每一次的pormise加载完之后之后再去执行下一步\n                await moveTo(i.x,i.y)\n            }\n        }\n    </script>\n</body>\n\n</html>"},{"title":"输入的reduce方法","questions_id":"zyocwi-drka9-kx8vv-blrmw9p","json_path":"zyocwi-drka9-kx8vv-blrmw9p.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"现在有一个数组如下：\n```js\n    const car = [\n            {\n                groupName:'水果',\n                type:[\n                    {\n                        name:'苹果',\n                        price:10\n                    },\n                    {\n                        name:'橘子',\n                        price:40\n                    },\n                    {\n                        name:'香蕉',\n                        price:90\n                    }\n                ]\n            },\n            {\n                groupName:'蔬菜',\n                type:[\n                    {\n                        name:'芹菜',\n                        price:10\n                    },\n                    {\n                        name:'菠菜',\n                        price:15\n                    },\n                    {\n                        name:'土豆',\n                        price:8\n                    }\n                ]\n            }\n        ]\n```\n\n根据上述数据，编写一个函数，该函数(computedPrice)接收上述的数据作为参数，返回一个对象，请输入用数组的reduce方法实现。对象的格式如下\n\n```js\n       {\n            allPrice:所有商品的总价格,\n            group:[\n                {\n                    typeName:'水果',\n                    price:所有水果的总价格\n                },\n                {\n                    typeName:'蔬菜',\n                    price:所有蔬菜的总价格\n                }\n            ]\n        } \n```  ","student_answer":"let sum=car.reduce(function(x,y){\n            let arr=x.type;\n            let brr=y.type;\n            let num=0;\n            let nums=0;\n            arr.map(item=>{\n                num+=item.price;\n                return num\n            })\n            brr.map(item=>{\n                nums+=item.price;\n                return nums\n            })\n  \t\t\t\tfunction priceNum(){\n                priceNum.prototype.type=x.groupName;\n                priceNum.prototype.price=num;\n            }\n            let priceNumFn=new priceNum()\n            console.log(`所有水果的总价格为${num},所有蔬菜的总价格为${nums}`)\n        })"}]