[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"        let open = true;\n        window.onresize = function () {\n            if (window.innerWidth >= 600) {\n                if (open) {\n                    console.log(\"hello \");\n                    open = false;\n                }\n            } else {\n                open = true;\n            }\n        }"},{"title":"肥猫列表","questions_id":"a2u5p-vzci28-ctdv2a-zux3v","json_path":"a2u5p-vzci28-ctdv2a-zux3v.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"dingshaoshan","user_id":"ypay2t-7uxsd","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"现在有很多只猫，都很肥：\n\nconst cats = [\n  { name: 'Tom', weight: 300 },\n  { name: 'Lucy', weight: 400 },\n  { name: 'Lily', weight: 700 },\n  { name: 'Jerry', weight: 600 },\n  ...\n]\n\n现在你需要把它们按照由胖到瘦的顺序排个序","student_answer":"        const cats = [ { name: 'Tom', weight: 300 }, { name: 'Lucy', weight: 400 }, { name: 'Lily', weight: 700 }, { name:                      'Jerry', weight: 600 } ];\n        cats.sort(function(a,b){\n          //降序排序\n           return b.weight-a.weight;\n        })\n        for(var i=0;i<cats.length;i++){\n          console.log(cats[i].name)\n        }"},{"title":"实现双向数据绑定","questions_id":"nodsz-nme56x-51nrc-tklsfn","json_path":"nodsz-nme56x-51nrc-tklsfn.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"使用js实现一个数据双向绑定效果, input中输入的内容同步到p标签中\n```\n<div id=\"app\">\n    <input type=\"text\" id=\"txt\">\n    <p id=\"show-txt\"></p>\n</div>\n```","student_answer":"<div id=\"app\">\n    <input type=\"text\" id=\"txt\">\n    <p id=\"show-txt\">{{txtval}}</p>\n</div\n\n//js代码\nlet obj={};\nvar txt=document.querySelector(\"#txt\")\nvar showtxt=document.querySelector(\"#show-txt\")\n\nObject.defineProperty(obj,\"txtval\",{\n    set:function(val){\n      showtxt.innerHTML = val;\n      txt.value=val;\n    }\n})\ntxt.onkeyup=function(e){\n    obj.txtval=e.target.value;\n}\nobj.txtval=\"\";"},{"title":"最高产的猪","questions_id":"oynzjn-gvvv5s-uowecl-m4yg2h","json_path":"oynzjn-gvvv5s-uowecl-m4yg2h.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"dingshaoshan","user_id":"ypay2t-7uxsd","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"我们用一个 HTML 结构来表示一头猪的子子孙孙：\n<div class=\"pig\">\n  <div class=\"pig\">\n    <div class=\"pig\">\n      <div class=\"pig\"></div>\n    </div>\n    <div class=\"pig\">\n      <div class=\"pig\"></div>\n    </div>\n  </div>\n  <div class=\"pig\">\n    <div class=\"pig\"></div>\n    <div class=\"pig\"></div>\n  </div>\n  <div class=\"pig\">\n    <div class=\"pig\">\n      <div class=\"pig\"></div>\n      <div class=\"pig\"></div>\n      <div class=\"pig\"></div>\n      <div class=\"pig\"></div>\n      <div class=\"pig\"></div>\n    </div>\n  </div>\n</div>\n\n每个 DOM 节点都是一头猪，子节点就是这头猪的孩子。\n请你完成一个函数 mostProductivePigCount 它接受一个 DOM 节点作为参数，返回一个数组。存放同代猪的孩子的数量。\n\n比如第一代猪的孩子有3个，第二代猪的孩子分别有[2, 2, 1]，第三代猪的孩子分别有[1,1,0,0,5]","student_answer":"let pig=document.querySelector(\".pig\");\nconst findMostProductivePigChildrenCount = (dom) => {\n        let result = [];\n        // 广度优先遍历\n        const find = (targets, result) => {\n            // 下一轮待遍历的节点\n            let childrenTargets = [];\n            // 当前轮遍历后子节点的最大值\n            let max = 0;\n            // 当前轮遍历\n            for (let target of targets) {\n                // 如果有子节点\n                if (target.childElementCount) {\n                    // 将子节点放入待遍历的数组中\n                    childrenTargets.push(...target.children);\n                    // 当前轮遍历后子节点的最大值\n                    max = Math.max(max, target.childElementCount)\n                }\n            }\n            result.push(max);\n            // 进行下一轮遍历\n            if (childrenTargets.length) {\n                find(childrenTargets, result)\n            }\n        };\n        // 初始化遍历，根节点放入队列中\n        find([dom], result);\n        return result;\n    }\n      var pig = document.querySelector('.pig')\n        console.log(findMostProductivePigChildrenCount(pig))\n   \n   /*let pig=document.querySelector(\".pig\");\n   function getdom(dom){\n    let allchild=[];\n    allchild.push(dom.children);\n    for(let i=0;i<allchild.length;i++){\n        getdom(dom.children[i])\n    }\n   }\n   console.log(getdom(pig))"}]