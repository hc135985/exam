[{"title":"commonjs规范","questions_id":"ayf32j-5kv76-qvfqh-cigaoo","json_path":"ayf32j-5kv76-qvfqh-cigaoo.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"请简述node环境下的commonjs规范（说出如何导出模块，如何引入模块，如何创建模块）？","student_answer":"上下文提供了exports对象用于导出当前模块的方法或者变量，并且它是唯一的出口。在模块中，存在一个module对象，它代表模块自身，而exports是module的属性。在Node中，一个文件就是一个模块，将方法挂载在exports对象上作为属性即可定义导出的方式。我们把公共的功能抽成一个单独的js文件作为一个模块，默认情况下外部是无法访问这个模块里的方法或者属性。如果想让外部访问模块内的属性和方法，必须在模块里通过exports或者module.exports暴露需要被外部访问的属性和方法。\n在模块中有require( )方法来引入外部模块。Node在其内部提供一个Module的构建函数。所有模块都是Module的实例，每个文件就是一个模块，有自己的作用域。。这样就可以使用这个模块里抛出来的属性和方法。 require命令用于加载模块文件，相当于读入并执行一个js文件，然后返回该模块的exports对象，没有发现指定模块，则就会报错。\n核心模块部分在Node源代码的编译过程中，编译进了二进制执行文件。在Node进程启动时，部分核心模块就被直接加载进内存中，所以这部分核心模块引入时，文件定位和编译执行这两个步骤可以省略掉，并且在路径分析中优先判断，所以它的加载速度是最快的，自己封装方法或属性，其次使用模块的两种方法（exports或module.exports）来抛出去，在另一个文件里用require(\"\")方法来接收抛出来的东西；"},{"title":"let和var的区别","questions_id":"h7f6hq-cezl0g-fyu3o-6onwjf","json_path":"h7f6hq-cezl0g-fyu3o-6onwjf.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"在声明变量的时候，使用`let`和`var`有什么区别呢？","student_answer":"通过var定义的变量，作用域是整个封闭函数，是全域的 。通过let定义的变量，作用域是在块级或是子块中。\n-不论var声明的变量处于当前作用域的第几行，都会提升到作用域的头部。 \n-var 声明的变量会被提升到作用域的顶部并初始化为undefined，而let声明的变量在作用域的顶部未被初始化\nlet不允许在相同作用域内，重复声明同一个变量。var可以重复声明。\n只要块级作用域内存在let命令，它所声明的变量就“绑定”这个区域，不再受外部的影响。总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的，尽管代码块外也存在相同全局变量。\nlet不能在js中使用，是es6的语法，需要在js中使用就必须使用严格模式：'use strict';"},{"title":"解构赋值和数组的map方法","questions_id":"izvfy-572mw-thxrmm-7aba5s","json_path":"izvfy-572mw-thxrmm-7aba5s.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"如下：是一段html结构\n```   \n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n```\n加载一段对应的javaScript代码\n\n```\n        let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })\n```\n\n请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义","student_answer":"结果为：\n\t<ul>\n        <li key=\"1\"></li>\n        <li key=\"3\"></li>\n        <li key=\"5\"></li>\n        <li key=\"7\"></li>\n    </ul>\n1.let oUl = document.getElementsByTagName('ul')[0];  //获取ul标签 定义为oUl\n2.let li = document.getElementsByTagName('li');  //获取所有li标签 定义为li\n3.const {map,forEach} = [];  //从数组中把 map forEach 方法给结构出来，便于下面使用\n4.li = map.call(li,item=>{   //用li来接收map方法返回的结果  map.call 参数一：指向为li 参数二：它里面的每一项(li标签）\n      let key = 2 * item.getAttribute('key') - 1; //修改li标签里key的值，用getAttribute()方法获取li的key属性 进行运算2*[1|2|3|4]-1\n      item.setAttribute('key',key);  //用setAttribute()方法进行属性设置，修改  参数一：要设置的属性  参数二：要设置的属性值\n      return item; //最后返回item\n   });\n5.oUl.innerHTML = ''; //将ul里的内容全部清空\n6.  forEach.call(li,item=>{  //用结构出来的forEach方法改变this指向(li),并获取每一项\n      oUl.appendChild(item); //把每一项内容追加在ul里面\n    })\n"},{"title":"async配合transition实现自定义动画","questions_id":"bqq54a-jly2z9-m9fg7pj-oio193","json_path":"bqq54a-jly2z9-m9fg7pj-oio193.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"html结构\n```html\n<div id=\"box\"></div>\n```\ncss样式\n```css\n#box{\n  width:100px; height:100px; background-color:red; border-radius:50%; transition:transform 0.5s;\n}\n```\njavaScript代码\n```js\n        const oBox = document.getElementById('box');\n        oBox.addEventListener('transitionend',()=>{\n            let {x,y} = oBox;\n            moveTo.reslove({x,y});\n        },false);\n        function moveTo(x,y){\n            return new Promise((reslove,reject)=>{\n                moveTo.reslove = reslove;\n                oBox.x = x;\n                oBox.y = y;\n                oBox.style.transform = `translate(${x}px,${y}px)`;\n            })\n        }\n```\n\n补全以上代码，使点击oBox后，使oBox走出一个  W 的轨迹（使用async函数实现），并简单写出整体的代码思路。","student_answer":"  const oBox = document.getElementById('box');\n        oBox.addEventListener('transitionend', () => { // 监听动画完成的事件\n            if (globalReslove) {\n                globalReslove()\n            }\n        });\n        function move(x, y) {  //promise的方法，x，y分别代表要移动的横向和纵向的距离\n            return new Promise((reslove, reject) => {\n                oBox.style.transform = `translate(${x}px,${y}px)`\n                globalReslove = reslove;\n            })\n        }\n\n        //实现w走位\n        const wPosition = [\n            { x: 0, y: 0 },\n            { x: 50, y: 150 },\n            { x: 100, y: 0 },\n            { x: 150, y: 150 },\n            { x: 200, y: 0 }\n        ]\n        oBox.onclick = async function () {\n            for (let i of wPosition) {\n                await move(i.x, i.y)\n            }\n        }\n\n思路：x y 分别代表横轴和纵轴的坐标\n\t自行封装一个promise方法，设置它的transform属性；用字符串的方法写；\n    成功时候执行的回调函数(resolve) 进行赋值；\n    在监听动画完成的时候进行判断  调用成功的回调函数\n    写一个数组   数组里面写w走位的相对应的5个坐标点  用wPosition接收\n    最后绑定点击事件，使用 async 函数，遍历数组，调用上方的方法  (只有使用asyn-await函数才能让动画按顺序往下执行)"},{"title":"输入的reduce方法","questions_id":"zyocwi-drka9-kx8vv-blrmw9p","json_path":"zyocwi-drka9-kx8vv-blrmw9p.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"现在有一个数组如下：\n```js\n    const car = [\n            {\n                groupName:'水果',\n                type:[\n                    {\n                        name:'苹果',\n                        price:10\n                    },\n                    {\n                        name:'橘子',\n                        price:40\n                    },\n                    {\n                        name:'香蕉',\n                        price:90\n                    }\n                ]\n            },\n            {\n                groupName:'蔬菜',\n                type:[\n                    {\n                        name:'芹菜',\n                        price:10\n                    },\n                    {\n                        name:'菠菜',\n                        price:15\n                    },\n                    {\n                        name:'土豆',\n                        price:8\n                    }\n                ]\n            }\n        ]\n```\n\n根据上述数据，编写一个函数，该函数(computedPrice)接收上述的数据作为参数，返回一个对象，请输入用数组的reduce方法实现。对象的格式如下\n\n```js\n       {\n            allPrice:所有商品的总价格,\n            group:[\n                {\n                    typeName:'水果',\n                    price:所有水果的总价格\n                },\n                {\n                    typeName:'蔬菜',\n                    price:所有蔬菜的总价格\n                }\n            ]\n        } \n```  ","student_answer":"const meta = new Promise((resolve, reject) => {\n            let data = car;\n            if (data) {\n                resolve(data)\n            } else {\n                reject(new Error(`错`))\n            }\n        })\n        let one = 0, two = 0, arr = [];\n        function render(data) {\n            for (let v of data[0].type) {\n                one += v.price;\n                console.log(one)\n                arr.push(one)\n            }\n            for (let v of data[1].type) {\n                two += v.price;\n                console.log(two)\n                arr.push(two)\n            }\n            return arr;\n        }\n        // meta.then(data => {\n        //     render(data)\n        // })\n        function computedPrice(data) {\n            meta.then(data => {\n                render(data)\n            })\n        }\n        computedPrice() "}]