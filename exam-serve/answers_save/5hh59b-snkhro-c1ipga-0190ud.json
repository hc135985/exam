[{"title":"匿名自执行函数的应用","questions_id":"vh80e-3d3g3o-6hy47e-ib2x4c","json_path":"vh80e-3d3g3o-6hy47e-ib2x4c.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"heinan","user_id":"fdjfr-msxp8a","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"代码如下：\n```js\nfor (var i = 0; i < 5; i++) {\n    setTimeout(function () {\n        console.log(i)\n    })\n}\n输出\n5\n5\n5\n5\n5\n```\n修改上面代码，打印结果要求为：0,1，2，3，4","student_answer":"setTimeout(function () {\n    for (var i = 0; i < 5; i++) {\n    console.log(i)\n    }\n})"},{"title":"react生命周期","questions_id":"xt05yo-prna5g-f7zqo-ltl5rh","json_path":"xt05yo-prna5g-f7zqo-ltl5rh.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"dingshaoshan","user_id":"ypay2t-7uxsd","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"# react常用生命周期图\n\n## 请在 “其他“ 中查看图片。 \n \n\n\n如图是react常用生命周期图，请阅读图，并在1，2，3，4处填写对应的生命周期","student_answer":"shouldComponentUpdate(nextProps,nextState)\ncomponentDidMount\ncomponentDidUpdate  "},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"函数式定义的无状态组件：\n1.组件不会被实例化，整体渲染性能得到提升\n2.组件不能访问this对象\n3.组件无法访问生命周期的方法\n4.无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\n\n有状态组件分为：es5原生方式React.createClass定义的组件和es6形式的extends React.Component定义的组件\n区别：\n1.函数this自绑定：React.createClass创建的组件，其每一个成员函数的this都有React自动绑定，任何时候使用，直接使用this.method即可，函数中的this会被正确设置。\n2. 组件属性类型propTypes及其默认props属性defaultProps配置不同\nReact.createClass在创建组件时，有关组件props的属性类型及组件默认的属性会作为组件实例的属性来配置，其中defaultProps是使用getDefaultProps的方法来获取默认组件属性的\n3. 组件初始状态state的配置不同\nReact.createClass创建的组件，其状态state是通过getInitialState方法来配置组件相关的状态；\nReact.Component创建的组件，其状态state是在constructor中像初始化组件属性一样声明的。\n4. Mixins的支持不同\n\n\n"},{"title":"分别使用DOM0级DOM2级给一个DIV绑定事件","questions_id":"1gsxn-k09c2j-gq8peo-sohe9","json_path":"1gsxn-k09c2j-gq8peo-sohe9.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"分别使用DOM0级DOM2级给一个button绑定事件，并且描述这两种方式的区别","student_answer":"    btn.addEventListener('click',function(){\n      console.log('原生dom2级第一次click')\n     },false);\n    btn.addEventListener('click',function(){\n      console.log('原生dom2级第二次click')\n     },false);\n区别：不会覆盖，会依次执行\n-----------DOM0-------------------\n     btn.onclick=function(){\n        console.log('111');\n     };\n    btn.onclick=function(){\n      console.log('222');\n\t\t};\n区别：绑定onclick事件是dom0级，第二个会覆盖第一个onclick只会弹出222。"},{"title":"最少两种方式实现点击每个li都弹出下标","questions_id":"puaqas-1modca-2y04jh-brcz59g","json_path":"puaqas-1modca-2y04jh-brcz59g.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"<ul id=”test”>\n    <li>这是第一条</li>\n    <li>这是第二条</li>\n    <li>这是第三条</li>\n</ul>","student_answer":"var lis=document.getElementsByTagName('li');\nlis=Array.prototype.slice.call(lis,0);\nlis.forEach(function(v,i){\nv.onclick=function(){\n  alert(i);\n  }\n})\n------------------------------------------------\n var oli=document.getElementsByTagName('li');  \n for(var i=0; i<oli.length;i++)  \n  {     \n     oli[i].index=i;  \n    oli[i].onclick=function(){  \n    alert(this.index);\n    }  \n  } \n-----------------------------------------------\nvar aa = document.getElementsByTagName(\"li\");\n    for(var i=0;i<aa.length;i++){\n        aa[i].onclick=(function(n){\n            return function(){\n                console.log(n);\n            }\n        })(i);"}]