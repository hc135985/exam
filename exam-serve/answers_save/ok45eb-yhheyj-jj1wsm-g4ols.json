[{"title":"匿名自执行函数的应用","questions_id":"vh80e-3d3g3o-6hy47e-ib2x4c","json_path":"vh80e-3d3g3o-6hy47e-ib2x4c.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"heinan","user_id":"fdjfr-msxp8a","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"代码如下：\n```js\nfor (var i = 0; i < 5; i++) {\n    setTimeout(function () {\n        console.log(i)\n    })\n}\n输出\n5\n5\n5\n5\n5\n```\n修改上面代码，打印结果要求为：0,1，2，3，4","student_answer":"for (var i = 0; i < 5; i++) {\n            (function(i){\n                setTimeout(function () {\n                    console.log(i)\n                })\n            })(i)\n        }"},{"title":"react生命周期","questions_id":"xt05yo-prna5g-f7zqo-ltl5rh","json_path":"xt05yo-prna5g-f7zqo-ltl5rh.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"dingshaoshan","user_id":"ypay2t-7uxsd","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"# react常用生命周期图\n\n## 请在 “其他“ 中查看图片。 \n \n\n\n如图是react常用生命周期图，请阅读图，并在1，2，3，4处填写对应的生命周期","student_answer":"1、shouldComponentUpdate\n2、componentDidMount\n3、componentDidUpdate"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"函数式定义的无状态组件:这种组件只负责根据传入的props来展示，不涉及到要state状态的操作，特点就是:组件不会被实例化，整体渲染性能能得到提升，并且组件不能访问到this对象，同时该组件无法访问生命周期的方法，最后一点，无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用。\nes5原生方式React.createClass定义的组件:创建的是有状态的组件，这些组件是要被实例化的，并且可以访问组件的生命周期。但是它也存在一些问题，第一点 React.createClass会自绑定函数方法导致不必要的性能开销，增加代码过时的可能性。第二点React.createClass的mixins不够自然、直观。\nes6形式的extends React.Component定义的组件:这个组件是react目前极为推荐的创建有状态组件的方式，最终会替代React.createClass方式，React.Component可以更好实现代码复用。\nes5原生方式在函数this自绑定  创建的组件，其每一个成员函数的this都有react自动绑定，任何时候使用，直接使用this.method即可，函数中的this会被正确设置 。在es6中创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不会获取当前组件实例对象。\nReact.createClass在创建组件时，有关组件props的属性类型及组件默认的属性会作为组件实例的属性来配置，其中defaultProps是使用getDefaultProps的方法来获取默认组件属性的。\nReact.Component在创建组件时配置这两个对应信息时，他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类的静态属性来配置的。"},{"title":"分别使用DOM0级DOM2级给一个DIV绑定事件","questions_id":"1gsxn-k09c2j-gq8peo-sohe9","json_path":"1gsxn-k09c2j-gq8peo-sohe9.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"分别使用DOM0级DOM2级给一个button绑定事件，并且描述这两种方式的区别","student_answer":"DOM0级事件：on****这种事件绑定方式属于DOM0级事件绑定 这种事件只能触发事件冒泡阶段不能触发事件捕获阶段,在用同一元素绑定相同的事件,后面的会覆盖前面的，并且this指的是事件流传播到这个元素，就是元素本身。\nDOM2级绑定事件的方法addEventListener(\"事件名\",事件执行语句,布尔值)。 在这个方法中对于精确的元素不区分事件捕获和事件冒泡。事件的执行顺序是按照绑定顺序来的 .同时，在用同一个元素绑定相同的事件,后面的不会覆盖前面的,因为DOM2级事件绑定不会给元素添加属性是直接添加到事件。等同于给一个元素绑定多个事件。"},{"title":"最少两种方式实现点击每个li都弹出下标","questions_id":"puaqas-1modca-2y04jh-brcz59g","json_path":"puaqas-1modca-2y04jh-brcz59g.json","subject_text":"javaScript上","subject_id":"fqtktr-1lq5u","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"<ul id=”test”>\n    <li>这是第一条</li>\n    <li>这是第二条</li>\n    <li>这是第三条</li>\n</ul>","student_answer":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <ul>\n        <li>这是第一条</li>\n        　<li>这是第二条</li>\n        <li>这是第三条</li>\n    </ul>\n    <script>\n        // 第一种\n        var itemli = document.getElementsByTagName(\"li\");\n        for (var i = 0; i < itemli.length; i++) {\n            itemli[i].index = i;\n            itemli[i].onclick = function () {\n                alert( this.index );   \n            }\n        }\n        // 第二种\n        var itemli1 = document.getElementsByTagName(\"li\");\n        for (var i = 0; i < itemli1.length; i++) {\n            (function (n) {\n                itemli1[i].onclick = function () {\n                    alert(\"下标索引值为：\"+ n );  \n                }\n            })(i)\n        }\n    </script>\n</body>\n</html>\n"}]