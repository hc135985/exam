[{"title":"类的抽象","questions_id":"c7y73-e0nft-6rplem-daxvxe","json_path":"c7y73-e0nft-6rplem-daxvxe.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"## 使用ES6的Class完成如下功能\n阿里云产品线十分丰富，拥有ECS、RDS等数百款产品，每个产品都具有一些通用属性，例如：  \nID（id），地域（region），名称（name），同时每个产品又包含自己特有的属性。 ECS拥  \n有实例（instance）属性，可选值有ecs.t1.small、ecs.t3.small、ecs.t1.large RDS  \n拥有数据库类型（dbType）属性，可选值有mysql、mssql、PPAS 请使用你的面向对象知识，  \n基于ES6语法编写ECS、RDS两个类，并实现如下方法：   \n- 1. config() 返回一个字面量对象，可以拿到所有的成员变量。  \n- 2. buy() 返回一个URL，格式https://www.aliyun.com/buy?id=xxx&region=xxx&name=xxx&每个产品自己特有的成员变量","student_answer":"// instance 属性值let instaceEnum = {    t1s: \"ecs.t1.small\",    t3s: \"ecs.t3.small\",    t1l: \"ecs.t1.large\"}// dbType 属性值let dbTypeEnum = {    mysql: \"mysql\",    mssql: \"mssql\",    PPAS: \"PPAS\"}\n// 定义父类，名字是自己取的class Product {    // 通过构造器接收属性值_id、_region、_name    constructor(_id, _region, _name) {        // 增加ID属性        this.id = _id;        // 增加地域（region）属性        this.region = _region;        // 增加名称（name）属性        this.name = _name;    }\n    // 返回所有成员变量    config() {        return this;    }\n    // 获得URL    buy() {        // 设置返回URL的默认值        var url = \"https://www.aliyun.com/buy?\";        // 设置一个空数组，用于存放参数        var urlArr = [];        for (let key in this) {            // 判断是否存在某属性，            // 这里也可以用this.hasOwnProperty(key)            if (this[key])                urlArr.push(key + \"=\" + this[key]);// 拼接后放到数组中        }        // 将urlArr以\"&\"分割转为字符串        url += urlArr.join(\"&\");        return url;    }}\n// 定义子类ECS继承了父类Productclass ECS extends Product {    // 接收通用属性_id,_region,_name与独有的实例（instance）属性    constructor(_id, _region, _name, _instance) {        // 将通用属性传递给父类        super(_id, _region, _name);        // 增加实例（instance）属性        this.instance = _instance;    }}\n// 定义子类RDS继承了父类Productclass RDS extends Product {    // 接收通用属性_id,_region,_name与独有的数据库类型（dbType）属性    constructor(_id, _region, _name, _dbType) {        // 将通用属性传递给父类        super(_id, _region, _name);        // 增加数据库类型（dbType）属性        this.instance = _dbType;    }}"},{"title":"使用类实现任务调度","questions_id":"sue8v-wa50ws-jss7qm-592yt8","json_path":"sue8v-wa50ws-jss7qm-592yt8.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用js实现以下效果 \nvar priorityQueue = new PriorityQueue();  \npriorityQueue.enqueue('优先级1-1', 1);  \npriorityQueue.enqueue('优先级3-1', 3);  \npriorityQueue.enqueue('优先级1-2', 1);  \npriorityQueue.enqueue('优先级2-1', 2);  \npriorityQueue.print();  \n// 优先级1-1 优先级1-2 优先级2-1 优先级3-1 priorityQueue.dequeue();   \n```js\nclass PriorityQueue{\n    constuctor(obj){\n        this.arr=[];\n    }\n    enqueue(str,num){\n        // write your code here\n    }\n    print(){\n       // write your code here \n    }\n}\n```","student_answer":"public class test {\n    private String name;\n    private int population;\n    public test(String name, int population)\n    {\n        this.name = name;\n        this.population = population;\n    }\n    public String getName()\n    {\n         return this.name;\n    }\n \n    public int getPopulation()\n    {\n         return this.population;\n    }\n    public String toString()\n    {\n         return getName() + \" - \" + getPopulation();\n    }\n    public static void main(String args[])\n    {\n        Comparator<test> OrderIsdn =  new Comparator<test>(){\n            public int compare(test o1, test o2) {\n                // TODO Auto-generated method stub\n                int numbera = o1.getPopulation();\n                int numberb = o2.getPopulation();\n                if(numberb > numbera)\n                {\n                    return 1;\n                }\n                else if(numberb<numbera)\n                {\n                    return -1;\n                }\n                else\n                {\n                    return 0;\n                }       }\n \n             \n             \n        };\n        Queue<test> priorityQueue =  new PriorityQueue<test>(11,OrderIsdn);\n         \n                 \n             \n        test t1 = new test(\"t1\",1);\n        test t3 = new test(\"t3\",3);\n        test t2 = new test(\"t2\",2);\n        test t4 = new test(\"t4\",0);\n        priorityQueue.add(t1);\n        priorityQueue.add(t3);\n        priorityQueue.add(t2);\n        priorityQueue.add(t4);\n        System.out.println(priorityQueue.poll().toString());\n    }\n}"},{"title":"访问器属性的应用","questions_id":"txtcbb-7qmgwa-kwpbgu-08tn5qe","json_path":"txtcbb-7qmgwa-kwpbgu-08tn5qe.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请实现以下需求：\n1. 声明一个变量a = 10；\n2. 声明一个变量b，b的值永远自动的保持为a的2倍；\n\n效果如下，\nvar a = 10;\nvar b;\n// 自行实现绑定\n\n最后打印的结果如下：\nconsole.log(a); // 10\nconsole.log(b); // 20\n\na = 30;\nconsole.log(a); // 30\nconsoel.log(b); // 60","student_answer":"let a = 10;\nlet b = a *2;\nconsole.log(a,b)"},{"title":"使用async函数实现多张图片的依次加载（第一张加载完之后才能加载第二张）","questions_id":"fl7dll-xh6eo-hpri8a-edulg","json_path":"fl7dll-xh6eo-hpri8a-edulg.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用async函数实现多张图片的依次加载（第一张加载完之后才能加载第二张）\n\n```js\n// 封装加载图片的promise  \nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}   \nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fSync(imgs){\n   // write your code here\n}\n\nfSync(imgs);\n```","student_answer":"\n// 封装加载图片的promise  \nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n      \t let img=document.querySelector('img')\n        img.src=src;\n        documnet.body.append(img)\n        setTimeout(()=>{\n            resolve(true)\n        },1000)\n    })\n}   \nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fSync(imgs){\n   // write your code here\n  \t for(let i of imgs){\n        await loadImg(i)\n    }\n}\n\nfSync(imgs);\n"}]