[{"title":"类的抽象","questions_id":"c7y73-e0nft-6rplem-daxvxe","json_path":"c7y73-e0nft-6rplem-daxvxe.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"## 使用ES6的Class完成如下功能\n阿里云产品线十分丰富，拥有ECS、RDS等数百款产品，每个产品都具有一些通用属性，例如：  \nID（id），地域（region），名称（name），同时每个产品又包含自己特有的属性。 ECS拥  \n有实例（instance）属性，可选值有ecs.t1.small、ecs.t3.small、ecs.t1.large RDS  \n拥有数据库类型（dbType）属性，可选值有mysql、mssql、PPAS 请使用你的面向对象知识，  \n基于ES6语法编写ECS、RDS两个类，并实现如下方法：   \n- 1. config() 返回一个字面量对象，可以拿到所有的成员变量。  \n- 2. buy() 返回一个URL，格式https://www.aliyun.com/buy?id=xxx&region=xxx&name=xxx&每个产品自己特有的成员变量","student_answer":"class Pro {\n    constructor(id, name, region) {\n        this.id = id;\n        this.name = name;\n        this.region = region;\n    }\n    config() {\n        return this;\n    }\n    buy() {\n        var url = \"https://www.aliyun.com/buy?\";\n        var str = Object.entries(this).map(val => {\n            if (val[1] instanceof Object) {\n                for (let i in val[1]) {\n                    return `${val[0]}=${val[1][i]}`\n                }\n            } else {\n                return `${val[0]}=${val[1]}`\n            }\n\n        }).join(\"&\")\n        return url += str\n    }\n}\nclass ECS extends Pro {\n    constructor(id, name, region, instancs) {\n        super(id, name, region)\n        this.instancs = instancs;\n    }\n}\nclass RDS extends Pro {\n    constructor(id, name, region, dtype) {\n        super(id, name, region)\n        this.dtype = dtype;\n    }\n}\n//ECS\nlet instancs = {\n    t1: \"ecs.t1.small\",\n    t2: \"ecs.t3.small\",\n    t3: \"ecs.t1.large RDS\"\n};\n//RDS\nlet dtype = {\n    s1: \"mysql\",\n    s2: \"mssql\",\n    s3: \"PPAS\"\n}\nvar ecs = new ECS(1, \"ECS\", \"ecs\", instancs);\nvar rds = new RDS(2, \"RDS\", \"rds\", dtype);\nconsole.log(ecs.config())\nconsole.log(rds.config())\nconsole.log(ecs.buy())\nconsole.log(rds.buy())"},{"title":"使用类实现任务调度","questions_id":"sue8v-wa50ws-jss7qm-592yt8","json_path":"sue8v-wa50ws-jss7qm-592yt8.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用js实现以下效果 \nvar priorityQueue = new PriorityQueue();  \npriorityQueue.enqueue('优先级1-1', 1);  \npriorityQueue.enqueue('优先级3-1', 3);  \npriorityQueue.enqueue('优先级1-2', 1);  \npriorityQueue.enqueue('优先级2-1', 2);  \npriorityQueue.print();  \n// 优先级1-1 优先级1-2 优先级2-1 优先级3-1 priorityQueue.dequeue();   \n```js\nclass PriorityQueue{\n    constuctor(obj){\n        this.arr=[];\n    }\n    enqueue(str,num){\n        // write your code here\n    }\n    print(){\n       // write your code here \n    }\n}\n```","student_answer":"class PriorityQueue {\n    constructor(obj) {\n        this.arr = [];\n    }\n    enqueue(str, num) {\n        // write your code here\n        this.str = str;\n        this.num = num;\n        if (this.isEmpty()) {\n            this.arr.push(str)\n        }\n\n    }\n    print() {\n        // write your code here \n    }\n    isEmpty() {\n        return this.arr.length == 0\n    }\n}\nvar priorityQueue = new PriorityQueue()\npriorityQueue.enqueue('优先级1 - 1', 1);\npriorityQueue.enqueue('优先级3 - 1', 3);\npriorityQueue.enqueue('优先级1 - 2', 1);\npriorityQueue.enqueue('优先级2 - 1', 2);\npriorityQueue.print();"},{"title":"访问器属性的应用","questions_id":"txtcbb-7qmgwa-kwpbgu-08tn5qe","json_path":"txtcbb-7qmgwa-kwpbgu-08tn5qe.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请实现以下需求：\n1. 声明一个变量a = 10；\n2. 声明一个变量b，b的值永远自动的保持为a的2倍；\n\n效果如下，\nvar a = 10;\nvar b;\n// 自行实现绑定\n\n最后打印的结果如下：\nconsole.log(a); // 10\nconsole.log(b); // 20\n\na = 30;\nconsole.log(a); // 30\nconsoel.log(b); // 60","student_answer":"var a = 10,\n    b;\nvar obj = {\n    a: a\n}\nObject.defineProperty(obj, \"b\", { value: obj.a * 2 })\nconsole.log(obj)"},{"title":"使用async函数实现多张图片的依次加载（第一张加载完之后才能加载第二张）","questions_id":"fl7dll-xh6eo-hpri8a-edulg","json_path":"fl7dll-xh6eo-hpri8a-edulg.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用async函数实现多张图片的依次加载（第一张加载完之后才能加载第二张）\n\n```js\n// 封装加载图片的promise  \nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}   \nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fSync(imgs){\n   // write your code here\n}\n\nfSync(imgs);\n```","student_answer":"// 封装加载图片的promise  \nlet loadImg = (src) => {\n    return new Promise((resolve, reject) => {\n        // write your code here\n      let img = document.createElement('img')\n           img.src = src\n           document.body.append(img)\n           setTimeout(()=>{\n                resolve(true)\n           },1000)\n    })\n}\nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fSync(imgs) {\n    // write your code here\n    for (var i in imgs) {\n        await loadImg(i)\n    }\n}\n\nfSync(imgs);"}]