[{"title":"使用async函数实现多张图片的依次加载（哪张加载完哪张添加到页面）","questions_id":"5oxqyl-8dnbaa-3dt3o9-qrecrk","json_path":"5oxqyl-8dnbaa-3dt3o9-qrecrk.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用async函数实现多张图片的依次加载（哪张加载完哪张添加到页面）\n\n```js\n// 封装加载图片的promise  \nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}   \nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fAsync(imgs){\n   // write your code here\n}\n\nfAsync(imgs);\n```","student_answer":"//封装加载图片的promise\nlet loadImg=(src)=>{\n  return new Promise((resolve,reject)=>{\n  //write your code here\n    \n  })\n}\nconst imgs=[\"url1\",\"url2\",\"url3\"];\n//依次加载图片\nasync function fAsync(imgs){\n\t//write your code here\n}\nfAsync(imgs);\n\n\n//link/script\nlazy-load-img.js\n//dom\n<ul id=\"list\">\n  </ul>\n//js\n <script>\n    ; (function () {\n      var ul = document.getElementById('list')\n      for (var i = 1; i <= 21; i++) {\n        var li = document.createElement('li')\n        li.innerHTML = '![](./images/default.png)'\n        ul.appendChild(li)\n      }\n      var lazyLoadImg = new LazyLoadImg({\n        el: document.querySelector('#list'),\n        mode: 'diy', //默认模式，将显示原图，diy模式，将自定义剪切，默认剪切居中部分\n        time: 300, // 设置一个检测时间间隔\n        complete: true, //页面内所有数据图片加载完成后，是否自己销毁程序，true默认销毁，false不销毁\n        position: { // 只要其中一个位置符合条件，都会触发加载机制  这些值都是真的浏览器的screenTop来定的\n          top: 200, // 元素距离顶部\n          right: 200, // 元素距离右边\n          bottom: 0, // 元素距离下面\n          left: 0 // 元素距离左边\n        },\n        diy: { //设置图片剪切规则，diy模式时才有效果\n          backgroundSize: '100% 100%',\n          backgroundRepeat: 'no-repeat',\n          backgroundPosition: 'center center'\n        },\n        before: function () { // 图片加载之前执行方法\n          alert(\"到距离了\");\n        },\n        success: function (el) { // 图片加载成功执行方法\n          el.classList.add('success')\n        },\n        error: function (el) { // 图片加载失败执行方法\n          el.src = './images/error.png'\n        }\n      })\n      // lazyLoadImg.start() // 重新开启懒加载程序\n      // lazyLoadImg.destroy() // 销毁图片懒加载程序\n    })()\n      console.log(screenTop);\n  </script>\n\n\n"},{"title":"vue自定义指令","questions_id":"6ivrh-g7kp8a-2gixkg-p117t","json_path":"6ivrh-g7kp8a-2gixkg-p117t.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"## 阅读如下代码，写出代码的功能，输入和输出\n```js\nVue.filter('formatDate', function(value){\n  let date = new Date();\n  date.setTime(value);\n  let year = date.getFullYear(),\n      month = (date.getMonth() + 1).toString().padStart(2, '0'),\n      day = date.getDate().toString().padStart(2, '0'),\n      hour = date.getHours().toString().padStart(2, '0'),\n      min = date.getMinutes().toString().padStart(2, '0'),\n      sec = date.getSeconds().toString().padStart(2, '0');\n  return `${year}-${month}-${day} ${hour}:${min}:${sec}`\n});\n```","student_answer":"//输出 2019-05-18\n//    9:52:01"},{"title":"vue自定义指令","questions_id":"9wck8-qt73nd-0v6s8-f6jyid","json_path":"9wck8-qt73nd-0v6s8-f6jyid.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"## 阅读如下代码，写出代码的功能，输入和输出\n```js\nVue.filter('toThousandFilter', function(num){\n  return (+num || 0).toString().replace(/^-?\\d+/g, m => m.replace(/(?=(?!\\b)(\\d{3})+$)/g, ','))\n});\n```","student_answer":"全局过滤器:我们可以直接在vue对象上使用filter方法注册过滤器，这种全局注册的过滤器在任何一个组件内都可以使用。\n注册全局filter的方法：（接收2个参数：1.过滤器名，2.过滤器函数）\nnum 是通过管道传来的数据\nreturn 返回处理后的数据\n千分位 例如：（111,222,222,223）\n"},{"title":"Vue导航守卫做鉴权处理","questions_id":"42cuvb-7216fb-zlkab2-wwns3d","json_path":"42cuvb-7216fb-zlkab2-wwns3d.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"wbxm4-jf8q6k-lvt2ca-ze96mg","exam_name":"月考","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 在Vue中我们可以使用导航守卫做鉴权，现有要求如下：  \n可以根据getToken()是否返回token判断  \n- 1.如果用户已经登陆  \n  - a. 如果用户要去/login页面，则重定向到/路径  \n  - b. 如果用户要去其他页面，则不做处理直接跳转    \n- 2.如果用户未登陆  \n  - a. 如果用户要去的页面在白名单内，则不做处理直接跳转  \n  - b. 如果用户要去的页面不在白名单内，则重定向到/login页面，并把要去的页面路径作为查询字符串的query的值\n\n```js\nimport router from './router'\nimport { getToken } from '@/utils/auth' // getToken from cookie\n\nconst whiteList = ['/login', '/register', '/auth-redirect']// no redirect whitelist\n\nrouter.beforeEach((to, from, next) => {\n  if (getToken()) { // determine if there has token\n    // write your code here\n  } else {\n    // write your code here\n  }\n})\n```","student_answer":"import store from \"../store\";\nconst router=new Router({...})\nrouter.beforeEach((to, from, next) => {\n  store.commit('GET_USERNAME');//做路由跳转前提交mutation（username）\n  const isLogin = store.state.userName;\n  if (to.name !== \"login\") {\n    if (!isLogin) {\n      next({\n        path: \"/login\"\n      });\n    } else {\n      next();\n    }\n  } else {\n    sessionStorage.clear();\n    store.commit('GET_USERNAME');\n    next();\n  }\n});\n"}]