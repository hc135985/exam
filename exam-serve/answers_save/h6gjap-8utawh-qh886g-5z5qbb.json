[{"title":"青蛙跳台阶","questions_id":"cy51s-cirofn-vxvrne-hgh3tk","json_path":"cy51s-cirofn-vxvrne-hgh3tk.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"用js实现青蛙跳台阶，一共十个台阶，青蛙每次跳一个或者两个台阶，打印出所有可能的跳跃方法（例如：[1,1,1,1,1,1,1,1,1,1]/[2,2,2,2,2]/[1,1,1,1,1,1,1,1,2]）","student_answer":"function getarr(num, res) { \n    if (num === 0) {    //判断当每次跳0步时，定义res为空数组\n        res = [];\n    }\n    var j = 1;           //定义每次跳1步 \n    while (j < 3) {      //进行循环判断，当步数小于3时执行 \n        if (num + j <= 10) {   //当步数添加后小于10步时\n          let newarr = [...res];  //定义数组接收上一次展开后的数组  \n            newarr.push(j);          //将后一次的步数追加到数组中 \n            if (num + j === 10) {   //当总步数为10时，打印数组\n                console.log(newarr)\n            } else {                //当总步数小于10时，再次调用函数，并步数累加\n               getarr(num + j, newarr)\n            }\n        }\n        j++;                    //1循环结束,步数加1，再次执行  \n    }  \n}\ngetarr(0)                     // 调用函数"},{"title":"大小文件读取","questions_id":"z9ndnc-qhzc6-wb5vju-0pvnzk","json_path":"z9ndnc-qhzc6-wb5vju-0pvnzk.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"封装一个方法适配大小文件的读取，限定值2M","student_answer":"let fs=require(\"fs\");    //引入模块\nlet path=require(\"path\");  //引入模块\nfunction getsize(oldpath){   //定义函数\n   let isexe=fs.exists(oldpath); //判断当前路径是否存在\n   if(!isexe){                    //路径不存在直接返回return\n       return\n   }\n   let patharr=fs.readdirSync(oldpath); // 取所传路径下的子集,并返回数组;\n   patharr.forEach((val)=>{             //循环遍历数组进行判断\n       let newpath=path.join(oldpath,val); //合并路径\n    let pathstat=fs.statSync(newpath).isFile();//获取当前路径下的信息并判断是否为文件 \n     if(pathstat){\n        let pathsize=fs.statSync(newpath).size/1024/1024; //获取当前路径下的信息并判断文件大小；\n        if(pathsize<=2){                       //判断文件大小是否小于2M\n           fs.writeFileSync(\"./small.js\",\"UTF-8\",fs.readFileSync(newpath))     //小于2M\n        }else{\n            fs.createReadStream(newpath).pipe(fs.createWritteStream(\"./big.js\"))    //大于2M流式写入读取\n        }\n     }else{\n        getsize(newpath)     //当前路径为文件夹，再次调用函数\n     }\n   })\n   \n}\n\nlet oldpath=path.join(__dirname);  //获取当前路径的绝对路径\ngetsize(oldpath)         //调用函数\n\n"},{"title":"实现多维数组转换为一维数组","questions_id":"60gn1-9nj3mi-hv4xz-t6ecp","json_path":"60gn1-9nj3mi-hv4xz-t6ecp.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"renyuliang","user_id":"bsz88g-071r5","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"封装一个函数可以使得n维数组转换为1维数组，输出","student_answer":"let newarr = []; //定义空数组\nfunction getArr(num) { //定义函数\n     num.forEach((val) => { //将传入的数组进行遍历循环\n          if (Array.isArray(val)) { //判断数组中的每一项是否为数组\n               getArr(val) //存在多维数组，将该数组再次调用函数\n          } else {\n               newarr.push(val) //将不是数组的每一项添加到新数组中\n          }\n     })\n     return newarr //返回转换为一维的数组\n}\ngetArr([1, 2, 1, 5, {}, 12, [1, 2, 15, 1, 2], 1, [\n     [\n          [1, 12, 15]\n     ]\n]]) //调用函数并传参"},{"title":"实现一个评星方法","questions_id":"tak6bp-2bpj3-xh6jpg-elkb8u","json_path":"tak6bp-2bpj3-xh6jpg-elkb8u.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"实现一个评星方法\n说明\n* 可根据传入的评分和总数，返回评星结果（用 ★ 和 ☆ 描述）\n* 评分必选项，四舍五入，总数可选，大于0的整数，默认为5\n* 对于评分为空或小于0、评分大于总数、总数小于0或总数非整数的情况，返回'errror'\n示例\n```\ngetRate(4); // ★★★★☆\ngetRate(4, 8); // ★★★★☆☆☆☆\ngetRate(3.4); //  ★★★☆☆\ngetRate(5, 2); // 'error'\ngetRate(-2); // 'error'\ngetRate(3, 5.5); // 'error'\n```\n\n\n\n\n\n\n\n\n\n\n\n","student_answer":"let str=\"\";    //定义空字符串\nfunction getRate(num,all){  //    定义函数\n     if(!all){              //    当第二个参数为空时，给第二个参数赋值5\n          all=5 \n     }\n     if(all-num<0 || /\\./.test(all) || num<0 || num==null){ //当对于评分为空或小于0、评分大于总数、\n                                                            // 总数小于0或总数非整数的情况，返回’errror’ \n        console.log(\"error\")   \n        return \"error\"                             //  返回error\n     }else{  \n        for(var i=0;i<num;i++){                    //正常时进行循环评分，追加实心评分\n             str+=\"★ \"\n        }\n        for(var j=0;j<all-num;j++){                //循环总数，减去评分，追加空心评分\n          str+=\"☆ \"\n        }\n     }\n     console.log(str)                              //输出最后的评分\n}\n\ngetRate(0)                      //调用函数，传参"}]