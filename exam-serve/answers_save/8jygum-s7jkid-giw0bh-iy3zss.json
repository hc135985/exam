[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"let str =  '';\n\t    window.onresize = function(){\n\t\t\tif(document.body.clientWidth>= 600){\n\t\t\t\t\tif(str === ''){\n\t\t\t\t\t\tstr='hello';\n\t\t\t\t\t\tconsole.log(str);\n\t\t\t\t\t}else{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t}\n\t    }"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"1) 函数式定义的无状态组件\n            是为了创建纯展示组件，这种组件只负责根据传入的props来展示，不涉及到state状态的操作\n            组件不会被实例化，整体渲染性能得到提升。\n            组价也能访问this对象\n            组件无法访问生命周期的方法\n            无状态组件只能访问输出的props，同样的props会得到同样的渲染结果，不会有副作用\n2) es5原生方式React.createClass定义的组件\n            是react刚开始推荐的创建组件的方式，这是ES5的原生JavaScript来实现的React组件。\n            函数this自绑定\n            组件的props的属性类型及组件 默认的属性会作为组件实例的属性来配置\n            state是通过getInitialState方法来配置组件相关的状态\n            可以使用mixins属性\n3) es6形式的extends React.Component定义的组件\n            函数不会自动绑定this\n            由类的静态属性来配置\n            state是在constructor中像初始化组件属性一样声明的\n            暂不支持mixins"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg = (src) => {\n     return new Promise((resolve, reject) => {\n             let img = document.createElement('img')\n             img.src = src\n             document.body.append(img)\n             setTimeout(() => {\n                  resolve(true)\n              }, 1500)\n          })\n      }\n     const images = ['1.jpg', '2.jpg', '3.jpg', '4.jpg'];\n     // 依次加载图片\n     async function func(images) {\n         for (let i of images) {\n           await loadImg(i)\n     }\n}\n  func(images);"},{"title":"防抖场景实现","questions_id":"pee5rm-didl4v-b5ty-eay7yo","json_path":"pee5rm-didl4v-b5ty-eay7yo.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"题目 有一个 input 查询框，每一次 change 都会触发一个“ a 函数”\n要求\n1.此 input 框的 change 请求 在间隔 0.3s 内的过滤掉\n2.提供一个包装函数，可以对上述的“ a 函数”请求过滤做统一的封装\n```\n<input id=\"input\" />\n```","student_answer":"const ipt = document.getElementById('input')\n  function input(value) {\n     console.log(value)\n  }\n \n  \n  function debounce(fun,delay){\n      let timer ;\n      return function(args){\n         const that = this\n         clearTimeout(timer)\n         timer = setTimeout(function(){\n            fun.call(that,args)\n        },delay)\n    }\n   }\n   const debounceInput = debounce(input,300)\n   ipt.addEventListener(\"change\",function(e){\n     debounceInput(e.target.value)\n   })"}]