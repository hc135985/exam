[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":" <span id=\"span\">请改变浏览器窗口大小</span>\n <script>\n   window.onresize = function () {\n      document.getElementById(\"span\").innerHTML = \"宽度：\" + document.documentElement.clientWidth + \"，高度：\" +       document.documentElement.clientHeight;\n      if(document.documentElement.clientWidth>=600){\n           alert('hello')\n       }\n  }\n</script>"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"react:(3种)\n1、函数式定义的无状态组件\n2、es5原生方式React.createClass定义的组件\n3、es6形式的extends React.Component定义的组件\n\n\n区别：\n   无状态函数式组件形式上表现为一个只带有一个render方法的组件类，通过函数形式或者ES6 arrow function的形式在创建，并且该组件是无state状态的 1、组件不会被实例化，整体渲染性能得到提升 2、组件不能访问this对象 3、组件无法访问生命周期的方法 4、无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\n    `React.createClass`是react刚开始推荐的创建组件的方式，这是ES5的原生的JavaScript来实现的React组件\n    React.Component是以ES6的形式来创建react的组件的，是React目前极为推荐的创建有状态组件的方式，最终会取代React.createClass形式；相对于 React.createClass可以更好实现代码复用"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":" let url1 = \"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3293635140,3955114282&fm=26&gp=0.jpg\"\n        let url2 = \"https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1019333328,1858047370&fm=26&gp=0.jpg\"\n        let url3 = \"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=4226468334,723383513&fm=26&gp=0.jpg\"\n\n         function loadImg(url) {\n            let img = new Image()\n            img.src = url\n            return new Promise((resolve, reject) => {\n                img.onload = () => {\n                    console.log(url)\n                    resolve()\n                }\n                img.onerror = (e) => {\n                    reject(e)\n                }\n            })\n        }\n\n\n        loadImg(url1).then(() => {\n            return loadImg(url2)\n        }).then(() => {\n            return loadImg(url3)\n        })"},{"title":"防抖场景实现","questions_id":"pee5rm-didl4v-b5ty-eay7yo","json_path":"pee5rm-didl4v-b5ty-eay7yo.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"题目 有一个 input 查询框，每一次 change 都会触发一个“ a 函数”\n要求\n1.此 input 框的 change 请求 在间隔 0.3s 内的过滤掉\n2.提供一个包装函数，可以对上述的“ a 函数”请求过滤做统一的封装\n```\n<input id=\"input\" />\n```","student_answer":" function a(value){\n        console.log('输入的内容')\n    }\n    const ipt =document.getElementById('input')\n    function debounce(fun,delay){\n        let timer;\n        return function(args){\n            const that=this\n            clearTimeout(timer)\n            timer=setTimeout(function(){\n                fun.call(that.args)\n            },delay)\n        }\n    }\n    const debounceInput=debounce(a,300)\n    ipt.addEventListener('change',function(e){\n        debounceInput(e.target.value)\n    })\n"}]