[{"title":"commonjs规范","questions_id":"ayf32j-5kv76-qvfqh-cigaoo","json_path":"ayf32j-5kv76-qvfqh-cigaoo.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"请简述node环境下的commonjs规范（说出如何导出模块，如何引入模块，如何创建模块）？","student_answer":"node环境下的commonjs规范：\n导出模块： module.exports();  exports()是它的简写形式。\n\n引入模块：require()引入\n\n创建模块：exports.方法名 = function (变量) {\n          return 操作的内容\n       };"},{"title":"let和var的区别","questions_id":"h7f6hq-cezl0g-fyu3o-6onwjf","json_path":"h7f6hq-cezl0g-fyu3o-6onwjf.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"在声明变量的时候，使用`let`和`var`有什么区别呢？","student_answer":"声明变量：\nlet：es6的属性；用来声明一个局部的变量，它区别于const，const是声明常量；let没有变量提升，必须要先声明才能调用；而且它不能在同一作用域内定义相同的变量多次；\n\nvar：es5属性；用来声明一个局部的变量；具有变量提升；可以定义相同的变量多次；"},{"title":"解构赋值和数组的map方法","questions_id":"izvfy-572mw-thxrmm-7aba5s","json_path":"izvfy-572mw-thxrmm-7aba5s.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"如下：是一段html结构\n```   \n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n```\n加载一段对应的javaScript代码\n\n```\n        let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })\n```\n\n请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义","student_answer":" let oUl = document.getElementsByTagName('ul')[0];//获取(第一个)ul标签\nlet li = document.getElementsByTagName('li');//获取li标签\nconst {map,forEach} = [];//使用解构来运用所需的方法\nli = map.call(li,item=>{//使用call方法，遍历类数组\n  let key = 2 * item.getAttribute('key') - 1;//0 2 4 6 \n  item.setAttribute('key',key);//设置新的key值\n  return item;//将每个值返回\n});\noUl.innerHTML = '';//清空ul\nforEach.call(li,item=>{//遍历每个处理后的li\n  oUl.appendChild(item);//给ul里添加返回的每个值\n})"},{"title":"解决以下异步代码问题","questions_id":"pwrym-ypsrgi-3smad-bm9d1m","json_path":"pwrym-ypsrgi-3smad-bm9d1m.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"检索并计算属于同一教室中每个学生的平均分数，例子中教室 ID 为 75。每个学生可以在一年内参加一门或多门课程。以下 API 可用于检索所需数据。\n```\n// GET LIST OF ALL STUDENTS\nGET /api/students\nResponse:\n[{\n    \"id\": 1,\n    \"name\": \"John\",\n    \"classroomId\": 75\n}]\n// GET COURSES FOR GIVEN A STUDENT\nGET /api/courses?filter=studentId eq 1\nResponse:\n[{\n    \"id\": \"history\",\n    \"studentId\": 1\n}, {\n    \"id\": \"algebra\",\n    \"studentId\": 1\n}]\n// GET EVALUATION FOR EACH COURSE\nGET /api/evaluation/history?filter=studentId eq 1\nResponse:\n{\n    \"id\": 200,\n    \"score\": 50,\n    \"totalScore\": 100\n}\n```\n编写一个接受教室 ID 的函数，并根据该函数计算该教室中每个学生的平均值。 该函数的最终输出应该是带有平均分数的学生列表：\n```\n[\n  { \"id\": 1, \"name\": \"John\", \"average\": 70.5 },\n  { \"id\": 3, \"name\": \"Lois\", \"average\": 67 },\n}\n```\n使用普通回调，promises，observables，generator 或 async-wait 编写所需的函数。 尝试使用至少 2 种不同的技术解决这个问题。\n代码素材用于代替接口\n```\nconst APIS = {\n  STUDENTS: '/api/students',\n  COURSES: '/api/courses',\n  EVALUATION: '/api/evaluation/'\n}; \nfunction fetchData(api) {\n  return new Promise(resolve => {\n    let data = null;\n    switch (api) {\n      case APIS.STUDENTS:\n        data = [{\n          id: 1,\n          name: 'John',\n          classroomId: 75\n        }, {\n          id: 1,\n          name: 'Tom',\n          classroomId: 75\n        }];\n        break;\n      case APIS.COURSES:\n        data = [{\n          id: 'history',\n          studentId: 1\n        }, {\n          id: 'algebra',\n          studentId: 1\n        }];\n        break;\n      case APIS.EVALUATION:\n        data = {\n          id: '200',\n          score: 50,\n          totalScore: 100\n        };\n        break;\n    } \n    resolve(data);\n  });\n} \n```","student_answer":" async function statusId(uid) {\n            let students = await fetchData('/api/students');\n            //找到教室里的所有学生\n            let testStudents = students.filter(item => item.classroomId == uid);\n            //遍历得到每个人的信息\n            let everyStudents = testStudents.map(async(item) => {\n                console.log(item);\n                return await fetchData('/api/courses?filter=' + item.uid);\n            });\n            console.log(everyStudents);\n\n            let Response = everyStudents.map(async(item, i) => {\n                console.log(item)\n                let len = item.length;\n                let totscore = item.map(async(v) => {\n                    console.log(v);\n                    // 科目分数\n                    let score = await fetchData('/api/evaluation/' + v.id + '?filter=' + item[0].id);\n                    return score.score;\n                });\n\n                let tatalScore = totscore.reduce((sum, limit) => tot + limit);\n                console.log(tatalScore); //总分\n                return {\n                    id: item[0].id,\n                    name: item[0].name,\n                    average: Math.floor(tatalScore / len)\n                }\n            })\n            return new Promise((resolve, reject) => {\n                resolve({\n                    Response\n                })\n            })\n        }\n\n        statusId(75).then(students => console.log(students));"}]