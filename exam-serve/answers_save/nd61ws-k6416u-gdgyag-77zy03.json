[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":" window.onresize = function(){\n   if(window.innerWidth===600){\n     console.log('hello')\n   }\n   setTimeout(()=>{\n\n   })\n  }"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":"方式:\n  函数式定义的无状态组件\n  es5原生方式React.createClass定义的组件\n  es6形式的extends React.Component定义的组件\n区别:\n无状态函数式组件\n  function HelloComponent(props, /* context */) {\n    return <div>Hello {props.name}</div>\n  }\n  ReactDOM.render(<HelloComponent name=\"Sebastian\" />, mountNode) \n  只带有一个render方法的组件类，通过函数形式或者箭头函数形式在创建，并且无state。\n  不会被实例化；不能访问this，因为没有实例化过程；无法访问生命周期方法；只能访问输入的props，不会有副作用。\n\n React.createClass\n\t`React.createClass`是react刚开始推荐的创建组件的方式，这是ES5的原生的JavaScript来实现的React组件\n  var InputControlES5 = React.createClass({\n    propTypes: {//定义传入props中的属性各种类型\n        initialValue: React.PropTypes.string\n    },\n    defaultProps: { //组件默认的props对象\n        initialValue: ''\n    },\n    // 设置 initial state\n    getInitialState: function() {//组件相关的状态对象\n        return {\n            text: this.props.initialValue || 'placeholder'\n        };\n    },\n    handleChange: function(event) {\n        this.setState({ //this represents react component instance\n            text: event.target.value\n        });\n    },\n    render: function() {\n        return (\n            <div>\n                Type something:\n                <input onChange={this.handleChange} value={this.state.text} />\n            </div>\n        );\n    }\n});\n  \nReact.Component\n  class InputControlES6 extends React.Component {}\n  React.Component创建的组件，其成员函数不会自动绑定this；\n  React.createClass创建的组件，其每一个成员函数的this都有React自动绑定。\nReact.Component有三种手动绑定方法：\n  在构造函数中完成绑定；\n   constructor(props) {\n       super(props);\n       this.handleClick = this.handleClick.bind(this); //构造函数中绑定\n  \t\t}\n  在调用时使用method.bind(this)来完成绑定；\n  <div onClick={this.handleClick.bind(this)}></div> //使用bind来绑定\n  使用arrow function来绑定。\n   <div onClick={()=>this.handleClick()}></div> //使用arrow function来绑定\n"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":"let loadImg = (src)=>{\n\treturn new Promise((resolve,reject)=>{\n\t\t const img = new Image();\n      img.onload = () => {\n        resolve(img);\n      }\n      img.onerror = () => {\n        reject('找不到图片');\n      }\n      img.src = 'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1553317263654&di=04d5c2e5ec7ede15ae484b1ab7b1ec4c&imgtype=0&src=http%3A%2F%2Fimg.zcool.cn%2Fcommunity%2F0195f55972f18ca8012193a342310a.gif';\n\t})\n  \n  promise.then((img) => {\n    document.body.appendChild(img);\n  }, (mess) => {\n    alert(mess);\n  })\n}\n"}]