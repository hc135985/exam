[{"title":"commonjs规范","questions_id":"ayf32j-5kv76-qvfqh-cigaoo","json_path":"ayf32j-5kv76-qvfqh-cigaoo.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"请简述node环境下的commonjs规范（说出如何导出模块，如何引入模块，如何创建模块）？","student_answer":"使用require引入模块\n使用module.exports导出模块\n创建js文件 来创建模块"},{"title":"let和var的区别","questions_id":"h7f6hq-cezl0g-fyu3o-6onwjf","json_path":"h7f6hq-cezl0g-fyu3o-6onwjf.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"在声明变量的时候，使用`let`和`var`有什么区别呢？","student_answer":"let 语句声明一个变量，该变量的范围限于声明它的块中。可以在声明变量时为变量赋值，也可以稍后在脚本中给变量赋值。  \nlet 声明的变量，未声明前使用，将会导致错误。"},{"title":"解构赋值和数组的map方法","questions_id":"izvfy-572mw-thxrmm-7aba5s","json_path":"izvfy-572mw-thxrmm-7aba5s.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"如下：是一段html结构\n```   \n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n```\n加载一段对应的javaScript代码\n\n```\n        let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })\n```\n\n请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义","student_answer":"<!-- 如下：是一段html结构 -->\n\n<ul>\n    <li key=\"1\"></li>\n    <li key=\"2\"></li>\n    <li key=\"3\"></li>\n    <li key=\"4\"></li>\n</ul>\n<!-- 加载一段对应的javaScript代码 -->\n<script>\n    //声明一个变量来获取ul下的第一个li\n    let oUl = document.getElementsByTagName('ul')[0];\n    //声明一个变量来获取所有li\n    let li = document.getElementsByTagName('li');\n    const {\n        map,\n        forEach\n    } = [];\n    //修改每一个li的key值\n    li = map.call(li, item => {\n        let key = 2 * item.getAttribute('key') - 1;\n        item.setAttribute('key', key);\n        return item;\n    });\n    console.log(li)\n        //清空ul的innerHTML\n    oUl.innerHTML = '';\n    //在ul添加新的li节点\n    forEach.call(li, item => {\n            oUl.appendChild(item);\n        })\n        //请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义\n        //把每一个li的key属性重新赋值保存 然后在加给新添加的li\n</script>"},{"title":"解决以下异步代码问题","questions_id":"pwrym-ypsrgi-3smad-bm9d1m","json_path":"pwrym-ypsrgi-3smad-bm9d1m.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"检索并计算属于同一教室中每个学生的平均分数，例子中教室 ID 为 75。每个学生可以在一年内参加一门或多门课程。以下 API 可用于检索所需数据。\n```\n// GET LIST OF ALL STUDENTS\nGET /api/students\nResponse:\n[{\n    \"id\": 1,\n    \"name\": \"John\",\n    \"classroomId\": 75\n}]\n// GET COURSES FOR GIVEN A STUDENT\nGET /api/courses?filter=studentId eq 1\nResponse:\n[{\n    \"id\": \"history\",\n    \"studentId\": 1\n}, {\n    \"id\": \"algebra\",\n    \"studentId\": 1\n}]\n// GET EVALUATION FOR EACH COURSE\nGET /api/evaluation/history?filter=studentId eq 1\nResponse:\n{\n    \"id\": 200,\n    \"score\": 50,\n    \"totalScore\": 100\n}\n```\n编写一个接受教室 ID 的函数，并根据该函数计算该教室中每个学生的平均值。 该函数的最终输出应该是带有平均分数的学生列表：\n```\n[\n  { \"id\": 1, \"name\": \"John\", \"average\": 70.5 },\n  { \"id\": 3, \"name\": \"Lois\", \"average\": 67 },\n}\n```\n使用普通回调，promises，observables，generator 或 async-wait 编写所需的函数。 尝试使用至少 2 种不同的技术解决这个问题。\n代码素材用于代替接口\n```\nconst APIS = {\n  STUDENTS: '/api/students',\n  COURSES: '/api/courses',\n  EVALUATION: '/api/evaluation/'\n}; \nfunction fetchData(api) {\n  return new Promise(resolve => {\n    let data = null;\n    switch (api) {\n      case APIS.STUDENTS:\n        data = [{\n          id: 1,\n          name: 'John',\n          classroomId: 75\n        }, {\n          id: 1,\n          name: 'Tom',\n          classroomId: 75\n        }];\n        break;\n      case APIS.COURSES:\n        data = [{\n          id: 'history',\n          studentId: 1\n        }, {\n          id: 'algebra',\n          studentId: 1\n        }];\n        break;\n      case APIS.EVALUATION:\n        data = {\n          id: '200',\n          score: 50,\n          totalScore: 100\n        };\n        break;\n    } \n    resolve(data);\n  });\n} \n```","student_answer":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n\n<body>\n    <script>\n        // 手写代码\n        // 检索并计算属于同一教室中每个学生的平均分数，例子中教室 ID 为 75。每个学生可以在一年内参加一门或多门课程。\n        // 以下 API 可用于检索所需数据。\n\n        // GET LIST OF ALL STUDENTS\n        // GET / api / students\n        // Response: [{\n        //         \"id\": 1,\n        //         \"name\": \"John\",\n        //         \"classroomId\": 75\n        //     }]\n        // GET COURSES FOR GIVEN A STUDENT\n        // GET / api / courses ? filter = studentId eq 1\n        // Response: [{\n        //         \"id\": \"history\",\n        //         \"studentId\": 1\n        //     }, {\n        //         \"id\": \"algebra\",\n        //         \"studentId\": 1\n        //     }]\n        // GET EVALUATION FOR EACH COURSE\n        // GET / api / evaluation / history ? filter = studentId eq 1\n        // Response: {\n        //     \"id\": 200,\n        //     \"score\": 50,\n        //     \"totalScore\": 100\n        // }\n        //编写一个接受教室 ID 的函数， 并根据该函数计算该教室中每个学生的平均值。 \n        async function jieId(id) {\n            new Promise((resolve, reject) => {\n                if (response && response.length) {\n                    //若存在则成功\n                    resolve({\n                        response\n                    })\n                } else {\n                    reject({\n                        response: '失败'\n                    })\n                }\n            })\n            mui.ajax('/api/students', {\n                data: {\n                    classroomId: id\n                },\n                success(re) {\n                    return re.map(file => {\n                        //遍历数据 先获取每个学生的成绩\n                        //通过成绩算出平均分\n                        //返回一个新对象接受数据\n                        return obj = {\n                            \"id\": file.id,\n                            \"name\": file.name,\n                            \"average\": 总分 / 次数\n                        }\n                    })\n                }\n            })\n        }\n        jieId.then(re => {\n            console.log(re)\n        });\n        //该函数的最终输出应该是带有平均分数的学生列表：\n\n        //     [{\n        //         \"id\": 1,\n        //         \"name\": \"John\",\n        //         \"average\": 70.5\n        //     }, {\n        //         \"id\": 3,\n        //         \"name\": \"Lois\",\n        //         \"average\": 67\n        //     },\n        // }\n        //使用普通回调， promises， observables， generator 或 async - wait 编写所需的函数。 \n        //尝试使用至少 2 种不同的技术解决这个问题。 代码素材用于代替接口\n\n        const APIS = {\n            STUDENTS: '/api/students',\n            COURSES: '/api/courses',\n            EVALUATION: '/api/evaluation/'\n        };\n\n        function fetchData(api) {\n            return new Promise(resolve => {\n                let data = null;\n                switch (api) {\n                    case APIS.STUDENTS:\n                        data = [{\n                            id: 1,\n                            name: 'John',\n                            classroomId: 75\n                        }, {\n                            id: 1,\n                            name: 'Tom',\n                            classroomId: 75\n                        }];\n                        break;\n                    case APIS.COURSES:\n                        data = [{\n                            id: 'history',\n                            studentId: 1\n                        }, {\n                            id: 'algebra',\n                            studentId: 1\n                        }];\n                        break;\n                    case APIS.EVALUATION:\n                        data = {\n                            id: '200',\n                            score: 50,\n                            totalScore: 100\n                        };\n                        break;\n                }\n                resolve(data);\n            });\n        }\n    </script>\n</body>\n\n</html>"}]