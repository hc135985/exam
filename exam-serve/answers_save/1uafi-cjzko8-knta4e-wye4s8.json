[{"title":"类的抽象","questions_id":"c7y73-e0nft-6rplem-daxvxe","json_path":"c7y73-e0nft-6rplem-daxvxe.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"## 使用ES6的Class完成如下功能\n阿里云产品线十分丰富，拥有ECS、RDS等数百款产品，每个产品都具有一些通用属性，例如：  \nID（id），地域（region），名称（name），同时每个产品又包含自己特有的属性。 ECS拥  \n有实例（instance）属性，可选值有ecs.t1.small、ecs.t3.small、ecs.t1.large RDS  \n拥有数据库类型（dbType）属性，可选值有mysql、mssql、PPAS 请使用你的面向对象知识，  \n基于ES6语法编写ECS、RDS两个类，并实现如下方法：   \n- 1. config() 返回一个字面量对象，可以拿到所有的成员变量。  \n- 2. buy() 返回一个URL，格式https://www.aliyun.com/buy?id=xxx&region=xxx&name=xxx&每个产品自己特有的成员变量","student_answer":"let instaceEnum = {\n            t1s: \"ecs.t1.small\",\n            t3s: \"ecs.t3.small\",\n            t1l: \"ecs.t1.large\"\n        }\n        let dbTypeEnum = {\n            mysql: \"mysql\",\n            mssql: \"mssql\",\n            PPAS: \"PPAS\"\n        }\n        class Product {\n            constructor(_id, _region, _name) {\n                this.id = _id;\n                this.region = _region;\n                this.name = _name;\n            }\n\n\n            config() {\n                return this;\n            }\n\n\n            buy() {\n                var url = \"https://www.aliyun.com/buy?\";\n                var urlArr = [];\n                for (let key in this) {\n                    if (this[key])\n                        urlArr.push(key + \"=\" + this[key]);\n                }\n                url += urlArr.join(\"&\");\n                return url;\n            }\n        }\n\n\n        class ECS extends Product {\n            constructor(_id, _region, _name, _instance) {\n                super(_id, _region, _name);\n                this.instance = _instance;\n            }\n        }\n\n\n        class RDS extends Product {\n            constructor(_id, _region, _name, _dbType) {\n                super(_id, _region, _name);\n                this.instance = _dbType;\n            }\n        }\n// 定义父类，名字是自己取的class Product {}\n// 定义子类ECS继承了父类Productclass ECS extends Product {}\n// 定义子类RDS继承了父类Productclass RDS extends Product {}\n// instance 属性值let instaceEnum = {    t1s: \"ecs.t1.small\",    t3s: \"ecs.t3.small\",    t1l: \"ecs.t1.large\"}// dbType 属性值let dbTypeEnum = {    mysql: \"mysql\",    mssql: \"mssql\",    PPAS: \"PPAS\"}\n// 定义父类，名字是自己取的class Product {    // 通过构造器接收属性值_id、_region、_name    constructor(_id, _region, _name) {        // 增加ID属性        this.id = _id;        // 增加地域（region）属性        this.region = _region;        // 增加名称（name）属性        this.name = _name;    }\n    // 返回所有成员变量    config() {        return this;    }\n    // 获得URL    buy() {        // 设置返回URL的默认值        var url = \"https://www.aliyun.com/buy?\";        // 设置一个空数组，用于存放参数        var urlArr = [];        for (let key in this) {            // 判断是否存在某属性，            // 这里也可以用this.hasOwnProperty(key)            if (this[key])                urlArr.push(key + \"=\" + this[key]);// 拼接后放到数组中        }        // 将urlArr以\"&\"分割转为字符串        url += urlArr.join(\"&\");        return url;    }}\n// 定义子类ECS继承了父类Productclass ECS extends Product {    // 接收通用属性_id,_region,_name与独有的实例（instance）属性    constructor(_id, _region, _name, _instance) {        // 将通用属性传递给父类        super(_id, _region, _name);        // 增加实例（instance）属性        this.instance = _instance;    }}\n// 定义子类RDS继承了父类Productclass RDS extends Product {    // 接收通用属性_id,_region,_name与独有的数据库类型（dbType）属性    constructor(_id, _region, _name, _dbType) {        // 将通用属性传递给父类        super(_id, _region, _name);        // 增加数据库类型（dbType）属性        this.instance = _dbType;    }}\n// 测试下是否ok\n// var _ecs = new ECS(1, \"bj\", \"ecs\", instaceEnum.t1l);var _rds = new RDS(2, \"tj\", \"rds\", dbTypeEnum.mssql);  // 输出：ECS { id: 1, region: 'bj', name: 'ecs', instance: 'ecs.t1.large' }console.log(_ecs.config());// 输出：RDS { id: 2, region: 'tj', name: 'rds', instance: 'mssql' }console.log(_rds.config());// 输出：https://www.aliyun.com/buy?id=1&region=bj&name=ecs&instance=ecs.t1.largeconsole.log(_ecs.buy());// 输出：https://www.aliyun.com/buy?id=2&region=tj&name=rds&instance=mssqlconsole.log(_rds.buy());"},{"title":"使用类实现任务调度","questions_id":"sue8v-wa50ws-jss7qm-592yt8","json_path":"sue8v-wa50ws-jss7qm-592yt8.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用js实现以下效果 \nvar priorityQueue = new PriorityQueue();  \npriorityQueue.enqueue('优先级1-1', 1);  \npriorityQueue.enqueue('优先级3-1', 3);  \npriorityQueue.enqueue('优先级1-2', 1);  \npriorityQueue.enqueue('优先级2-1', 2);  \npriorityQueue.print();  \n// 优先级1-1 优先级1-2 优先级2-1 优先级3-1 priorityQueue.dequeue();   \n```js\nclass PriorityQueue{\n    constuctor(obj){\n        this.arr=[];\n    }\n    enqueue(str,num){\n        // write your code here\n    }\n    print(){\n       // write your code here \n    }\n}\n```","student_answer":"function PriorityQueue() {\n\tvar items = [];\n\tfunction QueueElement(element, priority) {\n\t\tthis.element = element;\n\t\tthis.priotity = priority\n\t}\n\tthis.enqueue = function(element, priority) {\n\t\tvar queueElement = new QueueElement(element, priority);\n\t\tif (this.isEmpty()) {\n\t\t\titems.push(queueElement)\n\t\t} else {\n\t\t\tvar added = false;\n\t\t\tfor (var i = 0; i < items.length; i++) {\n\t\t\t\tif (queueElement.priority < items[i].priority) {\n\t\t\t\t\titems.splice(i, 0, queueElement);\n\t\t\t\t\tadded = true;\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!added) {\n\t\t\t\titems.push(queueElement)\n\t\t\t}\n\t\t}\n\t}\n\tthis.print = function() {\n\t\tconsole.log(items.toString())\n\t}\n\tthis.isEmpty = function() {\n\t\treturn items.length == 0;\n\t}\n}\nvar priorityQueue = new PriorityQueue();\npriorityQueue.enqueue('jack', 1);\npriorityQueue.enqueue('shidengyun', 2);\npriorityQueue.print();\n\n\nfunction PriorityQueue() {\n    //初始化队列（使用数组实现）\n    var items = []\n    //因为存在优先级，所以插入的列队应该有一个优先级属性\n    function queueEle(ele, priority) {\n        this.ele = ele\n        this.priority = priority\n    }\n    //入队\n    this.enqueue = function (ele, priority) {\n        let element = new queueEle(ele, priority)\n        //为空直接入队\n        if (this.isEmpty()) {\n            items.push(element)\n        }\n        else {\n            var qeueued = false; //是否满足优先级要求，并且已经入队\n            for (let i = 0; i < this.size(); i++) {\n                if (element.priority < items[i].priority) {\n                    items.splice(i, 0, element)\n                    qeueued = true\n                    break;\n                }\n            }\n            //如果不满足要求，没有按要求入队，那么就直接从尾部入队\n            if (!qeueued) items.push(element)\n        }\n    }\n\n\n    //出队\n    this.dequeue = function () {\n        return items.shift()\n    }\n\n\n    //返回首元素\n    this.front = function () {\n        return items[0]\n    }\n\n\n    //队列是否为空\n    this.isEmpty = function () {\n        return items.length == 0\n    }\n\n\n    //清空队列\n    this.clear = function () {\n        items = []\n    }\n\n\n    //返回队列长度\n    this.size = function () {\n        return items.length\n    }\n\n\n    //查看列队\n    this.show = function () {\n        return items\n    }\n}\n\n\nvar priorityQueue = new PriorityQueue();\npriorityQueue.enqueue('优先级2-1', 2);\npriorityQueue.enqueue('优先级1-1', 1);\npriorityQueue.enqueue('优先级1-2', 1);\npriorityQueue.enqueue('优先级3-1', 3);\npriorityQueue.enqueue('优先级2-2', 2);\npriorityQueue.enqueue('优先级1-3', 1);\npriorityQueue.show(); // 按优先级顺序输出\n\n\n//输出\n[\n0:queueEle {ele: \"优先级1-1\", priority: 1},\n1:queueEle {ele: \"优先级1-2\", priority: 1},\n2:queueEle {ele: \"优先级1-3\", priority: 1},\n3:queueEle {ele: \"优先级2-1\", priority: 2},\n4:queueEle {ele: \"优先级2-2\", priority: 2},\n5:queueEle {ele: \"优先级3-1\", priority: 3}\n]\n\n"},{"title":"访问器属性的应用","questions_id":"txtcbb-7qmgwa-kwpbgu-08tn5qe","json_path":"txtcbb-7qmgwa-kwpbgu-08tn5qe.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请实现以下需求：\n1. 声明一个变量a = 10；\n2. 声明一个变量b，b的值永远自动的保持为a的2倍；\n\n效果如下，\nvar a = 10;\nvar b;\n// 自行实现绑定\n\n最后打印的结果如下：\nconsole.log(a); // 10\nconsole.log(b); // 20\n\na = 30;\nconsole.log(a); // 30\nconsoel.log(b); // 60","student_answer":"var a = 10; \nvar b;\nb = a * 2;\nconsole.log(a);\nconsole.log(b);"},{"title":"使用async函数实现多张图片的依次加载（第一张加载完之后才能加载第二张）","questions_id":"fl7dll-xh6eo-hpri8a-edulg","json_path":"fl7dll-xh6eo-hpri8a-edulg.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用async函数实现多张图片的依次加载（第一张加载完之后才能加载第二张）\n\n```js\n// 封装加载图片的promise  \nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}   \nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fSync(imgs){\n   // write your code here\n}\n\nfSync(imgs);\n```","student_answer":"// 封装加载图片的promise  \n    let loadImg = (src)=>{\n        return new Promise((resolve, reject)=>{\n           let img = document.createElement('img')\n           img.src = src\n           document.body.append(img)\n           setTimeout(()=>{\n                resolve(true)\n           },1000)\n        })\n    }   \n    \n    const imgs = ['url1', 'url2', 'url3'];\n    // 依次加载图片\n    async function fSync(imgs){\n        for(let i of imgs){\n             await loadImg(i)\n        }\n      \n    }\n    \n    fSync(imgs);"}]