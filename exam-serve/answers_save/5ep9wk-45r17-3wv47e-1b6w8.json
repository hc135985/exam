[{"title":"commonjs规范","questions_id":"ayf32j-5kv76-qvfqh-cigaoo","json_path":"ayf32j-5kv76-qvfqh-cigaoo.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"请简述node环境下的commonjs规范（说出如何导出模块，如何引入模块，如何创建模块）？","student_answer":"     一个文件就是一个模块，拥有单独的作用域；\n    普通方式定义的变量、函数、对象都属于该模块内；\n    通过require来加载模块；\n    通过exports和modul.exports来暴露模块中的内容；"},{"title":"let和var的区别","questions_id":"h7f6hq-cezl0g-fyu3o-6onwjf","json_path":"h7f6hq-cezl0g-fyu3o-6onwjf.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"在声明变量的时候，使用`let`和`var`有什么区别呢？","student_answer":"let : 变量只能声明一次；var : 变量可以多次声明\nvar 存在变量提升 但let没有\nlet 存在块级作用域，但var没有；\nlet不可以重复定义变量,var可以重复定义"},{"title":"解构赋值和数组的map方法","questions_id":"izvfy-572mw-thxrmm-7aba5s","json_path":"izvfy-572mw-thxrmm-7aba5s.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"如下：是一段html结构\n```   \n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n```\n加载一段对应的javaScript代码\n\n```\n        let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })\n```\n\n请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义","student_answer":"<ul>\n  <li key=\"1\"></li>\n  <li key=\"2\"></li>\n  <li key=\"3\"></li>\n  <li key=\"4\"></li>\n</ul>\n// 运行结果\n /*<ul>\n        <li key=\"1\"></li>\n        <li key=\"3\"></li>\n        <li key=\"5\"></li>\n        <li key=\"7\"></li>\n    </ul>*/\n//获取ul标签\n    let oUl = document.getElementsByTagName('ul')[0];\n    //获取所有li标签\n    let li = document.getElementsByTagName('li');\n    //定义map，和forEach 函数 从数组取出\n    const { map, forEach } = [];\n    // 重新定义li元素\n    li = map.call(li, item => {\n        //取出当前li的key属性取值求2*val的值\n        let key = 2 * item.getAttribute('key') - 1;\n        // 再设置它的值\n        item.setAttribute('key', key);\n        返回当前的li\n        return item;\n    });\n    // 清空oUl的页面标签\n    oUl.innerHTML = '';\n    //遍历li\n    forEach.call(li, item => {\n        //重新赋值\n        oUl.appendChild(item);\n    })"},{"title":"async配合transition实现自定义动画","questions_id":"bqq54a-jly2z9-m9fg7pj-oio193","json_path":"bqq54a-jly2z9-m9fg7pj-oio193.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"html结构\n```html\n<div id=\"box\"></div>\n```\ncss样式\n```css\n#box{\n  width:100px; height:100px; background-color:red; border-radius:50%; transition:transform 0.5s;\n}\n```\njavaScript代码\n```js\n        const oBox = document.getElementById('box');\n        oBox.addEventListener('transitionend',()=>{\n            let {x,y} = oBox;\n            moveTo.reslove({x,y});\n        },false);\n        function moveTo(x,y){\n            return new Promise((reslove,reject)=>{\n                moveTo.reslove = reslove;\n                oBox.x = x;\n                oBox.y = y;\n                oBox.style.transform = `translate(${x}px,${y}px)`;\n            })\n        }\n```\n\n补全以上代码，使点击oBox后，使oBox走出一个  W 的轨迹（使用async函数实现），并简单写出整体的代码思路。","student_answer":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>async以及promise的应用</title>\n    <style>\n        #box {\n            width: 100px;\n            height: 100px;\n            background-color: red;\n            border-radius: 50%;\n            transition: transform 0.5s ease 0s;\n        }\n    </style>\n</head>\n\n<body>\n    <div id=\"box\"></div>\n    <button data-key=\"W\">点击实现一个W的走位</button>\n    <button data-key=\"Z\">点击实现一个z的走位</button>\n    <script>\n        const oBox = document.getElementById('box');\n        let aBtns = document.getElementsByTagName('button');\n        let globalReslove = null;\n        let postion = [] ;\n        oBox.addEventListener('transitionend', () => { //关键1 动画是异步的 监听transition动画完成的事件\n            if(globalReslove) globalReslove();\n        });\n        // 遍历页面按钮并为其添加点击事件\n        aBtns = Array.from(aBtns);\n        for (let item of aBtns) {\n            item.onclick = function () {\n                // 根据获取按钮元素上的key来执行相应代码\n                if(this.dataset.key === \"W\"){\n                    postion = [].concat([[0,0],[40,40],[80,0],[120,40],[160,0]]);\n                    goMove(postion);\n                }else{\n                    postion = [].concat([[0,0],[80,0],[0,80],[80,80]]);\n                    goMove(postion);\n                }\n            }\n        }\n        function move(x,y) {  // 自行封装一个返回promise的方法，x，y分别代表要移动的横向和纵向的距离\n            return new Promise((reslove, reject) => {\n                oBox.style = `transform : translate(${x}px,${y}px)`;\n                globalReslove = reslove;\n            });\n        }\n\n        //实现w或z走位\n        async function goMove(pos) {\n           for(let item of pos){\n             await move(...item);\n           }\n        }\n\n    </script>\n</body>\n\n</html>"},{"title":"输入的reduce方法","questions_id":"zyocwi-drka9-kx8vv-blrmw9p","json_path":"zyocwi-drka9-kx8vv-blrmw9p.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"现在有一个数组如下：\n```js\n    const car = [\n            {\n                groupName:'水果',\n                type:[\n                    {\n                        name:'苹果',\n                        price:10\n                    },\n                    {\n                        name:'橘子',\n                        price:40\n                    },\n                    {\n                        name:'香蕉',\n                        price:90\n                    }\n                ]\n            },\n            {\n                groupName:'蔬菜',\n                type:[\n                    {\n                        name:'芹菜',\n                        price:10\n                    },\n                    {\n                        name:'菠菜',\n                        price:15\n                    },\n                    {\n                        name:'土豆',\n                        price:8\n                    }\n                ]\n            }\n        ]\n```\n\n根据上述数据，编写一个函数，该函数(computedPrice)接收上述的数据作为参数，返回一个对象，请输入用数组的reduce方法实现。对象的格式如下\n\n```js\n       {\n            allPrice:所有商品的总价格,\n            group:[\n                {\n                    typeName:'水果',\n                    price:所有水果的总价格\n                },\n                {\n                    typeName:'蔬菜',\n                    price:所有蔬菜的总价格\n                }\n            ]\n        } \n```  ","student_answer":"const car = [{\n    groupName: '水果',\n    type: [{\n        name: '苹果',\n        price: 10\n    }, {\n        name: '橘子',\n        price: 40\n    }, {\n        name: '香蕉',\n        price: 90\n    }]\n}, {\n    groupName: '蔬菜',\n    type: [{\n        name: '芹菜',\n        price: 10\n    }, {\n        name: '菠菜',\n        price: 15\n    }, {\n        name: '土豆',\n        price: 8\n    }\n    ]\n}]\n\nfunction computedPrice(arr){\n    // 设置初始变量\n    var newObj = {};\n    var newArr = [];\n    var sumPrice =[];\n    newObj[\"group\"] = []; \n    //遍历当前arr\n    arr.forEach((item,ind) => {\n        //记录每项的值\n        newArr = []\n        //设置对象\n        newObj[\"group\"][ind]={};\n        //设置类型名字\n        newObj[\"group\"][ind][\"typeName\"] = item.groupName;\n        //遍历价格添加新数组\n        item.type.forEach((item,ind)=>{\n            newArr.push(item.price)\n            \n        })\n        //求和\n        sumPrice.push( newArr.reduce((total, num)=>{return total+num}));\n        newObj[\"group\"][ind][\"price\"] = newArr.reduce((total, num)=>{return total+num});       \n    });\n    //求总和\n    newObj[\"allPrice\"] = sumPrice.reduce((total, num)=>{return total+num});\n    //返回\n    return newObj;\n}\n\n"}]