[{"title":"computed 和 watch 区别","questions_id":"joo9h2-q79phw-pskuido-ua4t7k","json_path":"joo9h2-q79phw-pskuido-ua4t7k.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"computed 和 watch 区别?\n\n\n\n\n\n\n\n\n\n\n\n","student_answer":"watch：一个值决定多个值，当你需要在数据变化响应时，执行异步操作，或高性能消耗的操作，自定义 watcher 的方式就会很有帮助。\ncomputed 多个值决定一个值，可以关联多个实时计算的对象，当这些对象中的其中一个改变时都会出发这个属性。具有缓存能力，所以只有当数据再次改变时才会重新渲染，否则就会直接拿取缓存中的数据。"},{"title":"实现双向数据绑定","questions_id":"nodsz-nme56x-51nrc-tklsfn","json_path":"nodsz-nme56x-51nrc-tklsfn.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"使用js实现一个数据双向绑定效果, input中输入的内容同步到p标签中\n```\n<div id=\"app\">\n    <input type=\"text\" id=\"txt\">\n    <p id=\"show-txt\"></p>\n</div>\n```","student_answer":"        var obj = {};\n        Object.defineProperty(obj, 'txt', {\n            get: function () {\n                return obj;\n            },\n            set: function (newValue) {\n                document.getElementById('txt').value = newValue;\n                document.getElementById('show-txt').innerHTML = newValue;\n            }\n        });\n        document.getElementById('txt').addEventListener('keyup', function (e) {\n            obj.txt = e.target.value;\n        });\n"},{"title":"Vue导航守卫做鉴权处理","questions_id":"42cuvb-7216fb-zlkab2-wwns3d","json_path":"42cuvb-7216fb-zlkab2-wwns3d.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"wbxm4-jf8q6k-lvt2ca-ze96mg","exam_name":"月考","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 在Vue中我们可以使用导航守卫做鉴权，现有要求如下：  \n可以根据getToken()是否返回token判断  \n- 1.如果用户已经登陆  \n  - a. 如果用户要去/login页面，则重定向到/路径  \n  - b. 如果用户要去其他页面，则不做处理直接跳转    \n- 2.如果用户未登陆  \n  - a. 如果用户要去的页面在白名单内，则不做处理直接跳转  \n  - b. 如果用户要去的页面不在白名单内，则重定向到/login页面，并把要去的页面路径作为查询字符串的query的值\n\n```js\nimport router from './router'\nimport { getToken } from '@/utils/auth' // getToken from cookie\n\nconst whiteList = ['/login', '/register', '/auth-redirect']// no redirect whitelist\n\nrouter.beforeEach((to, from, next) => {\n  if (getToken()) { // determine if there has token\n    // write your code here\n  } else {\n    // write your code here\n  }\n})\n```","student_answer":"import router from './router'\nimport { getToken } from '@/utils/auth' // getToken from cookie\nconst whiteList = ['/login', '/register', '/auth-redirect']// no redirect whitelis\nvueRouter.beforeEach(function(to,from,next){\n    console.log(\"进入守卫\");\n    if (userInfo.user_id>0){\n        console.log(\"登录成功\");\n        next();  \n    }else{\n        console.log(\"登录失败\");\n        getUserInfo.then(res => {\n            if(res){\n                if (res.user_id){\n                    if (res.status == 4) {\n                        next({ path: '/login', replace: true, query: { noGoBack: true } })\n                    }\n                    if (res.status != 1 && res.status != 3) {\n                        if (!res.mobile ) {\n                            next({ path: '/register', replace: true, query: { noGoBack: true }})\n                        } else {\n                            next({ path: '/auth-redirect', replace: true, query: { noGoBack: true } })\n                        }\n                    }\n                    next(); \n                }else{\n                    if (whiteList.indexOf(to.path) !== -1) { \n                        next(); \n                    }else{\n                        next({ path: '/register', replace: true, query: { noGoBack: true }})\n                    } \n                }\n                \n            }else{\n                \n                }\n            }\n            \n        }).catch(()=>{\n            next({ path: '/login', replace: true, query: { noGoBack: true }})\n        })\n    }\n    \n    \n});\n\nexport default router"},{"title":"Vue基础知识","questions_id":"uecyx-3qim4-rwk9o-v43sj8","json_path":"uecyx-3qim4-rwk9o-v43sj8.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"wbxm4-jf8q6k-lvt2ca-ze96mg","exam_name":"月考","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 谈谈对Vue响应原理的理解?","student_answer":"  Vue 采用声明式编程替代过去的类 Jquery 的命令式编程，并且能够侦测数据的变化，更新视图。这使得我们可以只关注数据本身，   而不用手动处理数据到视图的渲染，避免了繁琐的 DOM 操作，提高了开发效率。\n1、Vue 数据响应核心就是使用了 Object.defineProperty 方法。\n2、vue 的响应式系统依赖于三个重要的类：Dep 类、Watcher 类、Observer 类。[ Dep 类作为发布者的角色，Watcher 类作为订阅者的角色，Observer 类则是连接发布者和订阅者的纽带，决定订阅和发布的时机 ]\n3、数据的双向绑定：数据的双向绑定即数据和视图之间的同步，视图随着数据变化而变化，反之亦然"}]