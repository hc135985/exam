[{"title":"commonjs规范","questions_id":"ayf32j-5kv76-qvfqh-cigaoo","json_path":"ayf32j-5kv76-qvfqh-cigaoo.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"请简述node环境下的commonjs规范（说出如何导出模块，如何引入模块，如何创建模块）？","student_answer":"导出模块：用module.exports 或 exports 导出\n      导出模块 module.exports\n    // app.js\n        let obj = require('./2.js');\n        console.log(obj);   // 1\n     //2.js\n       module.exports = 1;\n　　app.js文件中引入的是2.js文件，然后 2.js文件通过module.exports来赋值为1，require的话还有一点就是他会去寻找引入进来文件的module.export，然后把那个1赋值给了obj，打印出来 1。\n  或\n  // 2.js\n     exports.a = 1;\n     打印出来的东西是  {a: 1};\nexports是module.exports的一个引用， exports 也是一个全局变量，和上面require，module一样，作用域只在模块内\n\n\n引入模块：用require来引入模块\n    //a.js\n     console.log('aaa');\n     //b.js\n    require('./a');//'aaa'\n    注：如果参数字符串以“/”开头，则表示加载的是一个位于绝对路径的模块文件。\n      如果参数字符串以“./”开头，则表示加载的是一个位于相对路径（跟当前执行脚本的位置相比）的模块文件。比如，require('./circle')将加载当前脚本同一目录的      circle.js\n      如果参数字符串不以“./“或”/“开头，则表示加载的是一个默认提供的核心模块\n      \n        \n创建模块：一个文件就是一个模块\n       在a.js中写入一个函数然后导出\n       在b.js中用require引入"},{"title":"let和var的区别","questions_id":"h7f6hq-cezl0g-fyu3o-6onwjf","json_path":"h7f6hq-cezl0g-fyu3o-6onwjf.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"在声明变量的时候，使用`let`和`var`有什么区别呢？","student_answer":"var在函数内使用的时候,作用域是整个函数体.即便是在代码块内也是如此\nvar 的作用域不是块级的，在一个地方声明，所有的地方都能对它进行读取，而let是块级的\nvar: 声明的代码无论写在哪,变量的声明总会提升到作用域的顶部.let不会变量提升\n　var变量能够重复声明，而let变量是无法重复声明的。\n var声明变量的作用域限制在其声明位置的上下文中，let能形成暂时性死区"},{"title":"解构赋值和数组的map方法","questions_id":"izvfy-572mw-thxrmm-7aba5s","json_path":"izvfy-572mw-thxrmm-7aba5s.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"如下：是一段html结构\n```   \n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n```\n加载一段对应的javaScript代码\n\n```\n        let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })\n```\n\n请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义","student_answer":"let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        //{map,forEach} = [].__proto__\n        //数组本身就是一个对象，原型上有map和forEach方法，所以可以从该对象解构map和forEach\n        const {map,forEach} = [];\n        //map本来是数组方法，li是一个类数组或对象不能直接调用map所以使用call修改this指向\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })"},{"title":"解决以下异步代码问题","questions_id":"pwrym-ypsrgi-3smad-bm9d1m","json_path":"pwrym-ypsrgi-3smad-bm9d1m.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"检索并计算属于同一教室中每个学生的平均分数，例子中教室 ID 为 75。每个学生可以在一年内参加一门或多门课程。以下 API 可用于检索所需数据。\n```\n// GET LIST OF ALL STUDENTS\nGET /api/students\nResponse:\n[{\n    \"id\": 1,\n    \"name\": \"John\",\n    \"classroomId\": 75\n}]\n// GET COURSES FOR GIVEN A STUDENT\nGET /api/courses?filter=studentId eq 1\nResponse:\n[{\n    \"id\": \"history\",\n    \"studentId\": 1\n}, {\n    \"id\": \"algebra\",\n    \"studentId\": 1\n}]\n// GET EVALUATION FOR EACH COURSE\nGET /api/evaluation/history?filter=studentId eq 1\nResponse:\n{\n    \"id\": 200,\n    \"score\": 50,\n    \"totalScore\": 100\n}\n```\n编写一个接受教室 ID 的函数，并根据该函数计算该教室中每个学生的平均值。 该函数的最终输出应该是带有平均分数的学生列表：\n```\n[\n  { \"id\": 1, \"name\": \"John\", \"average\": 70.5 },\n  { \"id\": 3, \"name\": \"Lois\", \"average\": 67 },\n}\n```\n使用普通回调，promises，observables，generator 或 async-wait 编写所需的函数。 尝试使用至少 2 种不同的技术解决这个问题。\n代码素材用于代替接口\n```\nconst APIS = {\n  STUDENTS: '/api/students',\n  COURSES: '/api/courses',\n  EVALUATION: '/api/evaluation/'\n}; \nfunction fetchData(api) {\n  return new Promise(resolve => {\n    let data = null;\n    switch (api) {\n      case APIS.STUDENTS:\n        data = [{\n          id: 1,\n          name: 'John',\n          classroomId: 75\n        }, {\n          id: 1,\n          name: 'Tom',\n          classroomId: 75\n        }];\n        break;\n      case APIS.COURSES:\n        data = [{\n          id: 'history',\n          studentId: 1\n        }, {\n          id: 'algebra',\n          studentId: 1\n        }];\n        break;\n      case APIS.EVALUATION:\n        data = {\n          id: '200',\n          score: 50,\n          totalScore: 100\n        };\n        break;\n    } \n    resolve(data);\n  });\n} \n```","student_answer":" function(path,callback){\n        fs.readdir(path,function(err,files){\n       if(err)\n      {\n        callback(err);\n       return;\n      }\n      var result=[];\n     for(var i=0;i<files.length;i++) {\n    fs.stat(path+\"/\"+files[i],function(err,stats){\n    if(stats.isDirectory())\n    result.push(files[i]);\n    }\n    callback(null,result);\n   )\n   }\n  })\n } \nasync.auto({\nresult1:function(callback){setTimeout(function(){callback(null,'functionResult1')},2000)},\nresult2:function(callback){setTimeout(function(){callback(null,'functionResult2')},1000)},\nresult3:['result1','result2',function(callback,replyData){setTimeout(function(){callback(null,replyData.result1+replyData.result2);},1000)}]\n},function(err,data){console.log(data)});"}]