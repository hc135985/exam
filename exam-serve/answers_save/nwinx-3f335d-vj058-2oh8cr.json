[{"title":"commonjs规范","questions_id":"ayf32j-5kv76-qvfqh-cigaoo","json_path":"ayf32j-5kv76-qvfqh-cigaoo.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"请简述node环境下的commonjs规范（说出如何导出模块，如何引入模块，如何创建模块）？","student_answer":"commonjs规范:一个文件就是一个模块，拥有单独的作用域;普通方式定义的变量、函数、对象都属于该模块内;通过require来加载模块;通过exports和modul.exports来暴露模块中的内容；\n导出模块: moudel.exports 或 exports\nmoudel.exports = 函数名或者变量名；\n用 exports 这种方式导出的时候，将函数作为导出对象的一个键值给暴露出来；\n引入模块:require()  \nrequire( 模块名 );\n创建模块:一个文件就是一个模块，创建一个模块也就是创建一个文件"},{"title":"let和var的区别","questions_id":"h7f6hq-cezl0g-fyu3o-6onwjf","json_path":"h7f6hq-cezl0g-fyu3o-6onwjf.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"在声明变量的时候，使用`let`和`var`有什么区别呢？","student_answer":"var是最近的函数作用域，let的作用域是最接近的块作用域，这个比函数的作用域要小。\n当他们是全局变量时，let和var是相同的。当他们处在一个函数内，也是相同的。\nvar定义以后可以修改，不初始化会输出undefined，不会报错。let未定义就输出则会报错直接报错：ReferenceError: \n如果在函数的for里面定义，let只在这个for里面有效。var是在整个函数里面有效。"},{"title":"解构赋值和数组的map方法","questions_id":"izvfy-572mw-thxrmm-7aba5s","json_path":"izvfy-572mw-thxrmm-7aba5s.json","subject_text":"node基础","subject_id":"4pu32-vs796l","exam_id":"8sc5d7-7p5f9e-cb2zii-ahe5i","exam_name":"周考1","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"如下：是一段html结构\n```   \n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n```\n加载一段对应的javaScript代码\n\n```\n        let oUl = document.getElementsByTagName('ul')[0];\n        let li = document.getElementsByTagName('li');\n        const {map,forEach} = [];\n        li = map.call(li,item=>{\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key',key);\n            return item;\n        });\n        oUl.innerHTML = '';\n        forEach.call(li,item=>{\n            oUl.appendChild(item);\n        })\n```\n\n请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义","student_answer":"   <!-- 如下：是一段html结构 -->\n    <ul>\n        <li key=\"1\"></li>\n        <li key=\"2\"></li>\n        <li key=\"3\"></li>\n        <li key=\"4\"></li>\n    </ul>\n    <!-- 加载一段对应的javaScript代码 -->    \n        // 获取ul列表\n        let oUl = document.getElementsByTagName('ul')[0];\n        // 获取li\n        let li = document.getElementsByTagName('li');\n        // 结构出两个变量  \n        const { map, forEach } = [];\n        // map循环遍历 操作li  \n        li = map.call(li, item => {\n            // 让li内的key值发生改变\n            let key = 2 * item.getAttribute('key') - 1;\n            item.setAttribute('key', key);\n            // 返回每一个修改后的item\n            return item;\n        });\n        // 让Ul为空\n        oUl.innerHTML = '';\n        // forEach指向li遍历li让每一个li在从新追加到ul内\n        forEach.call(li, item => {\n            oUl.appendChild(item);\n        })\n    <!-- 请结合html和javaScript描述出这段代码的运行效果，并给每句代码添加注释，在注释中指明该句代码的含义 -->\n结果结构为:<ul>\n  \t<li key=\"1\"></li>\n  \t<li key=\"3\"></li>\n  \t<li key=\"5\"></li>\n\t<li key=\"7\"></li>\n  </ul>\n页面输出:\n·\n·\n·\n·"},{"title":"async配合transition实现自定义动画","questions_id":"bqq54a-jly2z9-m9fg7pj-oio193","json_path":"bqq54a-jly2z9-m9fg7pj-oio193.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"html结构\n```html\n<div id=\"box\"></div>\n```\ncss样式\n```css\n#box{\n  width:100px; height:100px; background-color:red; border-radius:50%; transition:transform 0.5s;\n}\n```\njavaScript代码\n```js\n        const oBox = document.getElementById('box');\n        oBox.addEventListener('transitionend',()=>{\n            let {x,y} = oBox;\n            moveTo.reslove({x,y});\n        },false);\n        function moveTo(x,y){\n            return new Promise((reslove,reject)=>{\n                moveTo.reslove = reslove;\n                oBox.x = x;\n                oBox.y = y;\n                oBox.style.transform = `translate(${x}px,${y}px)`;\n            })\n        }\n```\n\n补全以上代码，使点击oBox后，使oBox走出一个  W 的轨迹（使用async函数实现），并简单写出整体的代码思路。","student_answer":"  <!-- html结构 -->\n\n        <div id=\"box\"></div>\n        <!-- css样式 -->\n        \n        \n        <!-- javaScript代码 -->\n        <script>\n                const oBox = document.getElementById('box');\n                oBox.addEventListener('click',function(){\n                     move();\n                })\n                async function move(){\n                    await moveTo(0,0);\n                    await moveTo(50,100);\n                    await moveTo(100,0);\n                    await moveTo(150,100);\n                    moveTo(200,0);\n                }\n                oBox.addEventListener('transitionend',()=>{\n                    let {x,y} = oBox;\n                    moveTo.reslove({x,y});\n                },false);\n                 function moveTo(x,y){\n                    return new Promise((reslove,reject)=>{\n                        moveTo.reslove = reslove;\n                        oBox.x = x;\n                        oBox.y = y;\n                        oBox.style.transform = `translate(${x}px,${y}px)`;\n                    })\n                }\n        </script>\n 思路:先给oBox加上点击事件 随后创建async函数 利用await每次异步操作后 再次进行调用 \n        <!-- 补全以上代码，使点击oBox后，使oBox走出一个 W 的轨迹（使用async函数实现），并简单写出整体的代码思路。 -->"},{"title":"输入的reduce方法","questions_id":"zyocwi-drka9-kx8vv-blrmw9p","json_path":"zyocwi-drka9-kx8vv-blrmw9p.json","subject_text":"项目实战","subject_id":"94sjh6-lnlxe","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"w916peach","user_id":"axg8t2-oroeja","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"现在有一个数组如下：\n```js\n    const car = [\n            {\n                groupName:'水果',\n                type:[\n                    {\n                        name:'苹果',\n                        price:10\n                    },\n                    {\n                        name:'橘子',\n                        price:40\n                    },\n                    {\n                        name:'香蕉',\n                        price:90\n                    }\n                ]\n            },\n            {\n                groupName:'蔬菜',\n                type:[\n                    {\n                        name:'芹菜',\n                        price:10\n                    },\n                    {\n                        name:'菠菜',\n                        price:15\n                    },\n                    {\n                        name:'土豆',\n                        price:8\n                    }\n                ]\n            }\n        ]\n```\n\n根据上述数据，编写一个函数，该函数(computedPrice)接收上述的数据作为参数，返回一个对象，请输入用数组的reduce方法实现。对象的格式如下\n\n```js\n       {\n            allPrice:所有商品的总价格,\n            group:[\n                {\n                    typeName:'水果',\n                    price:所有水果的总价格\n                },\n                {\n                    typeName:'蔬菜',\n                    price:所有蔬菜的总价格\n                }\n            ]\n        } \n```  ","student_answer":" function sum(computedPrice) {\n          \t let gobj = {};\n            let cobj = {};\n            let obj = {};\n            for (let i = 0; i < computedPrice.length; i++) {\n                switch (computedPrice[i].groupName) {\n                    case '水果':\n                        let num = 0;\n                        for (let j = 0; j < computedPrice[i].type.length; j++) {\n                            num += computedPrice[i].type[j].price;\n                        }\n                        sobj = {\n                            typeName: '水果',\n                            price: num\n                        }\n                        break;\n                    case '蔬菜':\n                        let number = 0;\n                        for (let j = 0; j < computedPrice[i].type.length; j++) {\n                            number += computedPrice[i].type[j].price;\n                        }\n                        cobj = {\n                            typeName: '蔬菜',\n                            price: number\n                        }\n                        break;\n                }\n            }\n            obj = {\n                allPrice: sobj.price + cobj.price,\n                group: [\n                    {\n                        typeName: sobj.typeName,\n                        price: sobj.price,\n                    },\n                    {\n                        typeName: cobj.typeName,\n                        price: cobj.price,\n                    }\n                ]\n            }\n            return obj;\n        }\n        console.log(sum(car));"}]