[{"title":"vue基础知识","questions_id":"00o5nwy-qw7jj-ko6qkb-4uwrhv","json_path":"00o5nwy-qw7jj-ko6qkb-4uwrhv.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 谈谈Vue中v-for指令里key的作用？","student_answer":"vue中列表循环需加:key=\"唯一标识\" 唯一标识可以是item里面id index等，因为vue组件高度复用\n增加Key可以标识组件的唯一性，为了更好地区别各个组件\nkey的作用主要是为了高效的更新虚拟DOM\n为了给Vue一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。key属性的类型只能为 string或者number类型。"},{"title":"Vue基础知识","questions_id":"05snch-6eq8dn-szfd6q-t34nld","json_path":"05snch-6eq8dn-szfd6q-t34nld.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 控制元素显示隐藏的指令v-if与v-show之间的区别及适用场景？","student_answer":"相同点：v-if与v-show都可以动态控制dom元素显示隐藏\n不同点：v-if显示隐藏是将dom元素整个添加或删除，而v-show隐藏则是为该元素添加css--display:none，dom元素还在\n1.手段：v-if是动态的向DOM树内添加或者删除DOM元素；v-show是通过设置DOM元素的display样式属性控制显隐；\n2.编译过程：v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于css切换；\n3.编译条件：v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译（编译被缓存？编译被缓存后，然后再切换的时候进行局部卸载); v-show是在任何条件下（首次条件是否为真）都被编译，然后被缓存，而且DOM元素保留；\n4.性能消耗：v-if有更高的切换消耗；v-show有更高的初始渲染消耗；\n5.使用场景：v-if适合运营条件不大可能改变；v-show适合频繁切换。"},{"title":"vue自定义指令","questions_id":"6ivrh-g7kp8a-2gixkg-p117t","json_path":"6ivrh-g7kp8a-2gixkg-p117t.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码阅读题","questions_type_id":"br9d6s-wh46i","questions_stem":"## 阅读如下代码，写出代码的功能，输入和输出\n```js\nVue.filter('formatDate', function(value){\n  let date = new Date();\n  date.setTime(value);\n  let year = date.getFullYear(),\n      month = (date.getMonth() + 1).toString().padStart(2, '0'),\n      day = date.getDate().toString().padStart(2, '0'),\n      hour = date.getHours().toString().padStart(2, '0'),\n      min = date.getMinutes().toString().padStart(2, '0'),\n      sec = date.getSeconds().toString().padStart(2, '0');\n  return `${year}-${month}-${day} ${hour}:${min}:${sec}`\n});\n```","student_answer":"<template> \n                <div class=\"main\"> \n                <!--當前時間--> \n                <div class=\"time\" v-html=\"$options.filters.formatDate(date)\"></div> \n                </div> \n                </template> \n                <script> \n                export default { \n                name: \"homePage\", \n                data(){ \n                return{ \n                date:new Date() \n                } \n                }, \n                mounted () { \n                var _this = this; \n                this.timer = setInterval(function() { \n                _this.date = new Date(); \n                }, 1000); \n                }, \n                beforeDestroy () { \n                if(this.timer) { \n                clearInterval(this.timer); \n                } \n                }, \n                filters: { \n                formatDate: function (value) { \n                let date = new Date(value); \n                let y = date.getFullYear(); \n                let MM = date.getMonth() + 1; \n                MM = MM < 10 ? ('0' + MM) : MM; \n                let d = date.getDate(); \n                d = d < 10 ? ('0' + d) : d; \n                let h = date.getHours(); \n                h = h < 10 ? ('0' + h) : h; \n                let m = date.getMinutes(); \n                m = m < 10 ? ('0' + m) : m; \n                let s = date.getSeconds(); \n                s = s < 10 ? ('0' + s) : s; \n                return y + '<span style=\"color: #fff;margin:0 10px\">年</span>' + MM + '<span style=\"color: #fff;margin:0 10px\">月</span>' + d + '<span style=\"color: #fff;margin:0 26px 0 10px\">日</span> ' + h + ':' + m + ':' + s; \n                } \n                } \n                } \n                </script>"},{"title":"使用async函数实现多张图片的依次加载（第一张加载完之后才能加载第二张）","questions_id":"fl7dll-xh6eo-hpri8a-edulg","json_path":"fl7dll-xh6eo-hpri8a-edulg.json","subject_text":"组件化开发(vue)","subject_id":"1psw2b-cy7o07","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 使用async函数实现多张图片的依次加载（第一张加载完之后才能加载第二张）\n\n```js\n// 封装加载图片的promise  \nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}   \nconst imgs = ['url1', 'url2', 'url3'];\n// 依次加载图片\nasync function fSync(imgs){\n   // write your code here\n}\n\nfSync(imgs);\n```","student_answer":"// 封装加载图片的promise  \n        let loadImg = (src)=>{\n            return new Promise((resolve, reject)=>{\n            let img = document.createElement('img')\n            img.src = src\n            document.body.append(img)\n            setTimeout(()=>{\n                    resolve(true)\n            },1000)\n            })\n        }   \n\n        const imgs = ['url1', 'url2', 'url3'];\n        // 依次加载图片\n        async function fSync(imgs){\n            for(let i of imgs){\n                await loadImg(i)\n            }\n        \n        }\n\nfSync(imgs);"}]