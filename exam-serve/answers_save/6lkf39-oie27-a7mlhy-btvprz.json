[{"title":"性能优化","questions_id":"00a1t8-ezqkxg-xv9pkk-6hqfyb","json_path":"00a1t8-ezqkxg-xv9pkk-6hqfyb.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"请用js实现一个监听浏览器窗口变化的函数，当浏览器窗口的宽度大于等于 600px 的时候console.log('hello')（持续大于等于600px的话打印一次即可），请用你觉得最优的实现","student_answer":"let inner = \"\";\n        window.onresize = function () {\n            if (document.body.clientWidth >= 600) {\n                if (inner == \"\") {\n                    inner = \"hello\";\n                    alert(inner)\n                }\n            } else {\n                inner = \"\";\n            }\n        }"},{"title":"多种组件创建方式及其区别？","questions_id":"cbssqf-16avt7-qwk8k-ufilrc","json_path":"cbssqf-16avt7-qwk8k-ufilrc.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"简答题","questions_type_id":"774318-730z8m","questions_stem":"## 多种组件创建方式及其区别？","student_answer":" 函数式定义的无状态组件：\n            无状态函数式组件是为了创建纯展示组件，这种组件只负责根据传入的props来展示，不涉及到要state状态的操作。\n             组件不会被实例化，整体渲染性能得到提升\n             组件不能访问this对象\n             组件无法访问生命周期的方法\n            无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用\n            创建:\n                 const Todo = (props) => (\n                  <div>{props.name}</div>\n                )\n                export default Todo\n        es5原生方式React.createClass定义的组件:是react刚开始推荐的创建组件的方式，是ES5的原生的JavaScript来实现的React组件\n            可以访问组件的生命周期方法\n            有状态的组件，要被实例化的\n        es6形式的extends React.Component定义的组件:React.Component是以ES6的形式来创建react的组件的，是React目前极为推荐的创建有状态组件的方式\n        React.createClass与React.Component区别\n            React.createClass创建的组件，其每一个成员函数的this都有React自动绑定，任何时候使用，直接使用this.method即可，函数中的this会被正确设置。\n            React.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。\n            React.createClass在创建组件时，有关组件props的属性类型及组件默认的属性会作为组件实例的属性来配置，其中defaultProps是使用getDefaultProps的方法来获取默认组件属性的\n            React.Component在创建组件时配置这两个对应信息时，他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类的静态属性来配置的。\n            React.createClass创建的组件，其状态state是通过getInitialState方法来配置组件相关的状态；\n            React.Component创建的组件，其状态state是在constructor中像初始化组件属性一样声明的\n"},{"title":"封装图片加载Promise","questions_id":"gt8z4u-ufd66j-najaef-y8ytir","json_path":"gt8z4u-ufd66j-najaef-y8ytir.json","subject_text":"渐进式开发(react)","subject_id":"fyu3ln-azjkie","exam_id":"jpg8y9-zbzt7o-jpvuhf-fwnjvr","exam_name":"周考2","user_name":"chenmanjie","user_id":"w6l6n-cbvl6s","questions_type_text":"代码补全","questions_type_id":"fwf0t-wla1q","questions_stem":"## 封装加载图片的promise  \n```js\nlet loadImg = (src)=>{\n    return new Promise((resolve, reject)=>{\n        // write your code here\n    })\n}\n```\n","student_answer":" let loadImg = (src) => {\n            return new Promise((resolve, reject) => {\n                let img = document.createElement('img')\n                img.src = src\n                document.body.append(img)\n                setTimeout(() => {\n                    resolve(true)\n                }, 1000)\n            })\n        }\n        const imgs = ['banner1.jpg', 'banner2.jpg', 'banner3.jpg', 'banner4.jpg'];\n        async function fAync(imgs) {\n            for (let i of imgs) {\n                await loadImg(i)\n            }\n        }\n        fAync(imgs);"},{"title":"防抖场景实现","questions_id":"pee5rm-didl4v-b5ty-eay7yo","json_path":"pee5rm-didl4v-b5ty-eay7yo.json","subject_text":"javaScript下","subject_id":"wl5yk-38c0g","exam_id":"ukmp9b-radddj-ogwdr-nw3ane","exam_name":"周考3","user_name":"liuyu","user_id":"kqpvys-hpzkdt","questions_type_text":"手写代码","questions_type_id":"v8i73-r8oai","questions_stem":"题目 有一个 input 查询框，每一次 change 都会触发一个“ a 函数”\n要求\n1.此 input 框的 change 请求 在间隔 0.3s 内的过滤掉\n2.提供一个包装函数，可以对上述的“ a 函数”请求过滤做统一的封装\n```\n<input id=\"input\" />\n```","student_answer":" function input(value) {\n          console.log(`输入内容${value}`)\n     }\n  const ipt = document.getElementById('input')\n  \n  function throttle(fun,delay){\n      let last,timer;\n      return function(args){\n          const that = this\n         const now = +new Date()\n         if(last && now < last + delay){\n             clearTimeout(timer)\n             timer = setTimeout(function(){\n                 fun.call(that,args)\n             },delay)\n         }else{\n            last = now\n             fun.call(that,args)\n         }\n     }\n }\n const throttleInput = throttle(input,300)\n ipt.addEventListener(\"change\",function(e){\n     throttleInput(e.target.value)\n })"}]